"""
The given input to check if this member-card is not already connected to another member
"""
input AddCardCheckInput {
    """
    The type of the member-card that needs to be checked
    """
    cardType: String!

    """
    The number of the member-card that needs to be checked
    """
    code: String!
}

"""
The returned value if the checked member-card is valid
"""
type AddMemberCard {
    """
    The value if the member-card is possible to add to the user's account
    """
    addingPossible: Boolean!

    """
    The code returned why the card is not possible to add
    """
    errorCode: String
}

"""
Result type for Add SMSReminder
"""
type AddSMSReminderResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result enum
    """
    reminderStatus: AddSMSReminderStatus!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Additional status information that is returned from the service
"""
enum AddSMSReminderStatus {
    """
    Order not found
    """
    ORDER_NOT_FOUND

    """
    Added
    """
    PHONE_NUMBER_ADDED

    """
    Phone Number Invalid
    """
    PHONE_NUMBER_INVALID
}

"""
Items that are deducted or applied on the totalPrice of OrderCalculationReceipt
"""
type AdditionalReceiptItem {
    """
    amount of times applied
    """
    amount: Int!

    """
    Nested additional items. Max Depth is usually 3
    """
    items: [AdditionalReceiptItem!]!

    """
    price of the item
    """
    price: Money!

    """
    Additional item that can be a cost or a discount
    """
    title: String!

    """
    Type of the receipt item
    """
    type: AdditionalReceiptItemType!
}

"""
Type of the AdditionalReceiptItem
"""
enum AdditionalReceiptItemType {
    """
    Deposit item
    """
    DEPOSIT

    """
    Deposit bags item
    """
    DEPOSIT_BAGS

    """
    Deposit creates item
    """
    DEPOSIT_CRATES

    """
    Deposit groceries item
    """
    DEPOSIT_GROCERIES

    """
    Regular item
    """
    ITEM

    """
    Nationale postcode loterij item
    """
    NPL_VEGA

    """
    Purchase stamps item
    """
    PURCHASE_STAMPS

    """
    Service memo item
    """
    SERVICE_MEMO

    """
    Weight item
    """
    WEIGHT
}

"""
AddressComplete
"""
type AddressComplete {
    """
    City
    """
    city: String!

    """
    CountryCode for example: 'NLD' (Iso3 format)
    """
    countryCode: String!

    """
    House number
    """
    houseNumber: Int!

    """
    The adjacent part of the house number. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Postal code, examples NL: "1072CD" BE: "1024"
    """
    postalCode: PostalCode!

    """
    Street name
    """
    street: String!
}

"""
Address input type, all fields mandatory just as the Address type
"""
input AddressCompleteInput {
    """
    City
    """
    city: String!

    """
    CountryCode for example: 'NLD'
    """
    countryCode: String!

    """
    House number without adjacent part
    """
    houseNumber: Int!

    """
    The adjacent part of the house number. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Zipcode
    """
    postalCode: String!

    """
    Street name of the member
    """
    street: String!
}

type AddressOptions {
    """
    Options for city selection based on partial input address
    """
    city: [String!]

    """
    Options for street selection based on partial input address
    """
    street: [String!]
}

"""
AddressPartial
"""
type AddressPartial {
    """
    City
    """
    city: String

    """
    CountryCode for example: 'NLD' (Iso3 format)
    """
    countryCode: String!

    """
    House number
    """
    houseNumber: Int

    """
    The adjacent part of the house number. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Postal code, examples NL: "1072CD" BE: "1024"
    """
    postalCode: PostalCode

    """
    Street name
    """
    street: String
}

"""
Partial Address input type, all fields optional
"""
input AddressPartialInput {
    """
    City
    """
    city: String

    """
    CountryCode for example: 'NLD'
    """
    countryCode: String!

    """
    House number without adjacent part
    """
    houseNumber: Int

    """
    The adjacent part of the house number. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Zipcode
    """
    postalCode: String!

    """
    Street name of the member
    """
    street: String
}

"""
Address search result
"""
type AddressSearch {
    """
    Normalized / formatted complete and valid address, null if
    there is a partial address
    """
    address: AddressComplete

    """
    'true' if the returned address is a complete address
    """
    isComplete: Boolean!

    """
    'true' if AH delivers orders to the complete or partial
    address
    """
    isDeliveryAvailable: Boolean!

    """
    'true' if the returned complete or partial address is
    a known address for AH
    """
    isValid: Boolean!

    """
    For partial addresses it is possible for certain address
    properties to provide options to choose from to make it a
    complete address.
    This is currently used for the Belgium address search.
    """
    options: AddressOptions

    """
    Normalized / formatted partial and valid address, null if
    there is a complete address, also null if it's a invalid
    address
    """
    partialAddress: AddressPartial
}

"""
Address input type for searching addresses
"""
input AddressSearchInput {
    """
    City
    """
    city: String

    """
    CountryCode for example: 'NLD'
    """
    countryCode: String!

    """
    House number without adjacent part
    """
    houseNumber: Int

    """
    The adjactent part of the house nummber. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Zipcode
    """
    postalCode: String!

    """
    Street name of the member
    """
    street: String
}

"""
An advertisement containing several attributes needed to render it.
"""
type Advertisement {
    """
    The advertiser's id.
    """
    advertiserId: String!

    """
    The advertisement's click tag URL. A click tag URL should be hit when an ad has been clicked on by a user. This is
    not necessary when using the href URL from the CTA, which already routes through a dedicated URL that registers the
    click and redirects to the destination automatically.
    """
    clickTag: String!

    """
    The advertisement's colors.
    """
    colors: AdvertisementColors!

    """
    The creative's id.
    """
    creativeId: String!

    """
    The advertisement's CTA. The CTA contains information on what to do when a user clicks on the advertisement.
    """
    cta: AdvertisementCta!

    """
    The advertisement's height.
    """
    height: Int!

    """
    The advertisement's id.
    """
    id: String!

    """
    The advertisement's images. Using the optional types parameter, you can filter for only the type of images that you
    are interested in.
    """
    images(types: [String!]): [AdvertisementImage!]!

    """
    The lineItem's id.
    """
    lineItemId: String!

    """
    The order's id.
    """
    orderId: String!

    """
    The name of the slot that this advertisement should be placed in.
    """
    slotName: String!

    """
    The advertisement's title text.
    """
    title: String!

    """
    The advertisement's tracked impression counter URL. A tracked impression is when there is place for an
    advertisement to be rendered.
    """
    trackedImpressionCounter: String!

    """
    The advertisement's type. This type also implicitly defines the dimensions of the advertisement.
    """
    type: String!

    """
    The advertisement's viewable impression counter URL. A viewable impression is when the advertisement has been at
    least 50% in view for at least 1 second.
    """
    viewableImpressionCounter: String!

    """
    The advertisement's width.
    """
    width: Int!
}

"""
An Advertisement's colors.
"""
type AdvertisementColors {
    """
    The advertisement's background color. This color is used to render the advertisement's background.
    It is a hexadecimal format of a color, e.g. "#000000" or "#fce2e2".
    """
    background: String!

    """
    The advertisement's text color. This color is used to render the advertisement's text.
    It is a hexadecimal format of a color, e.g. "#000000" or "#fce2e2".
    """
    text: String!
}

"""
An advertisement's CTA.
"""
type AdvertisementCta {
    """
    The CTA links to open when interacting (e.g. clicking) on the advertisement.
    """
    links: AdvertisementCtaLinks!

    """
    The title text of the navigation item, e.g. "Try it now".
    """
    text: String!
}

"""
An advertisement's CTA links.
"""
type AdvertisementCtaLinks {
    """
    A deeplink to open upon interacting with the advertisement in an app.
    """
    deeplink: String!

    """
    A URL to open upon interacting with the advertisement.
    """
    href: String!
}

"""
An advertisement's device type. This refers to the type of device that is used to render the advertisement on.
"""
enum AdvertisementDeviceType {
    """
    A desktop.
    """
    DESKTOP

    """
    A phone.
    """
    PHONE

    """
    A tablet.
    """
    TABLET
}

"""
An advertisement's image.
"""
type AdvertisementImage {
    """
    The image height.
    """
    height: Int!

    """
    The image URL.
    """
    link: String!

    """
    The image title.
    """
    title: String!

    """
    The image type. There are two main types: banner and content. Banner contains the full-width banner, including a
    background. Content contains only the content on the banner, e.g. an image of a product.
    """
    type: String!

    """
    The image width.
    """
    width: Int!
}

"""
Allerhande magazine edition
"""
type AllerhandeMagazine {
    """
    Magazine edition name
    """
    edition: String!

    """
    Magazine edition id
    """
    id: Int!

    """
    Magazine thumbnail imgae url
    """
    thumbnailImageUrl: String!

    """
    Magazine url
    """
    url: String!

    """
    Magazine edition publication year
    """
    year: Int!
}

"""
This property will be filled when a dropdown is a question that has a correct answer and
"""
type AnswerCheck {
    """
    The correct answer that should match one of the dropdown options
    """
    answer: String!

    """
    The message to be shown when the correct answer is chosen
    """
    correctMessage: String!

    """
    The message to be shown when the incorrect answer is chosen
    """
    incorrectMessage: String!
}

"""
Loyalty cards available for the user
"""
type AvailableLoyaltyCards {
    """
    Name to be displayed on card
    """
    displayName: String!

    """
    A card image to be shown
    """
    imageUrl: String

    """
    Colors for card to be shown if url can't be loaded
    """
    placeHolderGradientColors: [String!]!

    """
    Loyalty card type can be something like: BONUS, ETOS, GALL, AIRMILES
    """
    type: LoyaltyCard!
}

"""
Result of performing mutation
"""
type BasicMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Type for basket
"""
type Basket {
    """
    If user can change delivery moment
    """
    canChangeDelivery: Boolean!

    """
    Products, vague term items that are not in an order
    """
    itemsInList: [BasketListItem!]!
        @deprecated(
            reason: "@sunset_date(2023-06-03) - checked 2023-05-08 - used in ah-shoppinglist ah-features - Can be obtained by combining products and notes(vague terms) \n. . "
        )

    """
    Products that are in an order
    """
    itemsInOrder: [BasketOrderItem!]

    """
    Vague terms/notes on your list
    """
    notes: [BasketNote!]!

    """
    Products on your list
    """
    products: [BasketItemProduct!]!

    """
    Total price, quantity, shopping type and other basket info
    """
    summary: BasketSummary!
}

"""
To delete an item from basket
"""
input BasketDelete {
    """
    Vague term to add to basket
    Either `id` or `description` needs to be set
    """
    description: String

    """
    Id of product to add to basket
    Either `id` or `description` needs to be set
    """
    id: Int
}

"""
Type of items in the basket
"""
input BasketItemInput {
    """
    Position of the item in the basket
    """
    position: Int!

    """
    Product id
    """
    productId: Int!

    """
    Quantity of items in the basket
    """
    quantity: Int!
}

"""
basket item product
"""
type BasketItemProduct {
    """
    Product ID
    """
    id: Int!

    """
    The page code where the item is added from
    """
    originCode: String

    """
    Product
    """
    product: Product!

    """
    Amount of items
    """
    quantity: Int!
}

"""
Arguments for checkout recommendations endpoint for basketitems. These are the items that are currently in your the basket.
"""
input BasketItemRecommendationsInput {
    """
    Product id of the favorite list item
    """
    productId: Int!

    """
    Quantity of the product. Defaults to 1.
    """
    quantity: Int!
}

"""
type for vague basket item
"""
type BasketItemVague {
    """
    Title of the vague term item
    """
    description: String!

    """
    The page code where the item is added from
    """
    originCode: String

    """
    Amount of vague term items
    """
    quantity: Int!

    """
    Name from a recipe for example "1 tb spoon of salt" searchTerm will be “salt”
    """
    searchTerm: String
}

"""
BasketListItem union
"""
union BasketListItem = BasketItemProduct | BasketItemVague

"""
We can mutate both products and "vage termen" to the Basket but also to List
"""
input BasketMutation {
    """
    Vague term to add to basket
    Either `id` or `description` needs to be set
    """
    description: String

    """
    Id of product to add to basket
    Either `id` or `description` needs to be set
    """
    id: Int

    """
    Amount of the item to add to the basket
    """
    quantity: Int!
}

"""
Result of performing mutation
"""
type BasketMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Basket after performing the mutation
    """
    result: Basket

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
type for vague basket item
"""
type BasketNote {
    """
    Title of the vague term item
    """
    description: String!

    """
    The page code where the item is added from
    """
    originCode: String

    """
    Amount of vague term items
    """
    quantity: Int!

    """
    Name from a recipe for example "1 tb spoon of salt" searchTerm will be “salt”
    """
    searchTerm: String
}

"""
basket order item
"""
type BasketOrderItem {
    """
    Amount of items that are already allocated for a user
    """
    allocatedQuantity: Int

    """
    Product ID
    """
    id: Int!

    """
    If order is closed
    """
    isClosed: Boolean!

    """
    The page code where the item is added from
    """
    originCode: String

    """
    Product
    """
    product: Product!

    """
    Amount of items
    """
    quantity: Int!
}

"""
Enum for the basket shopping type eg: "DELIVERY", "DELIVERY_POINT"
"""
enum BasketShoppingType {
    """
    Home delivery
    """
    DELIVERY

    """
    Special pickup point for AH employees
    """
    DELIVERY_POINT

    """
    Like a normal pickup but assortment is limited to what is available in the store
    """
    IN_STORE_PICK

    """
    When user is not in order mode and the basket is sorted by walking route
    """
    PHYSICAL_STORE

    """
    Deliver products to a pickup location
    """
    PICKUP

    """
    Special business type of delivery
    """
    PICKUP_DELIVERY

    """
    When user wants to pickup the (special) products in a store.
    """
    SPECIALS_ONLY

    """
    When user did not select shopping type yet
    """
    UNKNOWN
}

"""
Basket summary type
"""
type BasketSummary {
    """
    Delivery date
    """
    deliveryDate: String

    """
    If an order is cancellable
    """
    isCancellable: Boolean

    """
    Active order ID
    """
    orderId: Int

    """
    Price
    """
    price: BasketTotalPrice

    """
    Total amount of items in the basket
    """
    quantity: Int!

    """
    Delivery type for example home delivery or pickup in the store
    """
    shoppingType: BasketShoppingType
}

"""
Basket total price type
"""
type BasketTotalPrice {
    """
    Price of bonuses and discounts
    """
    discount: Money!

    """
    Price after discounts, also acts as subtotal
    """
    priceAfterDiscount: Money!

    """
    Price before discounts
    """
    priceBeforeDiscount: Money!

    """
    Total price
    """
    totalPrice: Money!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
Bonus filter types. When passed it allows to filter products that have bonus price of specified type
"""
enum BonusFilterType {
    """
    All bonus types
    """
    ALL

    """
    Etos bonus type
    """
    ETOS

    """
    Mass bonus type
    """
    MASS

    """
    Default filter
    """
    NONE

    """
    Personal bonus type
    """
    PERSONAL

    """
    Spotlight bonus type
    """
    SPOTLIGHT

    """
    Store bonus type
    """
    STORE
}

"""
Bonus period defines date range of promotions by week
"""
type BonusPeriod {
    """
    Bonus period of current week
    """
    actualWeek: Boolean!

    """
    End date on bonus period
    """
    endDate: String!

    """
    Start date on bonus period
    """
    startDate: String!

    """
    Week number of bonus period
    """
    weekNumber: Int!
}

"""
Promotion type
"""
enum BonusPromotionType {
    """
    Ah Online
    """
    AHONLINE

    """
    ETOS
    """
    ETOS

    """
    GALL
    """
    GALL

    """
    GALLCARD
    """
    GALLCARD

    """
    Usually free delivery
    """
    INCENTIVE

    """
    National
    """
    NATIONAL

    """
    Personal
    """
    PERSONAL

    """
    Previously bought
    """
    PREVIOUSLY_BOUGHT

    """
    Spotlight
    """
    SPOTLIGHT
}

"""
BonusSection
"""
type BonusSection {
    """
    Bonus section description
    """
    description: String!

    """
    Bonus section id
    """
    id: String!

    """
    Bonus section image(s)
    """
    images: [ImageSet!]!

    """
    Bonus section segment count
    """
    segmentCount: Int!

    """
    Bonus section type
    """
    type: BonusPromotionType

    """
    Link to bonus section detail
    """
    url: String!
}

"""
Bonus segment defines bonus
"""
type BonusSegment {
    """
    Activation status of segment for
    personal bonus
    e.g. ACTIVATED, ACTIVATABLE, ASSIGNED
    """
    activationStatus: BonusSegmentActivationStatus!

    """
    Availability date range
    """
    availability: BonusSegmentAvailability!

    """
    Category
    """
    category: String

    """
    Description
    """
    description: String

    """
    Discount
    """
    discount: BonusSegmentDiscount!

    """
    'DiscountLabels' are the discount labels coming from the promotion-label-renderer service as an object of properties and represents all our discount types.
    @See https://github.com/RoyalAholdDelhaize/lib-promotion-label-renderer/blob/master/docs/discount_labels_doc.md
    """
    discountLabels: [BonusSegmentDiscountLabel!]

    """
    'DiscountShields' are the formatted text version of DiscountLabelCodes
    Example: ['2e, gratis'], ['15%, korting]', ['per 100 gram', '3.14'].
    """
    discountShields: [BonusSegmentDiscountShield!]!

    """
    DiscountUnit
    """
    discountUnit: BonusSegmentDiscountUnit

    """
    hqId
    """
    hqId: Int

    """
    Id
    """
    id: String!

    """
    Images
    """
    images: [BonusSegmentImage!]!

    """
    Package type
    """
    packageType: Int

    """
    Price
    """
    price: BonusSegmentPrice

    """
    Product that only is returned when the segment has only one product
    If a segment has more than one product, this field will be null
    Use this field to render a bonusSegment as a product card when there is only has one product
    """
    product: Product

    """
    The total number of different products in this bonus segment.
    """
    productCount: Int

    """
    All the productIds in the segment
    """
    productIds: [Int!]

    """
    products
    """
    products: [Product!]

    """
    Promotion type of segment to infer
    type of promotion. Usually used in
    computation of lanes on bonus. E.g.
    ETOS represents an Etos segment promotion
    """
    promotionType: BonusPromotionType!

    """
    Sales unit size description.
    E.g. "per stuk"
    """
    salesUnitSize: String!

    """
    Smart label to display either:
        - validity period
        - delivery bundle bonus
        - personal bonus
    """
    smartLabel: String

    """
    Spotlight
    """
    spotlight: Boolean!

    """
    storeOnly
    """
    storeOnly: Boolean

    """
    Subtitle of segment
    """
    subtitle: String

    """
    Segment name
    """
    title: String!

    """
    Segment type
    """
    type: BonusSegmentType!

    """
    webPath is a link that can be used to link to the bonus web app
    """
    webPath: String
}

"""
Activation statuses for segment
"""
enum BonusSegmentActivationStatus {
    """
    ACTIVATABLE
    """
    ACTIVATABLE

    """
    ACTIVATED
    """
    ACTIVATED

    """
    ASSIGNED
    """
    ASSIGNED

    """
    NONE
    """
    NONE

    """
    REDEEMABLE
    """
    REDEEMABLE

    """
    REDEEMED
    """
    REDEEMED
}

"""
Bonus Segment availability
"""
type BonusSegmentAvailability {
    """
    Availability description
    """
    description: String

    """
    Availability end date
    """
    endDate: String!

    """
    Availability start date
    """
    startDate: String!
}

"""
BonusSegmentDiscount
"""
type BonusSegmentDiscount {
    """
    Discount description
    """
    description: String

    """
    Extra descriptions to
    compute bonus shield
    """
    extraDescriptions: [String!]!

    """
    Discount theme used to infer
    shield branding color and styling.
    E.g. PREMIUM
    """
    theme: BonusTheme

    """
    Title
    """
    title: String

    """
    Type
    """
    type: Int
}

"""
BonusSegmentDiscountLabel
"""
type BonusSegmentDiscountLabel {
    """
    actualCount
    """
    actualCount: Int

    """
    amount
    """
    amount: Float

    """
    Code
    """
    code: BonusSegmentDiscountLabelCodes!

    """
    count
    """
    count: Int

    """
    DefaultDescription
    """
    defaultDescription: String!

    """
    deliveryType
    """
    deliveryType: String

    """
    freeCount
    """
    freeCount: Int

    """
    percentage
    """
    percentage: Float

    """
    Price
    """
    price: Float

    """
    unit
    """
    unit: String
}

"""
BonusSegmentDiscountLabelCodes
"""
enum BonusSegmentDiscountLabelCodes {
    """
    ACTION
    """
    ACTION

    """
    AIRMILES
    """
    AIRMILES

    """
    AMOUNT
    """
    AMOUNT

    """
    ARTICLE PERCENTAGE
    """
    ARTICLE_PERCENTAGE

    """
    BONUS
    """
    BONUS

    """
    BUNDLE
    """
    BUNDLE

    """
    DELIVERY INCENTIVE
    """
    DELIVERY_INCENTIVE

    """
    FALLBACK
    """
    FALLBACK

    """
    FIXED PRICE
    """
    FIXED_PRICE

    """
    FREE DELIVERY
    """
    FREE_DELIVERY

    """
    FREE DELIVERY AMOUNT
    """
    FREE_DELIVERY_AMOUNT

    """
    N PAID
    """
    N_PAID

    """
    ONE FREE
    """
    ONE_FREE

    """
    ONE HALF PRICE
    """
    ONE_HALF_PRICE

    """
    PERCENTANGE
    """
    PERCENTAGE

    """
    PERCENTAGE PER AMOUNT
    """
    PERCENTAGE_PER_AMOUNT

    """
    ROUTE99
    """
    ROUTE99

    """
    TIERED PERCENT
    """
    TIERED_PERCENT

    """
    TIERED PRICE
    """
    TIERED_PRICE

    """
    UNIT FIXED PRICE
    """
    UNIT_FIXED_PRICE

    """
    VIRTUAL BUNDLE
    """
    VIRTUAL_BUNDLE

    """
    WEIGHT
    """
    WEIGHT

    """
    X FOR Y
    """
    X_FOR_Y

    """
    X PLUS Y FREE
    """
    X_PLUS_Y_FREE

    """
    X WITH REDUCTION
    """
    X_WITH_REDUCTION
}

"""
BonusSegmentDiscountLabel
"""
type BonusSegmentDiscountShield {
    """
    emphasis
    """
    emphasis: BonusSegmentDiscountShieldEmphasis!

    """
    text
    """
    text: [String]!

    """
    theme
    """
    theme: BonusSegmentDiscountShieldTheme
}

"""
BonusSegmentDiscountShieldEmphasis
"""
enum BonusSegmentDiscountShieldEmphasis {
    """
    bottom
    """
    BOTTOM

    """
    default
    """
    DEFAULT

    """
    middle
    """
    MIDDLE

    """
    top
    """
    TOP
}

"""
BonusSegmentDiscountShieldTheme
"""
enum BonusSegmentDiscountShieldTheme {
    """
    Airmiles
    """
    AIRMILES

    """
    Tiered offers
    """
    TIERED_OFFERS
}

"""
BonusSegmentDiscountUnit
"""
type BonusSegmentDiscountUnit {
    """
    count
    """
    count: Float!

    """
    rate
    """
    rate: Float

    """
    totalDiscount
    """
    totalDiscount: Float

    """
    totalPrice
    """
    totalPrice: Float

    """
    Type
    """
    type: String!

    """
    unitsForFree
    """
    unitsForFree: Float
}

"""
BonusSegmentImage
"""
type BonusSegmentImage {
    """
    Height
    """
    height: Int!

    """
    Title
    """
    title: String!

    """
    Url
    """
    url: String!

    """
    Width
    """
    width: Int!
}

"""
BonusSegmentPrice
"""
type BonusSegmentPrice {
    """
    Label
    """
    label: String

    """
    Now
    """
    now: Money

    """
    Was
    """
    was: Money
}

"""
BonusSegmentState contains the states possible for a bonus segment
"""
enum BonusSegmentState {
    """
    ACTIVATABLE
    """
    ACTIVATABLE

    """
    ACTIVATED
    """
    ACTIVATED

    """
    ASSIGNED
    """
    ASSIGNED

    """
    NEGATE_ACTIVATABLE
    """
    NEGATE_ACTIVATABLE

    """
    NEGATE_ACTIVATED
    """
    NEGATE_ACTIVATED

    """
    NEGATE_ASSIGNED
    """
    NEGATE_ASSIGNED

    """
    NEGATE_NONE
    """
    NEGATE_NONE

    """
    NEGATE_REDEEMABLE
    """
    NEGATE_REDEEMABLE

    """
    NEGATE_REDEEMED
    """
    NEGATE_REDEEMED

    """
    NONE
    """
    NONE

    """
    REDEEMABLE
    """
    REDEEMABLE

    """
    REDEEMED
    """
    REDEEMED
}

"""
BonusSegmentType
"""
enum BonusSegmentType {
    """
    AH stores
    """
    AH

    """
    AH online only
    """
    AH_ONLINE_ONLY

    """
    AH online only subtype
    """
    AH_ONLINE_ONLY_SUBTYPE

    """
    AH XL
    """
    AH_XL

    """
    Bonus box
    """
    BONUS_BOX

    """
    BUNDEL
    """
    BUNDEL

    """
    Delivery bundle
    """
    DELIVERY_BUNDLE

    """
    DIGITAL_SCRATCH_CARD
    """
    DIGITAL_SCRATCH_CARD

    """
    Etos
    """
    ETOS

    """
    Free delivery
    """
    FREE_DELIVERY

    """
    Gall customer card and online
    """
    GALL_CUSTOMER_CARD

    """
    Gall online only
    """
    GALL_ONLINE_ONLY

    """
    NEGATE_DIGITAL_SCRATCH_CARD
    """
    NEGATE_DIGITAL_SCRATCH_CARD

    """
    NEGATE_PREMIUM
    """
    NEGATE_PREMIUM

    """
    Personal
    """
    PERSONAL_BONUS

    """
    Premium
    """
    PREMIUM
}

"""
Bonus Themes
"""
enum BonusTheme {
    """
    Regular bonus
    """
    BONUS

    """
    Personal bonus
    """
    BONUS_BOX

    """
    Etos
    """
    ETOS

    """
    Gall'n'Gall
    """
    GALL

    """
    Infinite
    """
    INFINITE

    """
    Premium
    """
    PREMIUM

    """
    Tiered offer
    """
    TIERED_OFFER
}

"""
Get the order budget of the customer
"""
type Budget {
    """
    The actual budget
    """
    budget: Money!

    """
    Customer ID
    """
    customerId: Int!

    """
    The already delivered budget
    """
    delivered: Money!

    """
    Budget ID
    """
    id: Int!

    """
    The period the budget is set for
    """
    period: BudgetPeriod!

    """
    Planned budget
    """
    planned: Money!

    """
    Remaining budget
    """
    remainder: Money
}

enum BudgetPeriod {
    """
    Period of a month
    """
    MONTH

    """
    No period
    """
    NONE

    """
    Period of a year
    """
    YEAR
}

"""
Returned member company business activities
"""
type BusinessActivity {
    """
    Company main area of expertise
    """
    isMainSbi: Boolean!

    """
    See description of Business activities in MemberCompanyRegistration for more details
    """
    sbiCode: String!
}

"""
ButtonType
"""
enum ButtonType {
    LOGIN
    PRIMARY
    SECONDARY
}

"""
cache control
"""
enum CacheControlScope {
    """
    Personal data, based on jwt token and locale (see server.ts)
    """
    PRIVATE

    """
    Public data, non personal
    """
    PUBLIC
}

"""
Calculated Purchase Stamp with the new total Price
"""
type CalculatedPurchaseStamp {
    """
    Quantity of booklets if applied to order
    """
    bookletQuantity: Int!

    """
    Given discount of the purchase stamps
    """
    discount: Money!

    """
    New totalPrice for Order
    """
    totalPrice: Money!
}

"""
Campaign
"""
type Campaign {
    """
    End Date
    """
    endDate: String!

    """
    Campaign ID
    """
    id: String!

    """
    Campaign Name
    """
    name: String!

    """
    Start Date
    """
    startDate: String!
}

"""
To retrieve the captcha configuration
"""
type CaptchaConfiguration {
    """
    if user needs to make a captcha provide a captchaKey
    """
    captchaKey: String

    """
    Check if user needs to make a captcha
    """
    showCaptcha: Boolean!
}

"""
Input parameters usde to verify the query/mutation is not made
by a robot
"""
input CaptchaVerifyInput {
    """
    Amount of seconds passed since the captcha puzzle was shown
    """
    challengeSeconds: Int!

    """
    Code returned by captcha provider
    """
    verificationCode: String!
}

"""
Base Card for Multi Module Cards
"""
interface Card {
    """
    Card Id is the id unique in the system
    """
    cardId: String!
}

"""
Customer care channel availability time range
"""
type ChannelAvailabilityDateTimeRange {
    """
    Channel availability end time
    """
    endDateTime: String!

    """
    Channel availability start time
    """
    startDateTime: String!
}

"""
Customer care channel availability
"""
type ChannelAvailabilityForDay {
    """
    Channel availability end time
    """
    endDateTime: String!

    """
    Next channel availability
    """
    nextOpeningHours: ChannelAvailabilityDateTimeRange!

    """
    Channel availability start time
    """
    startDateTime: String!

    """
    Channel availability status
    """
    status: ChannelAvailabilityStatus!
}

"""
Customer care channel availability status
"""
enum ChannelAvailabilityStatus {
    """
    Channel status available
    """
    AVAILABLE

    """
    Channel status unavailable
    """
    UNAVAILABLE
}

"""
Customer care channels supported platforms
"""
enum ChannelPlatform {
    """
    Platform appie app
    """
    AH_APP

    """
    Platform ah compact
    """
    ESSENTIALS

    """
    Platform Food First Network
    """
    FFN_APP

    """
    Platform web
    """
    WEB
}

"""
Customer care channel type
"""
enum ChannelType {
    """
    Channel chat
    """
    CHAT

    """
    Channel phone
    """
    PHONE
}

"""
Customer care chat channel
"""
type ChatChannel {
    """
    Availablity and next availability
    """
    availability: ChannelAvailabilityForDay!

    """
    Live agent employee availability
    """
    employeeAvailability: ChannelAvailabilityForDay!

    """
    id
    """
    id: String!

    """
    Text to show for customers, openinghours / waiting time
    """
    label: String

    """
    Channel type
    """
    type: ChannelType!

    """
    Is visibible on platform / apps
    """
    visibleOnPlatforms: [ChannelPlatform!]!

    """
    Text to show availability waiting time for a chat employee
    """
    waitTimeText: String

    """
    Queue waiting time in minutes
    """
    waitingTimeMinutes: Int
}

"""
Limits you can hit on the checkout
"""
enum CheckoutATPLimitType {
    """
    Limit on ordering products. for example: Beer and Nutrilon
    """
    ORDER_LIMIT

    """
    Maximum stock available
    """
    STOCK_LIMIT
}

"""
User needs to undertake a challenge to verify the payment
"""
interface CheckoutChallengeAction {
    """
    SDK Information used for the challenge
    """
    sdk: PaymentSDK
}

"""
DCT Payment Options Information
"""
input CheckoutConfirmDctInput {
    """
    The version of the adyen sdk, (Mobile Only)
    """
    adyenThreeDsSdkVersion: String

    """
    CardId Of the DCT Registration
    """
    cardId: String!

    """
    The Origin of the page of the user (Web only)
    This is important as the user challenge callback only works if the origin that is used to create the payment matches the user origin!
    """
    origin: String

    """
    Browser Information (Required when CHANNEL = WEB) Default = "{}"
    """
    payload: String!
}

"""
NPL Giftcard
"""
input CheckoutConfirmGiftCardInfo {
    """
    NPL cardId
    """
    cardId: String!
}

"""
Required body payload for submitting the order unified with WEB, iOS and Android
"""
input CheckoutConfirmOrderPayload {
    """
    Submission channel
    """
    channel: PaymentChannel!

    """
    DCT (Debit Card Tokenization)
    """
    dct: CheckoutConfirmDctInput

    """
    Is packaging enabled
    """
    enablePackaging: Boolean!

    """
    Are purchase stamps enabled
    """
    enablePurchaseStamps: Boolean!

    """
    Is weight enabled
    """
    enableWeight: Boolean!

    """
    NPL GiftCard
    """
    giftCard: CheckoutConfirmGiftCardInfo

    """
    Time order was last modified
    """
    orderLastModified: String!

    """
    Amount of Purchase stamps booklets applied
    """
    purchaseStampsBookletsApplied: Int
}

"""
Checkout Error Data
"""
type CheckoutErrorData {
    """
    CategoryName
    """
    categoryName: String

    """
    type of the error
    """
    errorType: CheckoutErrors

    """
    Minimal amount
    """
    minimalAmount: Money

    """
    Minimum Order Value
    """
    mov: Money

    """
    Orderlines
    """
    orderLines: [CheckoutOrderLine!]

    """
    total Amount
    """
    totalAmount: Money
}

"""
Checkout error Response
"""
type CheckoutErrorResponse {
    """
    Error code
    """
    code: CheckoutErrors!

    """
    Error details
    """
    data: [CheckoutErrorData!]

    """
    Message
    """
    message: String!
}

"""
CheckoutErrors Enum, DCT errors and Possible validation errors combined.
"""
enum CheckoutErrors {
    """
    DCT Card Limit is reached
    """
    CARD_LIMIT_REACHED

    """
    DCT Card is not active
    """
    CARD_NOT_ACTIVE

    """
    Customer not found
    """
    CUSTOMER_NOT_FOUND

    """
    Delivery not found
    """
    DELIVERY_NOT_FOUND

    """
    Illegal order state
    """
    ILLEGAL_ORDER_STATE

    """
    Illegal Order Type
    """
    ILLEGAL_ORDER_TYPE

    """
    DCT Card is on low funds
    """
    LOW_FUNDS

    """
    Member account Blocked
    """
    MEMBER_BLOCKED

    """
    Member Error Type
    """
    MEMBER_ERROR

    """
    Member Not Authenticated
    """
    MEMBER_NOT_AUTHENTICATED

    """
    Member not allowed to read order.
    """
    MEMBER_NOT_AUTHORIZED

    """
    Missing Membership
    """
    MISSING_MEMBERSHIP

    """
    Order ATP Check Failed
    """
    ORDER_ATP_FAILED

    """
    Order externally modified
    """
    ORDER_EXTERNALLY_MODIFIED

    """
    Order Maximum amount type
    """
    ORDER_MAXIMUM_AMOUNT_TYPE

    """
    Order minimum amount value, The order price is below the minimum amount value
    """
    ORDER_MINIMUM_AMOUNT_TYPE

    """
    OrderNotFound
    """
    ORDER_NOT_FOUND

    """
    DCT Card Reservation Adjustment failed
    """
    RESERVATION_ADJUSTMENT_FAILED

    """
    Card is Restricted
    """
    RESTRICTED_CARD

    """
    Restricted item check amount failed
    """
    RESTRICTED_ITEM_CHECK_AMOUNT_FAILED

    """
    Restricted Item Check Failed
    """
    RESTRICTED_ITEM_CHECK_FAILED

    """
    Unknown error
    """
    UNKNOWN
}

"""
Checkout Validation Order Line
"""
type CheckoutOrderLine {
    """
    Maximum available
    """
    available: Int!

    """
    Amount of products on order
    """
    count: Int!

    """
    Fix type for this one
    """
    limitType: CheckoutATPLimitType

    """
    Product
    """
    product: Product!
}

"""
Order Submission Payment Information
"""
type CheckoutOrderSubmissionPayment {
    """
    Action to be taken, if null no action needs to be taken
    """
    action: CheckoutPaymentAction

    """
    External Reference of the payment, For example orderId
    """
    externalReference: String!

    """
    The Mutation that will be executed
    """
    mutation: PaymentMutation!

    """
    Payment Id
    """
    paymentId: String!

    """
    payment status
    """
    paymentStatus: PaymentStatus!

    """
    Id of the proposition that created the payment
    """
    propositionId: String!

    """
    Requested amount for Payment
    """
    requestedAmount: PaymentAmount

    """
    Amount reserved for Payment
    """
    reservedAmount: PaymentAmount

    """
    List of transactions executed with the payment
    """
    transactions: [CheckoutPaymentTransaction!]!
}

"""
Order submission response data
"""
type CheckoutOrderSubmissionResponse {
    """
    The order
    """
    order: Order

    """
    Payments Information
    """
    payments: [CheckoutOrderSubmissionPayment!]!
}

"""
Result type for submitting order
"""
type CheckoutOrderSubmitResult implements MutationResult {
    """
    Order submission response data
    """
    data: CheckoutOrderSubmissionResponse

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Errors during submission (Validation Errors)
    """
    errors: [CheckoutErrorResponse!]

    """
    Mutation Status
    """
    status: MutationResultStatus!
}

"""
Checkout Order Validation Response
"""
type CheckoutOrderValidation {
    """
    Validation errors
    """
    errors: [CheckoutErrorResponse]!

    """
    Order is Valid
    """
    valid: Boolean!
}

"""
Payment Action that needs to be taken.
"""
union CheckoutPaymentAction = CheckoutPollAction | CheckoutRedirectAction | DeviceChallengeAction | UserChallengeAction

"""
An transaction that has ocurred during a payment
"""
type CheckoutPaymentTransaction {
    """
    Amount captured during transaction
    """
    capturedAmount: PaymentAmount

    """
    Id of the Transaction
    """
    id: String!

    """
    PaymentMethod
    """
    paymentMethod: PaymentMethod!

    """
    Amount requested for transaction
    """
    requestedAmount: PaymentAmount

    """
    Reserved amount for the transaction
    """
    reservedAmount: PaymentAmount

    """
    status
    """
    status: PaymentTransactionStatus!
}

"""
User needs to poll for the authorization status
"""
type CheckoutPollAction {
    """
    mutationId to poll on
    """
    mutationId: String!

    """
    Interval to poll
    """
    pollIntervalInMs: Int!
}

"""
User is redirected to external location
"""
type CheckoutRedirectAction {
    """
    Transaction Id
    """
    transactionId: String!

    """
    URI
    """
    uri: String!
}

"""
Calculated Wallet Options
"""
type CheckoutWalletOptions {
    """
    Purchase stamp options (max booklets, and the new total when applied)
    """
    purchaseStamps: [CalculatedPurchaseStamp!]!
}

"""
The code and description for available MFA Settings
"""
type CiamAvailableMfaSetting {
    """
    The code (corresponds to Member.mfaSetting)
    """
    code: String!

    """
    Description for this MFA setting
    """
    description: String!
}

"""
Result of performing mutation
"""
type CiamDeleteAccountMutationResult implements MutationResult {
    """
    Error code if mutation failed
    """
    errorCode: CiamDeleteAccountMutationResultErrorCode

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Error codes for mutation.ciamDeleteAccount
"""
enum CiamDeleteAccountMutationResultErrorCode {
    """
    The provided current password is incorrect.
    """
    OLD_PASSWORD_INCORRECT
}

"""
Passkey details.
A passkey can be used by a member to log in.

@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API
"""
type CiamPasskey {
    """
    When this passkey was created
    """
    createdAt: DateTime!

    """
    Passkey ID
    """
    id: String!

    """
    When this passkey was last used to log in.
    """
    lastUsedAt: DateTime

    """
    Passkey name
    """
    name: String!
}

"""
Get a registration ID and `publicKeyCredentialCreationOptions`,
which are needed to create a new passkey client-side.
"""
type CiamPasskeyRegisterStartMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Creation options needed for creating a new passkey through the WebAuthn browser API.
    Is a stringified JSON structure.
    @link https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create#publickey_object_structure
    """
    publicKeyCredentialCreationOptions: String!

    """
    Registration ID. Needed when finishing key registration
    """
    registrationId: String!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Passkey settings
"""
type CiamPasskeySettings {
    """
    Currently registered passkeys.
    """
    passKeys: [CiamPasskey!]!

    """
    If true, member is opted-in for passkey feature and is allowed to create new passkeys.
    """
    passkeyAllowed: Boolean!
}

"""
Result type for mutations that modify passkey settings (register, update, delete).
"""
type CiamPasskeyUpdateMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Updated passkey settings.
    """
    passkeySettings: CiamPasskeySettings!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result of performing mutation
"""
type CiamPasswordChangeMutationResult implements MutationResult {
    """
    Error code if mutation failed
    """
    errorCode: CiamPasswordChangeMutationResultErrorCode

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Error codes for mutation.ciamPasswordChange
"""
enum CiamPasswordChangeMutationResultErrorCode {
    """
    Password not allowed (too short, leaked, etc.).
    """
    NEW_PASSWORD_NOT_ALLOWED

    """
    The provided current password is incorrect.
    """
    OLD_PASSWORD_INCORRECT
}

"""
Returned result after ciam-phone-number-send-code mutation
"""
type CiamPhoneNumberSendCodeMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Session id data
    """
    sessionId: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Possible error codes for `Mutation.ciamPhoneNumberVerifyCode`
"""
enum CiamPhoneNumberVerifyCodeErrorCode {
    """
    Member ID does not exist
    """
    MEMBER_NOT_FOUND

    """
    Session ID not found
    """
    VERIFICATION_NOT_FOUND

    """
    Wrong code was used
    """
    WRONG_CODE

    """
    Wrong code, session deleted, need to start over
    """
    WRONG_CODE_LAST_ATTEMPT

    """
    Not your own data
    """
    WRONG_MEMBER
}

"""
Returned result after ciam-phone-number-verify-code mutation
"""
type CiamPhoneNumberVerifyCodeMutationResult implements MutationResult {
    """
    Error code if request failed from a known condition
    """
    errorCode: CiamPhoneNumberVerifyCodeErrorCode

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Updated phone-number
    """
    phoneNumber: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
The mutation result from updating the MFA setting for the current member
"""
type CiamUpdateMfaSettingMutationResult implements MutationResult {
    """
    Possible error message if status Failed
    """
    errorMessage: String

    """
    The (updated) member
    """
    member: Member!

    """
    Result status
    """
    status: MutationResultStatus!
}

"""
Result of performing mutation
"""
type CiamUserNameChangeMutationResult implements MutationResult {
    """
    Error code if mutation failed
    """
    errorCode: CiamUserNameChangeMutationResultErrorCode

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Error codes for mutation.ciamUsernameChange
"""
enum CiamUserNameChangeMutationResultErrorCode {
    """
    Username not allowed (not an email address, already in use?).
    """
    NEW_USERNAME_NOT_ALLOWED

    """
    The provided current password is incorrect.
    """
    OLD_PASSWORD_INCORRECT
}

"""
CMS mode enum
"""
enum CmsMode {
    """
    the cms content for our customers on ah.*
    """
    DEFAULT

    """
    the cms content for external preview e.g. preview.ah.*
    """
    EXTERNAL_PREVIEW

    """
    the cms content for preview in CMS Experience Manager
    """
    PREVIEW
}

enum CodeStatus {
    """
    Password reset code is invalid
    """
    INVALID

    """
    Password reset code is valid
    """
    VALID
}

"""
Types of recipes that can be saved in categories
"""
enum CollectionCategoryRecipeType {
    """
    Allerhande
    """
    A

    """
    Others
    """
    O
}

"""
Company account
"""
type CompanyAccount {
    """
    Address
    """
    address: CompanyAccountAddress

    """
    Company name
    """
    companyName: String

    """
    Member id
    """
    memberId: Int
}

"""
Address
"""
type CompanyAccountAddress {
    """
    City
    """
    city: String

    """
    House number
    """
    houseNumber: String

    """
    Street
    """
    street: String
}

"""
Default information needed to add a consent
"""
input ConsentInput {
    """
    Code of a consent e.g. ANALYSE, LMN or GEBDATUM
    """
    code: String!

    """
    When true consent is accepted when false consent is rejected
    """
    granted: Boolean!

    """
    Version which was accepted or declined
    """
    version: Int!
}

"""
Details of a consent provided in the MemberConsents
"""
type Consents {
    """
    Code of a consent e.g. ANALYSE, LMN or GEBDATUM
    """
    code: String!

    """
    When true consent is accepted when false consent is rejected
    """
    granted: Boolean!

    """
    Timestamp of when the user accepted or rejected consent
    """
    timestamp: String!

    """
    Version which was accepted or declined
    """
    version: Int!
}

"""
Accordion component
"""
type ContentAccordion implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Accordion data including items and hasMoreItems for accordion search type
    """
    data: ContentAccordionData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Accordion block types
"""
interface ContentAccordionBlockBase {
    """
    Accordion block types
    """
    type: ContentAccordionBlockType!
}

"""
Accordion block types
"""
enum ContentAccordionBlockType {
    BUTTONS
    MEDIA
    PARAGRAPH
    QUOTE
    TABLE
}

"""
Content Link
"""
type ContentAccordionButton {
    """
    Content link color
    """
    color: String!

    """
    Content link url
    """
    href: String

    """
    Content link isExternalLink
    """
    isExternalLink: Boolean!

    """
    Content link isExternalMobileLink
    """
    isExternalMobileLink: Boolean!

    """
    Content link url used in mobile
    """
    mobileLink: String

    """
    Content link target _blank or _self
    """
    target: String!

    """
    Content link theme
    """
    theme: String!

    """
    Content link title
    """
    title: String!
}

"""
Article component buttons
"""
type ContentAccordionButtons implements ContentAccordionBlockBase {
    """
    The primary button
    """
    primaryButton: ContentAccordionButton

    """
    The secondary button
    """
    secondaryButton: ContentAccordionButton

    """
    Type of the content block
    """
    type: ContentAccordionBlockType!
}

"""
Accordion can be two types (Manual and Search)
"""
union ContentAccordionData = ContentManualAccordion | ContentSearchAccordion

"""
Accordion item
"""
type ContentAccordionItem {
    """
    Accordion item anchor
    """
    anchor: String

    """
    Accordion content blocks (An array of different content block e.g. paragraph, image, video, etc)
    """
    blocks: [ContentAccordionBlockBase!]!

    """
    Accordion item body
    """
    body: String

    """
    Accordion item title
    """
    title: String
}

"""
Accordion component media
Contains images or videos (Youtube or BlueBillyWig)
"""
type ContentAccordionMedia implements ContentAccordionBlockBase {
    """
    List of media blocks
    """
    media: [ContentMediaBlockBase!]!

    """
    Type of the content block
    """
    type: ContentAccordionBlockType!
}

"""
Accordion component paragraph
"""
type ContentAccordionParagraph implements ContentAccordionBlockBase {
    """
    Content theme
    """
    contentTheme: String

    """
    This field is used by mobile which filters links in the html text
    """
    mobileText: String

    """
    Subtitle of the paragraph
    """
    subtitle: String

    """
    Text of the paragraph
    """
    text: String

    """
    Title of the paragraph
    """
    title: String

    """
    Type of the content block
    """
    type: ContentAccordionBlockType!
}

"""
Accordion component quote
"""
type ContentAccordionQuote implements ContentAccordionBlockBase {
    """
    The author
    """
    author: String

    """
    The image alignment
    """
    imageAlignment: QuoteImageAlignmentType!

    """
    List of image variants and description
    """
    imageSet: ContentImage

    """
    The quote
    """
    quote: String!

    """
    Type of the content block
    """
    type: ContentAccordionBlockType!
}

"""
Accordion component table
"""
type ContentAccordionTable implements ContentAccordionBlockBase {
    """
    Is a numbered list
    """
    isNumbered: Boolean!

    """
    The web items
    """
    items: [String!]!

    """
    The mobile items
    """
    mobileItems: [String!]!

    """
    Type of the content block
    """
    type: ContentAccordionBlockType!
}

"""
Type of Accordion (Manual/Search)
"""
enum ContentAccordionType {
    MANUAL
    SEARCH
}

"""
Advertorial component
"""
type ContentAdvertorial implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Advertorial Component Data
    """
    data: ContentAdvertorialData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Advertorial Component Data
"""
type ContentAdvertorialData {
    """
    Advertorial items
    """
    advertorials: [ContentAdvertorialItem!]!
}

"""
Advertorial Component item
"""
type ContentAdvertorialItem {
    """
    Advertorial item background color
    """
    backgroundColor: String

    """
    Advertorial item background images
    """
    images: [ContentImageSet!]!

    """
    Advertorial item link
    """
    link: ContentLink

    """
    Advertorial item text color
    """
    textColor: String

    """
    Advertorial item title
    """
    title: String
}

"""
Content FAQ Lane
"""
type ContentAllerhandeContentListLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeContentListLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Content List Lane Data
"""
type ContentAllerhandeContentListLaneData {
    """
    Anchor Label
    """
    anchorLabel: String

    """
    Groups Array
    """
    groups: [ContentAllerhandeContentListLaneLinkGroup!]!

    """
    Image
    """
    image: ContentImage

    """
    Image Position
    """
    imagePosition: String

    """
    Position
    """
    position: String!

    """
    Title
    """
    title: String
}

"""
Content Content List Lane Link Group
"""
type ContentAllerhandeContentListLaneLinkGroup {
    """
    Links
    """
    links: [ContentAllerhandeLink!]!

    """
    Title
    """
    title: String
}

"""
Content FAQ Lane
"""
type ContentAllerhandeFAQLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeFAQLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content FAQ Lane Data
"""
type ContentAllerhandeFAQLaneData {
    """
    Anchor Label
    """
    anchorLabel: String

    """
    Questions Array
    """
    questions: [ContentAllerhandeFAQLaneQuestion!]!

    """
    Title
    """
    title: String!
}

"""
Content FAQ Lane Question
"""
type ContentAllerhandeFAQLaneQuestion {
    """
    Answer in HTML
    """
    answer: String!

    """
    Question
    """
    question: String!
}

"""
Content Highlighted Themes Lane
"""
type ContentAllerhandeHighlightedThemesLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeHighlightedThemesLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Highlighted Themes Lane Data
"""
type ContentAllerhandeHighlightedThemesLaneData {
    """
    Click To Action
    """
    cta: ContentAllerhandeLink

    """
    Links
    """
    links: [ContentAllerhandeHighlightedThemesLaneLinks!]!

    """
    Subtitle
    """
    subtitle: String

    """
    Title
    """
    title: String
}

"""
Content Highlighted Themes Lane Links Data
"""
type ContentAllerhandeHighlightedThemesLaneLinks {
    """
    Query for internal usage
    """
    count: Int

    """
    Link
    """
    link: ContentAllerhandeLink

    """
    Query for internal usage
    """
    query: RecipeThemeSearchParams

    """
    Query for internal usage
    """
    recipes: [ContentAllerhandeHighlightedThemesLaneLinksRecipe!]

    """
    Title
    """
    title: String
}

"""
Content Highlighted Themes Lane Links Recipe Data
"""
type ContentAllerhandeHighlightedThemesLaneLinksRecipe {
    """
    Recipe ID
    """
    id: Int!

    """
    Recipe images by rendition name
    """
    images: [RecipeImage!]!

    """
    Recipe title
    """
    title: String!
}

"""
Content Image Collection Lane
"""
type ContentAllerhandeImageCollectionLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeImageCollectionLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Image Collection Lane Data
"""
type ContentAllerhandeImageCollectionLaneData {
    """
    Banner Image
    """
    bannerImage: ContentAllerhandeImageCollectionLaneItem

    """
    Images
    """
    images: [ContentAllerhandeImageCollectionLaneItem!]!
}

"""
Content Image Collection Lane Image
"""
type ContentAllerhandeImageCollectionLaneImage {
    """
    Caption
    """
    caption: ContentAllerhandeImageCollectionLaneImageCaption

    """
    Image
    """
    image: ContentImage!
}

"""
Content Image Collection Lane Image Caption
"""
type ContentAllerhandeImageCollectionLaneImageCaption {
    """
    Label
    """
    label: String!

    """
    Link
    """
    link: ContentAllerhandeImageCollectionLaneImageCaptionLink
}

"""
Content Image Collection Lane Image Caption Link
"""
type ContentAllerhandeImageCollectionLaneImageCaptionLink {
    """
    Label
    """
    label: String

    """
    Target
    """
    target: String!

    """
    URL
    """
    url: String!
}

"""
Content Image Collection Lane Item
"""
union ContentAllerhandeImageCollectionLaneItem =
    | ContentAllerhandeImageCollectionLaneImage
    | ContentAllerhandeImageCollectionLaneRecipeImage

"""
Content Image Collection Lane Recipe Image
"""
type ContentAllerhandeImageCollectionLaneRecipeImage {
    """
    Recipe Data
    """
    recipe: Recipe

    """
    Recipe ID for internal usage
    """
    recipeId: Int
}

"""
Content Link
"""
type ContentAllerhandeLink {
    """
    Label
    """
    label: String!

    """
    Target
    """
    target: String!

    """
    URL
    """
    url: String!
}

"""
Content Recipe Detail Lane
"""
type ContentAllerhandeRecipeDetailLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeRecipeDetailLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Recipe Detail Lane Data
"""
type ContentAllerhandeRecipeDetailLaneData {
    """
    Recipe Data
    """
    recipe: Recipe

    """
    Recipe ID for internal usage
    """
    recipeId: Int

    """
    Title
    """
    title: String
}

"""
Content Recipe Grid Lane
"""
type ContentAllerhandeRecipeGridLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeRecipeGridLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Recipe Grid Lane Data
"""
type ContentAllerhandeRecipeGridLaneData {
    """
    Anchor Label
    """
    anchorLabel: String

    """
    Recipe lane query (This field is used to send a request to recipe search service)
    """
    recipeQuery: RecipeThemeSearchParams

    """
    Subtitle
    """
    subtitle: String

    """
    Title
    """
    title: String
}

"""
Content Recipe Group Header Lane
"""
type ContentAllerhandeRecipeGroupHeaderLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeRecipeGroupHeaderLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Recipe Group Header Lane Anchor
"""
type ContentAllerhandeRecipeGroupHeaderLaneAnchor {
    """
    ID
    """
    id: String

    """
    Label
    """
    label: String
}

"""
Content Recipe Group Header Lane Data
"""
type ContentAllerhandeRecipeGroupHeaderLaneData {
    """
    Anchors
    """
    anchors: [ContentAllerhandeRecipeGroupHeaderLaneAnchor!]!

    """
    Description (HTML)
    """
    description: String

    """
    Image
    """
    image: ContentImage

    """
    Recipe Data
    """
    recipe: Recipe

    """
    Recipe ID for internal usage
    """
    recipeId: Int

    """
    Title
    """
    title: String
}

"""
Content Recipe Search Banner
"""
type ContentAllerhandeRecipeSearchBanner implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeRecipeSearchBannerData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Recipe Search Banner Data
"""
type ContentAllerhandeRecipeSearchBannerData {
    """
    Quick Search Entries
    """
    quickSearchEntries: [ContentAllerhandeLink!]!

    """
    Recipe Data
    """
    recipe: Recipe

    """
    Recipe ID for internal usage
    """
    recipeId: Int

    """
    Search Hint
    """
    searchHint: String!

    """
    Search Hint (Short)
    """
    searchHintShort: String!
}

"""
Content Spotlight
"""
type ContentAllerhandeSpotlight implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeSpotlightData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Spotlight Data
"""
type ContentAllerhandeSpotlightData {
    """
    Anchor Label
    """
    anchorLabel: String

    """
    Click To Action
    """
    cta: ContentAllerhandeLink

    """
    Lane Items
    """
    spotlightItems: [ContentAllerhandeSpotlightItem!]!

    """
    Subtitle
    """
    subtitle: String

    """
    Title
    """
    title: String
}

"""
Content Spotlight Item
"""
union ContentAllerhandeSpotlightItem =
    | ContentAllerhandeSpotlightItemRecipe
    | ContentAllerhandeSpotlightItemVideoBlueBillywig

"""
Content Spotlight Data Item Base
"""
interface ContentAllerhandeSpotlightItemBase {
    """
    Item Type
    """
    type: ContentAllerhandeSpotlightType!
}

"""
Content Spotlight Item Recipe
"""
type ContentAllerhandeSpotlightItemRecipe implements ContentAllerhandeSpotlightItemBase {
    """
    Recipe Data
    """
    item: Recipe

    """
    Recipe ID for internal usage
    """
    recipeId: Int

    """
    Item Type
    """
    type: ContentAllerhandeSpotlightType!
}

"""
Content Spotlight Item Video Blue Billywig
"""
type ContentAllerhandeSpotlightItemVideoBlueBillywig implements ContentAllerhandeSpotlightItemBase {
    """
    Blue Billywig ID for internal use
    """
    blueBillywigId: Int

    """
    Video Data
    """
    item: RecipeVideo

    """
    Item Type
    """
    type: ContentAllerhandeSpotlightType!
}

"""
Content Spotlight Item Type
"""
enum ContentAllerhandeSpotlightType {
    RECIPE
    VIDEO_BLUE_BILLYWIG
}

"""
Content Text Image Items Content Lane
"""
type ContentAllerhandeTextImageItemsContentLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeTextImageItemsContentLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Text Image Items Content Lane Data
"""
type ContentAllerhandeTextImageItemsContentLaneData {
    """
    Anchor Label
    """
    anchorLabel: String

    """
    Search Hint
    """
    contentLaneItems: [ContentAllerhandeTextImageItemsContentLaneItem!]!
}

"""
Content Text Image Items Content Lane Item Data
"""
type ContentAllerhandeTextImageItemsContentLaneItem {
    """
    Description
    """
    description: String!

    """
    Image
    """
    image: ContentImage

    """
    Recipe Data
    """
    recipe: Recipe

    """
    Recipe ID for internal usage
    """
    recipeId: Int

    """
    Title
    """
    title: String!
}

"""
Content Theme List Card Collection
"""
type ContentAllerhandeThemeListCardCollectionLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeThemeListCardCollectionLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Theme List Card Collection Card
"""
type ContentAllerhandeThemeListCardCollectionLaneCard {
    """
    Anchor
    """
    anchor: ContentAllerhandeLink!

    """
    Image
    """
    image: ContentImage!

    """
    Links
    """
    links: [ContentAllerhandeLink!]!

    """
    Title
    """
    title: String!
}

"""
Content Theme List Card Collection Data
"""
type ContentAllerhandeThemeListCardCollectionLaneData {
    """
    Cards
    """
    cards: [ContentAllerhandeThemeListCardCollectionLaneCard!]!
}

"""
Content Video Lane
"""
type ContentAllerhandeVideoLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentAllerhandeVideoLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Video Lane Data
"""
type ContentAllerhandeVideoLaneData {
    """
    Videos Array
    """
    videos: [ContentAllerhandeVideoLaneVideo!]!
}

"""
Content Video Lane Video
"""
type ContentAllerhandeVideoLaneVideo {
    """
    Anchor Label
    """
    anchorLabel: String

    """
    Blue Billywig ID for internal use
    """
    blueBillywigId: Int

    """
    Recipe Video
    """
    video: RecipeVideo
}

"""
Article component
"""
type ContentArticle implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Article Component Data
    """
    data: ContentArticleData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Article content blocks schemas
"""
interface ContentArticleBlockBase {
    """
    Type of the article block
    """
    type: ContentArticleBlockType!
}

"""
Article content blocks types
"""
enum ContentArticleBlockType {
    BUTTONS
    MEDIA
    PARAGRAPH
    QUOTE
    TABLE
}

"""
Content Link
"""
type ContentArticleButton {
    """
    Content link color
    """
    color: String!

    """
    Content link url
    """
    href: String

    """
    Content link isExternalLink
    """
    isExternalLink: Boolean!

    """
    Content link isExternalMobileLink
    """
    isExternalMobileLink: Boolean!

    """
    Content link url used in mobile
    """
    mobileLink: String

    """
    Content link target _blank or _self
    """
    target: String!

    """
    Content link theme
    """
    theme: String!

    """
    Content link title
    """
    title: String!
}

"""
Article component buttons
"""
type ContentArticleButtons implements ContentArticleBlockBase {
    """
    The primary button
    """
    primaryButton: ContentArticleButton

    """
    The secondary button
    """
    secondaryButton: ContentArticleButton

    """
    Type of the content block
    """
    type: ContentArticleBlockType!
}

"""
Article Component Data
"""
type ContentArticleData {
    """
    Article content blocks (An array of different content block e.g. paragraph, image, video, etc)
    """
    blocks: [ContentArticleBlockBase!]!

    """
    Article content document uuid
    """
    documentUUID: String!
}

"""
Article component media
Contains images or videos (Youtube or BlueBillyWig)
"""
type ContentArticleMedia implements ContentArticleBlockBase {
    """
    List of media blocks
    """
    media: [ContentMediaBlockBase!]!

    """
    Type of the content block
    """
    type: ContentArticleBlockType!
}

"""
Article component paragraph
"""
type ContentArticleParagraph implements ContentArticleBlockBase {
    """
    Content theme
    """
    contentTheme: String

    """
    This field is used by mobile which filters links in the html text
    """
    mobileText: String

    """
    Subtitle of the paragraph
    """
    subtitle: String

    """
    Text of the paragraph
    """
    text: String

    """
    Title of the paragraph
    """
    title: String

    """
    Type of the content block
    """
    type: ContentArticleBlockType!
}

"""
Article component quote
"""
type ContentArticleQuote implements ContentArticleBlockBase {
    """
    The author
    """
    author: String

    """
    The image alignment
    """
    imageAlignment: QuoteImageAlignmentType!

    """
    List of image variants and description
    """
    imageSet: ContentImage

    """
    The quote
    """
    quote: String!

    """
    Type of the content block
    """
    type: ContentArticleBlockType!
}

"""
Article component table
"""
type ContentArticleTable implements ContentArticleBlockBase {
    """
    Is a numbered list
    """
    isNumbered: Boolean!

    """
    The web items
    """
    items: [String!]!

    """
    The mobile items
    """
    mobileItems: [String!]!

    """
    Type of the content block
    """
    type: ContentArticleBlockType!
}

"""
Common CMS component properties
"""
interface ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Common CMS mobile component properties
"""
interface ContentBaseMobileCMSComponent {
    """
    ID
    """
    id: String!

    """
    Meta object for the component
    """
    meta: ContentMobileComponentMetaObject

    """
    Component Type
    """
    type: ContentBaseMobileCMSComponentType!
}

"""
CMS mobile types
"""
enum ContentBaseMobileCMSComponentType {
    PAGEENTRIES @deprecated(reason: "Enum value doesn't follow codestyle, use PAGE_ENTRIES instead")
    PAGE_ENTRIES
    PROPOSITIONHEADER @deprecated(reason: "Enum value doesn't follow codestyle, use PROPOSITION_HEADER instead")
    PROPOSITION_HEADER
}

"""
Segment
"""
type ContentBonusSegment {
    """
    Segment control
    """
    control: ContentSmartPromotionSegmentControl

    """
    Segment extraDescriptions
    """
    extraDescriptions: [String]

    """
    Segment ID
    """
    id: String

    """
    Segment images
    """
    images: [BonusSegmentImage!]

    """
    Segment link
    """
    link: String

    """
    Segment shield
    """
    shield: ContentSmartPromotionSegmentShield

    """
    Segment subtitle
    """
    subtitle: String

    """
    Segment text
    """
    text: ContentSmartPromotionSegmentText

    """
    Segment title
    """
    title: String

    """
    Segment validityPeriod
    """
    validityPeriod: ContentSmartPromotionSegmentValidity
}

"""
BrandHeader component
"""
type ContentBrandHeader implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    ButtonLane component data
    """
    data: ContentBrandHeaderData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
BrandHeader component data
"""
type ContentBrandHeaderData {
    """
    Containing brand header image description and variants
    """
    imageSet: ContentImage!
}

"""
Button component
"""
type ContentButton {
    """
    Button icon (e.g. icon-mijnbestellingen)
    """
    icon: String

    """
    Button link
    """
    link: ContentButtonLink

    """
    Button subtitle
    """
    subtitle: String

    """
    Button title
    """
    title: String!
}

"""
Button component link
"""
type ContentButtonLink {
    """
    Link href
    """
    href: String!

    """
    Link target
    """
    target: String
}

"""
ButtonLane component
"""
type ContentButtonlane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    ButtonLane component data
    """
    data: ContentButtonlaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
ButtonLane component data
"""
type ContentButtonlaneData {
    """
    List of buttons
    """
    buttons: [ContentButton!]!

    """
    Buttonlane document UUID
    """
    documentUUID: String!

    """
    Buttonlane theme (e.g. color-ah)
    """
    theme: String
}

"""
CMS Component Render Status
"""
enum ContentCMSComponentStatus {
    COMPLETE
    INCOMPLETE
}

"""
CMS Component Types
"""
enum ContentCMSComponentType {
    ACCORDION
    ADVERTORIAL
    ALLERHANDE_CONTENT_LIST_LANE
    ALLERHANDE_FAQ_LANE
    ALLERHANDE_HIGHLIGHTED_THEMES_LANE
    ALLERHANDE_IMAGE_COLLECTION_LANE
    ALLERHANDE_RECIPE_DETAIL_LANE
    ALLERHANDE_RECIPE_GRID_LANE
    ALLERHANDE_RECIPE_GROUP_HEADER_LANE
    ALLERHANDE_RECIPE_SEARCH_BANNER
    ALLERHANDE_SPOTLIGHT
    ALLERHANDE_TEXT_IMAGE_ITEMS_CONTENT_LANE
    ALLERHANDE_THEME_LIST_CARD_COLLECTION_LANE
    ALLERHANDE_VIDEO_LANE
    ALLERHANDE_WEEKMENU
    ARTICLE
    BRANDHEADER
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use BRAND_HEADER instead")
    BRAND_HEADER
    BUTTONLANE
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use BUTTON_LANE instead")
    BUTTON_LANE
    CUSTOMER_CARE_ARTICLE
    CUSTOMER_CARE_ARTICLE_GRID
    CUSTOMER_CARE_BREADCRUMBS
    CUSTOMER_CARE_HEADER
    CUSTOMER_CARE_LINK_BOX_LANE
    FORM
    GRID_LANE
    HALFWIDTHMEDIAMONETIZATIONLANE
        @deprecated(
            reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use HALF_WIDTH_MEDIA_MONETIZATION_LANE instead"
        )
    HALF_WIDTH_MEDIA_MONETIZATION_LANE
    HEROBANNER
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use HERO_BANNER instead")
    HERO_BANNER
    LINKGROUP
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use LINK_GROUP instead")
    LINK_GROUP
    MARKETINGCAROUSEL
        @deprecated(
            reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use MARKETING_CAROUSEL instead"
        )
    MARKETINGHEADER
        @deprecated(
            reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use MARKETING_HEADER instead"
        )
    MARKETING_CAROUSEL
    MARKETING_HEADER
    PRODUCTLANE
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use PRODUCT_LANE instead")
    PRODUCT_LANE
    PROPOSITION_HEADER
    QUERYABLERECIPELANE
        @deprecated(
            reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use QUERYABLE_RECIPE_LANE instead"
        )
    QUERYABLE_RECIPE_LANE
    RICHCONTENT
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use RICH_CONTENT instead")
    RICH_CONTENT
    SHOPHEADER
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use SHOP_HEADER instead")
    SHOPINSHOP
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use SHOP_IN_SHOP instead")
    SHOP_HEADER
    SHOP_IN_SHOP
    SMART_PROMOTIONS
    SUPERSHOPS
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use SUPER_SHOPS instead")
    SUPER_SHOPS
    TITLE
}

"""
Root Component Types
"""
enum ContentComponentType {
    COMPONENT
    SUBMENU
}

"""
Half with media monetization lane component data
"""
type ContentContentHalfWidthMediaMonetizationLaneData {
    """
    Media monetization promotions
    """
    promotions: [ContentPromotion]!
}

"""
Customer attributes will be used to target customers
based on certain tags
"""
type ContentCustomerAttributes {
    """
    List of all customer attribute tags
    """
    tags: [ContentCustomerTag!]
}

"""
Customer Care Link Box
"""
type ContentCustomerCareLinkBox {
    """
    Link Box Links
    """
    links: [ContentLink]

    """
    Link Box See More Link
    """
    seeMoreLink: ContentLink

    """
    Link Box Title
    """
    title: String
}

"""
Customer Care ListItem Component
"""
type ContentCustomerCareLinkBoxLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Customer Care Link Box Lane Data
    """
    data: ContentCustomerCareLinkBoxLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Customer Care Link Box Lane Data
"""
type ContentCustomerCareLinkBoxLaneData {
    """
    Array of Customer Care Link Boxes
    """
    linkBoxes: [ContentCustomerCareLinkBox]!
}

"""
Customer tag
"""
type ContentCustomerTag {
    """
    Customer tag attribute (e.g. Abonnementen)
    """
    attribute: String!

    """
    Customer tag attributeValue (e.g. Premium + Onefit)
    """
    attributeValue: String!

    """
    Customer tag description (e.g. Klant heeft met premium abonnement een Onefit abonnement afgesloten)
    """
    description: String!

    """
    Customer tag domain (e.g. All | NL | BE)
    """
    domain: String!

    """
    Customer tag key (e.g. profileProperties.ah_memberships_trait.ONEFIT)
    """
    key: String!

    """
    Customer tag type (e.g. Loyalty)
    """
    type: String!
}

"""
Delivery Address (Default is member's address)
"""
type ContentDeliveryAddress {
    """
    Delivery Address Text (e.g. Enter the address where you want to have it delivered)
    """
    text: String

    """
    Delivery Address Title (e.g. I want this order delivered to a different address)
    """
    title: String
}

"""
CMS Delivery Grid: User can select a delivery slot or pickup slot
It's used in ah.nl/kies-een-moment page.
"""
type ContentDeliveryGrid {
    """
    Communications
    """
    communications: ContentDeliveryGridCommunications!

    """
    Configuration
    """
    configuration: ContentDeliveryGridConfiguration!

    """
    Daily Offers
    """
    dailyOffers: [ContentDeliveryGridDailyOffer!]!

    """
    Type
    """
    type: String!

    """
    Weekly Offers
    """
    weeklyOffers: [ContentDeliveryGridWeeklyOffer!]!
}

"""
Delivery Grid Communications
"""
type ContentDeliveryGridCommunications {
    """
    Communications Delivery
    """
    delivery: String

    """
    Communications Delivery Address
    """
    deliveryAddress: ContentDeliveryAddress

    """
    Communications Delivery
    """
    deliveryPickup: String

    """
    Communications Urgent
    """
    isUrgent: Boolean

    """
    Communications Pickup
    """
    pickup: String

    """
    Communications Pickup corparate
    """
    pickupCorporate: String

    """
    Communications Pickup Store
    """
    pickupStore: String

    """
    Communications Show Pointer
    """
    showPointer: Boolean
}

"""
Delivery Grid Configuration
"""
type ContentDeliveryGridConfiguration {
    """
    Delivery Grid Obtainment Methods
    """
    obtainmentMethods: [ContentDeliveryGridObtainmentMethods!]!
}

"""
Delivery Grid Daily Offer
"""
type ContentDeliveryGridDailyOffer {
    """
    Date (e.g. 2020-01-09)
    """
    day: String!

    """
    Offer Title
    """
    offer: String!
}

"""
Delivery Grid Obtainment Obtainment Methods.
These methods are selectable by a user (if more than one are enabled for the user)
"""
type ContentDeliveryGridObtainmentMethods {
    """
    Obtainment Method Icon
    """
    icon: String!

    """
    Obtainment Method Visibility
    """
    isVisible: Boolean!

    """
    Sustainable Slots Description
    """
    sustainableSlotsDescription: String

    """
    Sustainable Slots Title
    """
    sustainableSlotsTitle: String

    """
    Obtainment Method Text
    (e.g. Take your groceries along the way)
    """
    text: String!

    """
    Obtainment Method Title
    (e.g. Deliver to your work)
    """
    title: String!

    """
    Obtainment Method Type
    """
    type: String!
}

"""
CMS Delivery Grid Arguments
"""
input ContentDeliveryGridOptions {
    """
    Channel
    """
    channel: String

    """
    Targeting
    """
    targeting: String
}

"""
Delivery Grid Weekly Offer
"""
type ContentDeliveryGridWeeklyOffer {
    """
    Offer End Date (e.g. 2022-12-04)
    """
    endDate: String!

    """
    Offer Title
    """
    offer: String!

    """
    Offer Start Date (e.g. 2022-11-28)
    """
    startDate: String!
}

"""
Article component for flex page
"""
type ContentFPArticle implements ContentFlexPageComponentBase {
    """
    Article data
    """
    data: ContentArticleData

    """
    Flex page component type (e.g. QUERYABLERECIPELANE)
    """
    type: ContentFlexPageComponentType!
}

"""
Brand header document for flex page
"""
type ContentFPBrandHeader implements ContentFlexPageHeaderBase {
    """
    Header data
    """
    data: ContentBrandHeaderData

    """
    Type (e.g. brandHeader)
    """
    type: ContentFlexPageHeaderType!
}

"""
Form component for flex page
"""
type ContentFPForm implements ContentFlexPageComponentBase {
    """
    Form data
    """
    data: ContentFormData

    """
    Form id
    """
    id: String

    """
    Flex page component type (e.g. QUERYABLERECIPELANE)
    """
    type: ContentFlexPageComponentType!
}

"""
Hardcoded component
"""
type ContentFPHardcodedComponent implements ContentFlexPageComponentBase {
    """
    Hardcoded component id
    """
    hardcodedComponentId: String!

    """
    Hardcoded component type
    """
    hardcodedComponentType: String!

    """
    Flex page component type (e.g. QUERYABLERECIPELANE)
    """
    type: ContentFlexPageComponentType!
}

"""
Marketing header document for flex page
"""
type ContentFPMarketingHeader implements ContentFlexPageHeaderBase {
    """
    Header data
    """
    data: ContentMarketingHeaderData

    """
    Type (e.g. marketingHeader)
    """
    type: ContentFlexPageHeaderType!
}

"""
Product lane for flex page
"""
type ContentFPProductLane implements ContentFlexPageComponentBase {
    """
    Queryable recipe lane data
    """
    data: ContentProductLaneData

    """
    Flex page component type (e.g. PRODUCTLANE)
    """
    type: ContentFlexPageComponentType!
}

"""
Queryable recipe lane for flex page
"""
type ContentFPQueryableRecipeLane implements ContentFlexPageComponentBase {
    """
    Queryable recipe lane data
    """
    data: ContentQueryableRecipeLaneData

    """
    Queryable recipe lane ID
    """
    id: String

    """
    Flex page component type (e.g. QUERYABLERECIPELANE)
    """
    type: ContentFlexPageComponentType!
}

"""
RichContent component for flex page
"""
type ContentFPRichContent implements ContentFlexPageComponentBase {
    """
    Rich content data
    """
    data: ContentRichContentData

    """
    Rich content id
    """
    id: String

    """
    Flex page component type (e.g. QUERYABLERECIPELANE)
    """
    type: ContentFlexPageComponentType!
}

"""
Shop header document for flex page
"""
type ContentFPShopHeader implements ContentFlexPageHeaderBase {
    """
    Header data
    """
    data: ContentShopHeaderData

    """
    Type (e.g. shopHeader)
    """
    type: ContentFlexPageHeaderType!
}

"""
Super shops (part of page entries) component for flex page
"""
type ContentFPSuperShops implements ContentFlexPageComponentBase {
    """
    Page entries data
    """
    data: ContentPageEntriesData

    """
    Page entries id
    """
    id: String

    """
    Flex page component type (e.g. QUERYABLERECIPELANE)
    """
    type: ContentFlexPageComponentType!
}

"""
Content Flex Page
(The page is used ofr both and mobile to display certain documents)
"""
type ContentFlexPage {
    """
    A list of flex page components including some documents
    """
    components: [ContentFlexPageComponentBase!]

    """
    Header document (This is separated from other components as it will always be displayed at the top of the page)
    """
    header: ContentFlexPageHeaderBase

    """
    Flex Page ID
    """
    id: String!

    """
    Meta object for the component
    """
    meta: ContentMobileComponentMetaObject

    """
    This is a rich text that can be used in flex pages for SEO purposes
    (Normally displayed at the end of the pages)
    """
    seoText: String
}

"""
Flex page component
"""
interface ContentFlexPageComponentBase {
    """
    Flex page component type
    """
    type: ContentFlexPageComponentType!
}

"""
Flex page component types
"""
enum ContentFlexPageComponentType {
    ARTICLE
    FORM
    HARDCODED_COMPONENT
    PRODUCTLANE
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use PRODUCT_LANE instead")
    PRODUCT_LANE
    QUERYABLERECIPELANE
        @deprecated(
            reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use QUERYABLE_RECIPE_LANE instead"
        )
    QUERYABLE_RECIPE_LANE
    RICHCONTENT
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use RICH_CONTENT instead")
    RICH_CONTENT
    SUPER_SHOPS
}

"""
Flex page header
"""
interface ContentFlexPageHeaderBase {
    """
    Flex page header type
    """
    type: ContentFlexPageHeaderType!
}

"""
Flex page header types
"""
enum ContentFlexPageHeaderType {
    BRANDHEADER
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use BRAND_HEADER instead")
    BRAND_HEADER
    MARKETINGHEADER
        @deprecated(
            reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use MARKETING_HEADER instead"
        )
    MARKETING_HEADER
    SHOPHEADER
        @deprecated(reason: "@sunset_date(2023-12-31) Enum value doesn't follow codestyle, use SHOP_HEADER instead")
    SHOP_HEADER
}

"""
Content CMS flex page options
"""
input ContentFlexPageOptions {
    """
    Root Components
    """
    application: String

    """
    The hippo channel you want to retrieve the page for
    """
    channel: String

    """
    Headers used in preview mode
    """
    contentPreviewingHeaders: String

    """
    If user is in order mode or not
    """
    isOrderMode: Boolean

    """
    The locale for which channel you want to retrieve a page for
    """
    locale: String

    """
    If user is in order mode then send the orderId otherwise empty
    """
    orderId: Int

    """
    The full path of the document
    """
    path: String

    """
    Targeting ab headers
    """
    targetingHeaders: String

    """
    View date, defaults to today's date. If an active order is present, the requested view date is overruled and set to the delivery date of the order.
    (format YYYY-MM-DD)
    """
    viewDate: String
}

"""
CMS Footer Links: navigation in the footer
"""
type ContentFooterLinks {
    """
    Id
    """
    id: String!

    """
    Link groups / columns
    """
    linkGroups: [ContentFooterLinksGroup!]!

    """
    Type
    """
    type: String!
}

"""
Group of link items with a subject
"""
type ContentFooterLinksGroup {
    """
    Link groups / columns
    """
    links: [ContentFooterLinksItem!]!

    """
    Subject
    """
    subject: String!
}

"""
Link item with title and anchor target
"""
type ContentFooterLinksItem {
    """
    Link
    """
    link: String!

    """
    Target
    """
    target: String!

    """
    Title
    """
    title: String!
}

"""
CMS Footer Links Arguments
"""
input ContentFooterLinksOptions {
    """
    Channel
    """
    channel: String

    """
    Locale
    """
    locale: String
}

"""
Form component
"""
type ContentForm implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Form component data
    """
    data: ContentFormData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Checkbox field
"""
type ContentFormCheckbox implements ContentFormField {
    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    field placeholder
    """
    placeholder: String

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Form component data
"""
type ContentFormData {
    """
    Form action (the url used to submit the form e.g. /v1/forms/2414e2a0-99b1-4230-993e-46956efc75d6)
    """
    action: String

    """
    Form description
    """
    description: String

    """
    This property will be filled when the form end date is in the past
    """
    expiredNotification: ExpiredNotification

    """
    Form fields
    """
    fields: [ContentFormField!]

    """
    A unique id used for a form
    """
    formId: String!

    """
    Mobile form description
    """
    mobileDescription: String

    """
    Mobile message to thank the user for submitting the form
    """
    mobileSuccessThankYou: String

    """
    The submit button label
    """
    submitLabel: String

    """
    Message displayed when the form submitted successfully
    """
    successConfirmation: String

    """
    Message to thank the user for submitting the form
    """
    successThankYou: String

    """
    Form title
    """
    title: String
}

"""
Dropdown field
"""
type ContentFormDropdown implements ContentFormField {
    """
    answer check
    """
    answerCheck: AnswerCheck

    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    options of the dropdown
    """
    options: [String!]!

    """
    field placeholder
    """
    placeholder: String

    """
    determines how to render the field (dropdown/radiobuttons)
    """
    renderType: ContentFormDropdownRenderType!

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Form Dropdown Render type
"""
enum ContentFormDropdownRenderType {
    DROPDOWN
    RADIOBUTTONS
}

"""
Email field
"""
type ContentFormEmail implements ContentFormField {
    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    a specific pattern can be added as a validation rule
    """
    pattern: String!

    """
    field placeholder
    """
    placeholder: String

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Common form field properties
"""
interface ContentFormField {
    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Types of the form fields
"""
enum ContentFormFieldType {
    CHECKBOX
    DROPDOWN
    EMAIL
    INFORMATIONBLOCK
    TELEPHONE
    TERMSBLOCK
    TEXT
    TEXTAREA
    UPLOAD
}

"""
Information field
"""
type ContentFormInformationBlock implements ContentFormField {
    """
    field description
    """
    description: String

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field title
    """
    title: String!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Telephone field
"""
type ContentFormTelephone implements ContentFormField {
    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    a specific pattern can be added as a validation rule
    """
    pattern: String!

    """
    field placeholder
    """
    placeholder: String

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Terms block field
"""
type ContentFormTermsBlock implements ContentFormField {
    """
    field label
    """
    label: String

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    determines if the field is required
    """
    required: Boolean!

    """
    url to visit the terms information
    """
    termsLink: ContentLink

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Textarea field
"""
type ContentFormTextArea implements ContentFormField {
    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    maximum characters can be written in the field
    """
    maxLength: Int!

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    field placeholder
    """
    placeholder: String

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Text field
"""
type ContentFormTextField implements ContentFormField {
    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    maximum characters can be written in the field
    """
    maxLength: Int!

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    a specific pattern can be added as a validation rule
    """
    pattern: String

    """
    field placeholder
    """
    placeholder: String

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
Upload field
"""
type ContentFormUpload implements ContentFormField {
    """
    field description
    """
    description: String

    """
    field label
    """
    label: String

    """
    maximum items can be added to the upload field
    """
    maxItems: Int!

    """
    media block
    """
    media: ContentMediaBlockBase

    """
    field name
    """
    name: String!

    """
    determines if the field is required
    """
    required: Boolean!

    """
    field type
    """
    type: ContentFormFieldType!
}

"""
ContentGridLane component
"""
type ContentGridLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    HeroBanner Component Data
    """
    data: ContentGridLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content grid lane Component Data
"""
type ContentGridLaneData {
    """
    Content grid lane document UUID
    """
    documentUUID: String!

    """
    Content grid lane items
    """
    items: [ContentGridLaneItem!]!

    """
    Content grid lane Title
    """
    title: String
}

"""
ContentGridLane Component item
"""
type ContentGridLaneItem {
    """
    Content grid item body text
    """
    body: String

    """
    Content grid item Content Image, containing image description and variants
    """
    images: ContentImage!

    """
    Content grid item cta
    """
    link: ContentLink

    """
    Content grid lane item Title
    """
    title: String
}

"""
Half with media monetization lane component
"""
type ContentHalfWidthMediaMonetizationLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Half with media monetization lane component data
    """
    data: ContentContentHalfWidthMediaMonetizationLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
HeroBanner component
"""
type ContentHeroBanner implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    HeroBanner Component Data
    """
    data: ContentHeroBannerData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
HeroBanner Component Data
"""
type ContentHeroBannerData {
    """
    HeroBanner Image
    """
    images: [ContentImageSet!]!

    """
    HeroBanner Subtitle
    """
    subtitle: String

    """
    HeroBanner Text Color
    """
    textColor: String!

    """
    HeroBanner Title
    """
    title: String
}

"""
Content image list of variants and image description
"""
type ContentImage {
    """
    Image description (Used for web as an alter text)
    """
    description: String

    """
    Image variants
    """
    variants: [ContentImageSet!]!
}

"""
ImageSet type for Content module
"""
type ContentImageSet {
    """
    Image description, alt text
    """
    description: String

    """
    Height of the image in pixels
    """
    height: Int

    """
    Url of the image
    """
    url: String!

    """
    Image size variant
    """
    variant: ContentImageVariantType

    """
    Width of the image in pixels
    """
    width: Int
}

"""
Content image variant
"""
enum ContentImageVariantType {
    CNTDESKTOP
    CNTDESKTOPHD
    CNTDESKTOPHDRETINA
    CNTDESKTOPRETINA
    CNTPHABLET
    CNTPHABLETRETINA
    CNTTABLET
    CNTTABLETRETINA
    FULL
    LARGE
    LARGERETINA
    MEDIUM
    MEDIUMRETINA
    ORIGINAL
    SCLDESKTOP
    SCLDESKTOPHD
    SCLDESKTOPHDRETINA
    SCLDESKTOPRETINA
    SMALL
    SMALLRETINA
    THUMBNAIL
    XL
    XLRETINA
}

"""
Content Link
"""
type ContentLink {
    """
    Content link color
    """
    color: String

    """
    Content link url
    """
    href: String

    """
    Content link isExternalLink
    """
    isExternalLink: Boolean

    """
    Content link is external mobile link
    """
    isExternalMobileLink: Boolean!

    """
    Content link url used in mobile
    """
    mobileLink: String

    """
    Content link target _blank or _self
    """
    target: String

    """
    Content link theme
    """
    theme: String!

    """
    Content link title
    """
    title: String
}

"""
Link group component
"""
type ContentLinkGroup implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Link group data
    """
    data: ContentLinkGroupData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Link group data
"""
type ContentLinkGroupData {
    """
    Link group document UUID
    """
    documentUUID: String!

    """
    Link group item
    """
    linkgroups: [ContentLinkGroupItem!]!
}

"""
Link group item
"""
type ContentLinkGroupItem {
    """
    Navigation links
    """
    links: [ContentLink!]!

    """
    Navigation title
    """
    title: String
}

"""
Manual accordion returns items
"""
type ContentManualAccordion {
    """
    Accordion items
    """
    items: [ContentAccordionItem!]!

    """
    Accordion title
    """
    title: String

    """
    Accordion type
    """
    type: ContentAccordionType!
}

"""
Marketing Carousel component (A part of CMS PageEntries)
"""
type ContentMarketingCarousel implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Marketing Carousel Component Data
    """
    data: ContentPageEntriesData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
MarketingHeader component
"""
type ContentMarketingHeader implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Marketing header data
    """
    data: ContentMarketingHeaderData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Marketing header data
"""
type ContentMarketingHeaderData {
    """
    Content
    """
    content: String

    """
    Content theme
    """
    contentTheme: String!

    """
    Containing image description and variants
    """
    imageSet: ContentImage!

    """
    The primary button
    """
    primaryButton: ContentArticleButton

    """
    The secondary button
    """
    secondaryButton: ContentArticleButton

    """
    Containing sticker image description and variants
    """
    stickerImageSet: ContentImage

    """
    Is sticky button
    """
    stickyButton: Boolean!

    """
    Theme
    """
    theme: String

    """
    Title
    """
    title: String!
}

"""
Media base interface
"""
interface ContentMediaBlockBase {
    """
    Media type (IMAGE, YOUTUBE, BLUEBILLYWIG)
    """
    type: ContentMediaBlockType!
}

"""
Content media types (IMAGE, YOUTUBE, BLUEBILLYWIG)
"""
enum ContentMediaBlockType {
    BLUEBILLYWIG
    IMAGE
    YOUTUBE
}

"""
Media image
"""
type ContentMediaImage implements ContentMediaBlockBase {
    """
    List of image variants and description
    """
    imageSet: ContentImage!

    """
    Media type (IMAGE)
    """
    type: ContentMediaBlockType!
}

"""
Content media monetization slot
"""
type ContentMediaMonetizationSlot {
    """
    Slot id string
    """
    id: String!
}

"""
Content media monetization targeting
"""
type ContentMediaMonetizationTargeting {
    """
    Category, for instance a product category
    """
    category: String!

    """
    GooglePublishingTags (1 for enabled and 0 for disabled)
    """
    googlePublishTags: String!

    """
    Member state code (known = 1 | logged in = 2 | unknown = 3)
    """
    memberStateCode: String

    """
    Member type code
    """
    memberType: String

    """
    Order mode (1 for true and 0 for false)
    """
    orderMode: String

    """
    Position
    """
    position: String!
}

"""
Content media bbw video
"""
type ContentMediaVideoBlueBillyWig implements ContentMediaBlockBase {
    """
    List of image variants and description
    """
    imageSet: ContentImage!

    """
    Content media type (BLUEBILLYWIG)
    """
    type: ContentMediaBlockType!

    """
    This field will be filled by the data from video-service
    """
    videoData: VideoBbw

    """
    BBW player id
    """
    videoId: String!
}

"""
Media youtube video
"""
type ContentMediaVideoYoutube implements ContentMediaBlockBase {
    """
    List of image variants and description
    """
    imageSet: ContentImage!

    """
    Media type (YOUTUBE)
    """
    type: ContentMediaBlockType!

    """
    Youtube id for player
    """
    videoId: String!
}

"""
CMS MegaMenu Links: Header MegaMenu links groups
"""
type ContentMegaMenuLinks {
    """
    Id
    """
    id: String!

    """
    Link groups / columns
    """
    linkGroups: [ContentMegaMenuLinksGroup!]!

    """
    Type
    """
    type: String!
}

"""
Group of link items with a subject
"""
type ContentMegaMenuLinksGroup {
    """
    Link groups / columns
    """
    links: [ContentMegaMenuLinksItem!]

    """
    Subject
    """
    subject: String
}

"""
Link item with title and anchor target
"""
type ContentMegaMenuLinksItem {
    """
    Link
    """
    link: String!

    """
    Target
    """
    target: String!

    """
    Title
    """
    title: String!
}

"""
CMS MegaMenu Links Arguments
"""
input ContentMegaMenuLinksOptions {
    """
    Channel
    """
    channel: String

    """
    Locale
    """
    locale: String
}

"""
Meta object for mobile component
"""
type ContentMobileComponentMetaObject {
    """
    Targeting headers
    """
    targetedHeaders: String
}

"""
Content mobile CMS options
"""
input ContentMobileComponentOptions {
    """
    Root Components
    """
    application: String

    """
    Headers used in preview mode
    """
    contentPreviewingHeaders: String

    """
    If user is in order mode or not
    """
    isOrderMode: Boolean

    """
    If user is in order mode then send the orderId otherwise empty
    """
    orderId: Int

    """
    Targeting ab headers
    """
    targetingHeaders: String
}

"""
ImageSet type for Content mobile module TODO: change this into the main content image set
"""
type ContentMobileImageSet {
    """
    Height of the image in pixels
    """
    height: Int!

    """
    Url of the image
    """
    link: String!

    """
    Image mime type
    """
    mimeType: String!

    """
    Image size variant
    """
    variant: ContentImageVariantType

    """
    Width of the image in pixels
    """
    width: Int!
}

"""
ContentMobilePageEntries component
"""
type ContentMobilePageEntries implements ContentBaseMobileCMSComponent {
    """
    ID
    """
    id: String!

    """
    Meta object for the component
    """
    meta: ContentMobileComponentMetaObject

    """
    Page entries
    """
    pageEntries: [ContentMobilePageEntry!]!

    """
    Render Type
    """
    renderType: RenderType!

    """
    Title
    """
    title: String!

    """
    Component Type
    """
    type: ContentBaseMobileCMSComponentType!
}

"""
Page entry
"""
type ContentMobilePageEntry {
    """
    Page entry campaign tag, configured if linked to a comkal campaign
    """
    campaignTag: String

    """
    Page entry document UUID
    """
    documentUUID: String!

    """
    Page entry images
    """
    images: [ContentMobileImageSet!]!

    """
    Page entry is external link
    """
    isExternalLink: Boolean!

    """
    Page entry link
    """
    link: String!

    """
    Page entry link type
    """
    linkType: LinkType!

    """
    Page entry sticker image
    """
    stickerImages: [ContentMobileImageSet!]!

    """
    Page entry subtitle
    """
    subtitle: String

    """
    Page entry theme
    """
    theme: String

    """
    Page entry title
    """
    title: String!
}

"""
ContentMobilePropositionHeader component
"""
type ContentMobilePropositionHeader implements ContentBaseMobileCMSComponent {
    """
    ID
    """
    id: String!

    """
    Landscape images
    """
    landscapeImage: [ContentMobileImageSet!]!

    """
    Meta object for the component
    """
    meta: ContentMobileComponentMetaObject

    """
    Portrait image
    """
    portraitImage: [ContentMobileImageSet!]!

    """
    Sticker image
    """
    sticker: [ContentMobileImageSet!]

    """
    Subtitle
    """
    subtitle: String

    """
    Title
    """
    title: String!

    """
    Component Type
    """
    type: ContentBaseMobileCMSComponentType!
}

"""
CMS Opt In
"""
type ContentOptIn {
    """
    Closing text (web)
    """
    closingText: String!

    """
    Introduction (web)
    """
    introduction: String!

    """
    Mobile closing text
    """
    mobileClosingText: String!

    """
    Mobile introduction
    """
    mobileIntroduction: String!

    """
    Opt in compounds
    """
    optIns: [ContentOptInCompound!]!

    """
    Title
    """
    title: String!

    """
    Type
    """
    type: String!
}

"""
Content Opt In Compound
"""
type ContentOptInCompound {
    """
    ID
    """
    id: String!

    """
    Mobile text
    """
    mobileText: String!

    """
    Text (web)
    """
    text: String!
}

"""
CMS Opt In Arguments
"""
input ContentOptInOptions {
    """
    Channel
    """
    channel: String
}

"""
CMS Page
"""
type ContentPage {
    """
    Root Components
    """
    components: [ContentRootComponent!]!

    """
    This field contains meta data that is needed for SEO purposes (title, description, etc)
    """
    pageMeta: ContentPageMeta!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Page Submenu
    """
    submenu: ContentSubmenu
}

"""
PageEntries Component Data
"""
type ContentPageEntriesData {
    """
    Page entry items
    """
    entries: [ContentPageEntry!]!

    """
    Page entry items
    """
    items: [ContentPageEntry!]!
        @deprecated(
            reason: "@sunset_date(2023-12-31) this key can cause gql validation issues in combination with other components using the same key, use `entries` instead \n. . "
        )

    """
    Page entry see more link
    """
    seeMoreLink: ContentLink

    """
    Page entries title
    """
    title: String

    """
    Type, used for smart marketing carousel
    """
    type: String
}

"""
Page entry item
"""
type ContentPageEntry {
    """
    Page entry campaign tag
    """
    campaignTag: String

    """
    Page entry document UUID
    """
    documentUUID: String!

    """
    Page entry href
    """
    href: String

    """
    Page entry images
    """
    images: ContentImage!

    """
    Page entry isExternalLink
    """
    isExternalLink: Boolean!

    """
    type of the link (Used for mobile)
    """
    linkType: LinkType!

    """
    Page entry mobileLink
    """
    mobileLink: String

    """
    Page entry sticker image
    """
    stickerImages: ContentImage

    """
    Page entry subtitle
    """
    subtitle: String

    """
    Page entry theme
    """
    theme: String

    """
    Page entry title
    """
    title: String!
}

"""
Page meta data (Used in frontend for SEO Purposes)
"""
type ContentPageMeta {
    """
    Page canonical
    """
    canonical: String

    """
    Page description
    """
    description: String!

    """
    Page follow
    """
    follow: Boolean!

    """
    Page index
    """
    index: Boolean!

    """
    Page jsonLD
    """
    jsonLD: String

    """
    Page theme (Used in html tag)
    """
    theme: String

    """
    Page title
    """
    title: String!
}

"""
CMS Page Arguments
"""
input ContentPageOptions {
    """
    Channel
    """
    channel: String

    """
    If user is in order mode or not
    """
    isOrderMode: Boolean

    """
    Maximum components to be fully returned
    """
    maxComponentsToFullyReturn: Int

    """
    If user is in order mode then send the orderId otherwise empty
    """
    orderId: Int

    """
    View Date (YYYY-MM-DD)
    """
    viewDate: String
}

"""
Content placeholder
"""
type ContentPlaceholder implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Data
    """
    data: ContentPlaceholderData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Placeholder data
"""
type ContentPlaceholderData {
    """
    Title
    """
    title: String
}

"""
Preview data is needed for CMS experience manager
"""
type ContentPreviewData {
    """
    Contains the CMS meta-data for enabling drag-and-drop in Preview Mode, only used internally by the library
    This should be added right before the DOM element representing the component or container
    """
    begin: String

    """
    Contains the CMS meta-data for adding a link for each component that gives document details
    """
    contentLink: String

    """
    Contains the CMS meta-data for enabling drag-and-drop in Preview Mode, only used internally by the library
    This should be added right after the DOM element representing the component or container
    """
    end: String

    """
    This field is used to make a component visible or invisible in the CMS experience manager
    """
    visible: Boolean!
}

"""
ProductLane Component
"""
type ContentProductLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Productlane Component Data
    """
    data: ContentProductLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Productlane Component Data
"""
type ContentProductLaneData {
    """
    Anchor label, for clickable link on allerhande pages
    """
    anchorLabel: String

    """
    Link that is used for "see more" functionality
    """
    link: ContentLink

    """
    Products
    """
    products: [Product!]!

    """
    Number of rows
    """
    rows: Int

    """
    Is Scrollable
    """
    scrollable: Boolean!

    """
    Search term for page with products behind "see more" button
    """
    searchTerm: String

    """
    In case an error happens in the product search service, this field will be true
    """
    serviceError: Boolean!

    """
    Subtitle
    """
    subtitle: String

    """
    Title
    """
    title: String
}

"""
Content promotion object
"""
type ContentPromotion {
    """
    Content media monetization slot
    """
    slot: ContentMediaMonetizationSlot!

    """
    Content media monetization targeting
    """
    targeting: ContentMediaMonetizationTargeting!

    """
    Media monetization type
    """
    type: String!
}

"""
ContentPropositionHeader component
"""
type ContentPropositionHeader implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Proposition Header Data
    """
    data: ContentPropositionHeaderData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
ContentPropositionHeader component data
"""
type ContentPropositionHeaderData {
    """
    Landscape image of the banner
    """
    landscapeImage: ContentImage

    """
    Portrait image of the banner
    """
    portraitImage: ContentImage

    """
    Sticker image of the banner
    """
    sticker: ContentImage

    """
    Subtitle of the banner
    """
    subtitle: String

    """
    Main title of the banner
    """
    title: String!
}

"""
Queryable recipe lane component
"""
type ContentQueryableRecipeLane implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Smart lane Component Data
    """
    data: ContentQueryableRecipeLaneData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Smartlane Queryable Recipe lane data
"""
type ContentQueryableRecipeLaneData {
    """
    Recipe lane items
    """
    items: [RecipeSummary!]!

    """
    Recipe lane link
    """
    link: ContentLink

    """
    Recipe lane query (This field is used to send a request to recipe search service)
    """
    recipeQuery: RecipeThemeSearchParams

    """
    In case an error happens in the recipe service, this field will be true
    """
    serviceError: Boolean!

    """
    Recipe lane title
    """
    title: String
}

"""
CMS Resource bundle which contains a list of key/values as labels for translations
"""
type ContentResourceBundle {
    """
    Resource bundle document id
    """
    id: String!

    """
    List of labels (translations)
    """
    labels: [ContentResourceBundleLabel!]!

    """
    Locale (nl_NL/nl_BE)
    """
    locale: String!
}

"""
Resource bundle label
"""
type ContentResourceBundleLabel {
    """
    Resource bundle key
    """
    key: String!

    """
    Resource bundle value (translation)
    """
    value: String!
}

"""
Resource bundle input options
"""
input ContentResourceBundleOptions {
    """
    Resource bundle input locale
    Default is set to nl_NL
    """
    locale: String
}

"""
Rich content component
"""
type ContentRichContent implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Rich content data
    """
    data: ContentRichContentData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Rich content data
"""
type ContentRichContentData {
    """
    Rich content text
    """
    body: String!

    """
    This image field is used in mobile for the rich content first screen
    """
    cardImage: ContentImage

    """
    Rich content document uuid
    """
    documentUUID: String!

    """
    Rich content images
    """
    images: ContentImage

    """
    Title of products section
    """
    itemsTitle: String

    """
    Rich content link
    """
    link: ContentLink

    """
    Media image or video
    """
    media: ContentMediaBlockBase

    """
    List of products inside rich content
    """
    products: [Product!]!

    """
    Mobile will use this property to display a page with products behind the More button.
    """
    searchTerm: String

    """
    Rich content title
    """
    title: String
}

"""
Root Component (e.g. Submenu, Component)
"""
type ContentRootComponent {
    """
    ID Component Types
    """
    id: String!

    """
    CMS Component Types
    """
    items: [ContentBaseCMSComponent!]!

    """
    Name of the container component (can be used for frontend to display components in different containers)
    """
    name: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Root Component Types
    """
    type: ContentComponentType!
}

"""
Search accordion returns items and hasMoreItems
"""
type ContentSearchAccordion {
    """
    Accordion if there are more items based on searchterm
    """
    hasMoreItems: Boolean

    """
    Accordion items
    """
    items: [ContentAccordionItem!]!

    """
    Accordion search term
    """
    searchTerm: String!

    """
    Accordion title
    """
    title: String

    """
    Accordion type
    """
    type: ContentAccordionType!
}

"""
ShopHeader component
"""
type ContentShopHeader implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Shop header data
    """
    data: ContentShopHeaderData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Shop header data
"""
type ContentShopHeaderData {
    """
    Containing image description and variants
    """
    imageSet: ContentImage!

    """
    The primary button
    """
    primaryButton: ContentArticleButton

    """
    Containing sticker image description and variants
    """
    stickerImageSet: ContentImage

    """
    Subtitle
    """
    subtitle: String

    """
    Theme
    """
    theme: String

    """
    Title
    """
    title: String!
}

"""
Shop in Shop component
"""
type ContentShopInShop implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Shop in Shop Component Data
    """
    data: ContentShopInShopData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Shop in Shop Component Data
"""
type ContentShopInShopData {
    """
    Shop in Shop document UUID
    """
    documentUUID: String!

    """
    Shop in Shop items
    """
    items: [ContentShopInShopItem]

    """
    Shop in shop Title
    """
    title: String
}

"""
Shop in Shop item
"""
type ContentShopInShopItem {
    """
    Background color
    """
    bgColor: String

    """
    Image set
    """
    images: ContentImage

    """
    Link
    """
    link: ContentLink

    """
    Sticker
    """
    sticker: String

    """
    Title
    """
    title: String
}

"""
Smart Promotions Component item
"""
union ContentSmartPromotionItem = ContentSmartPromotionSegment | Product

"""
Smart Promotions segment
"""
type ContentSmartPromotionSegment {
    """
    Segment products
    """
    products: [ContentBonusSegment!]

    """
    Segment ID
    """
    segmentId: String

    """
    Segment type
    """
    type: String!
}

"""
Segment control
"""
type ContentSmartPromotionSegmentControl {
    """
    Segment control theme
    """
    theme: String!

    """
    Segment control type
    """
    type: String!
}

"""
Segment shield
"""
type ContentSmartPromotionSegmentShield {
    """
    Segment shield text
    """
    text: String

    """
    Segment shield theme
    """
    theme: String!
}

"""
Segment text
"""
type ContentSmartPromotionSegmentText {
    """
    Segment text value
    """
    value: String
}

"""
Segment validity
"""
type ContentSmartPromotionSegmentValidity {
    """
    Availability description
    """
    description: String

    """
    Availability end date
    """
    endDate: String!

    """
    Availability start date
    """
    startDate: String!
}

"""
SmartPromotions type that can be free delivery or personal bonus
"""
enum ContentSmartPromotionType {
    FREE_DELIVERY
    PERSONAL_BONUS
}

"""
Smart Promotions component
"""
type ContentSmartPromotions implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Smart Promotions Component Data
    """
    data: ContentSmartPromotionsData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
SmartPromotions Component Data
"""
type ContentSmartPromotionsData {
    """
    SmartPromotions see more link
    """
    link: ContentLink

    """
    In case an error happens in the bonus service, this field will be true
    """
    serviceError: Boolean!

    """
    SmartPromotions items that can be either a product or a bonus segment
    """
    smartPromotionItems: [ContentSmartPromotionItem!]!

    """
    SmartPromotions type that can be free delivery or personal bonus
    """
    smartPromotionType: ContentSmartPromotionType!

    """
    Applies filter supplier cooperation
    """
    supplierBoosted: Boolean

    """
    SmartPromotions Component title
    """
    title: String
}

"""
Submenu component
"""
type ContentSubmenu {
    """
    Submenu data
    """
    data: ContentSubmenuData

    """
    Submenu name
    """
    id: String

    """
    Submenu name
    """
    name: String

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData
}

"""
Submenu Component Data
"""
type ContentSubmenuData {
    """
    Submenu header
    """
    header: ContentSubmenuHeader

    """
    Submenu navigation items
    """
    items: [ContentSubmenuItem!]!
}

"""
Submenu header focus point
"""
enum ContentSubmenuFocusPoint {
    CENTER
    LEFT
    RIGHT
}

"""
Submenu header
"""
type ContentSubmenuHeader {
    """
    Submenu header image focus point (On FE styles will be changed based on this value)
    """
    focusPoint: ContentSubmenuFocusPoint!

    """
    Submenu header image
    """
    image: ContentImage!

    """
    Submenu title
    """
    title: String!
}

"""
Submenu navigation item
"""
type ContentSubmenuItem {
    """
    Navigation expanded
    """
    expanded: Boolean!

    """
    Navigation url
    """
    href: String

    """
    A navigation can have nested menus
    """
    items: [ContentSubmenuItem!]

    """
    Navigation title
    """
    label: String!

    """
    Navigation selected
    """
    selected: Boolean!
}

"""
Supershops component (A part of CMS PageEntries)
"""
type ContentSuperShops implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Supershops Component Data
    """
    data: ContentPageEntriesData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Themes configuration
"""
type ContentThemeConfiguration {
    """
    Background image set
    """
    backgroundImage: [ContentMobileImageSet!]

    """
    Primary color hex
    """
    primaryColor: String

    """
    Secondary color hex
    """
    secondaryColor: String

    """
    Text color
    """
    textColor: String

    """
    Theme name
    """
    theme: String!
}

"""
Themes configurations
"""
type ContentThemesConfiguration {
    """
    Themes configurations list
    """
    themesConfiguration: [ContentThemeConfiguration!]!
}

"""
Content Title
"""
type ContentTitle implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Content Title Data
    """
    data: ContentTitleData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Content Title Data
"""
type ContentTitleData {
    """
    has extra spacing on the left and right side
    """
    hasOffset: Boolean

    """
    Title
    """
    title: String
}

"""
Content usp
"""
type ContentUsp {
    """
    Usp Link
    """
    link: String!

    """
    Usp title
    """
    name: String!
}

"""
Content usp group
"""
type ContentUspGroup {
    """
    Usp group link
    """
    link: String

    """
    Usp theme color
    """
    themeColor: String

    """
    Usp group title
    """
    title: String

    """
    List of usps
    """
    uspList: [ContentUsp!]!
}

"""
Short summary of a complete cook book from an user
"""
type CookBook {
    """
    Date information when it was created or changed
    """
    date: CookBookDate!

    """
    id of summary
    """
    id: Int!

    """
    Short introduction
    """
    intro: String!

    """
    People can keep their stuff private
    """
    isShared: Boolean!

    """
    We moderate some books
    """
    moderated: CookBookModerated!

    """
    Statistics how many times shared or visited etc
    """
    stats: CookBookStats

    """
    Some details of the user
    """
    user: CookBookUser
}

type CookBookAddRecipeResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Cookbook add recipe result
    """
    result: CookBookMemberRecipe

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Collected information
"""
type CookBookCollectedRecipe {
    """
    recipe id
    """
    id: Int!

    """
    Is it a favourite recipe for the person who stored it?
    """
    isFavourite: Boolean!

    """
    Every user can have a personal free text notification about the recipe
    """
    note: String
}

type CookBookCollectedRecipeRemoveResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Collected cookbook recipe removed result
    """
    result: Boolean

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

type CookBookCollectedRecipeResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Collected recipe result
    """
    result: CookBookCollectedRecipe

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Date information on the cookbook
"""
type CookBookDate {
    """
    When it was last modified
    """
    changed: String!

    """
    When first version was released
    """
    inserted: String!
}

type CookBookDeleteRecipeResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result after deleting a recipe
    """
    result: Boolean

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

type CookBookEditRecipeResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Edited recipe result
    """
    result: CookBookMemberRecipe

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Same as cookBookRecipeIngredient
"""
input CookBookInputRecipeIngredient {
    """
    Description
    """
    name: String!

    """
    Quantity
    """
    quantity: String!

    """
    Unit size kg/eetlepel/gram/etc
    """
    unit: String!
}

"""
Same as CookBookRecipeMeta but we need input
"""
input CookBookInputRecipeMeta {
    """
    Course, FIXME: SHOULD BE ENUM
    """
    course: String!

    """
    Cuisine, FIXME: SHOULD BE ENUM
    """
    cuisine: String!

    """
    Dish type, FIXME: SHOULD BE ENUM
    """
    dish: String!

    """
    Protein source, FIXME: SHOULD BE ENUM
    """
    protein: String!

    """
    For how many persons 1/2/4/6/8/12
    """
    servings: Int!
}

"""
Same as CookBookRecipeTimes
"""
input CookBookInputRecipeTimes {
    """
    Cooking time
    """
    cooking: Int

    """
    Preparation time
    """
    preparation: Int

    """
    Waiting time
    """
    waiting: Int
}

"""
input when adding new cookbook profile
"""
input CookBookMemberAddProfileInput {
    """
    avatar code 0-61
    """
    avatar: Int!

    """
    wants to retrieve/send messages from others
    """
    hasMessaging: Boolean!

    """
    wants to be notified when new message arrives
    """
    hasNotifications: Boolean!

    """
    intro
    """
    intro: String!

    """
    if profile is shared to public
    """
    isShared: Boolean!
}

"""
Message from another cookbook member to a cookbook member
"""
type CookBookMemberMessage {
    """
    Id of the message
    """
    id: Int!

    """
    When message is read or not
    """
    isRead: Boolean!

    """
    Message itself
    """
    message: String!

    """
    Sender information
    """
    sender: CookBookMemberMessageSender!

    """
    Date the message is sent
    """
    sent: String!

    """
    Subject of message
    """
    subject: String!
}

type CookBookMemberMessageOverview {
    """
    Id of the message
    """
    id: Int!

    """
    When message is read or not
    """
    isRead: Boolean!

    """
    Sender information
    """
    sender: CookBookMemberMessageSender!

    """
    Date the message is sent
    """
    sent: String!

    """
    Subject of message
    """
    subject: String!
}

"""
Details of the user who sent the message, people can block and unblock users so make sure to cache/update correctly
"""
type CookBookMemberMessageSender {
    """
    id of the cookbook user
    """
    id: Int!

    """
    Every user can block another user and prevent incomming messages in future
    """
    isBlocked: Boolean!

    """
    Display name of the cook book user
    """
    name: String!
}

"""
Result for paginated messages
"""
type CookBookMemberMessagesResult {
    """
    page
    """
    page: PageInfo

    """
    results
    """
    result: [CookBookMemberMessageOverview!]
}

"""
Cookbook profile information
"""
type CookBookMemberProfile {
    """
    avatar code 0-61
    """
    avatar: Int!

    """
    wants to retrieve/send messages from others
    """
    hasMessaging: Boolean!

    """
    wants to be notified when new message arrives
    """
    hasNotifications: Boolean!

    """
    intro
    """
    intro: String!

    """
    if profile is shared to public
    """
    isShared: Boolean!
}

type CookBookMemberRecipe {
    """
    record id of recipe
    """
    id: Int!

    """
    Private data only for the member itself
    """
    private: CookBookRecipePrivate

    """
    Public data, later we will resolve this differently the fragment 'CookBookRecipe' is now re-usable
    """
    public: CookBookRecipe
}

"""
input when updating a profile, when null not updated
"""
input CookBookMemberUpdateProfileInput {
    """
    avatar code 0-61
    """
    avatar: Int

    """
    wants to retrieve/send messages from others
    """
    hasMessaging: Boolean

    """
    wants to be notified when new message arrives
    """
    hasNotifications: Boolean

    """
    intro
    """
    intro: String

    """
    if profile is shared to public
    """
    isShared: Boolean
}

"""
Blocked person for contacting a specific cookbook user
"""
type CookBookMessagingBlockedMember {
    """
    Display name of cookbookuser
    """
    name: String!

    """
    Cookbook id of user
    """
    userId: Int!
}

"""
Moderation state for a cookbook
"""
enum CookBookModerated {
    """
    Approved content
    """
    APPROVED

    """
    Removed content
    """
    DELETED

    """
    Rejected content
    """
    REJECTED

    """
    abuse reported
    """
    TO_BE_MODERATED_ABUSE_REPORTED

    """
    normal content reportec
    """
    TO_BE_MODERATED_NORMAL_CONTENT

    """
    suspicious content reported
    """
    TO_BE_MODERATED_SUSPICIOUS_CONTENT

    """
    unknown
    """
    UNKNOWN
}

"""
One specific public recipe
"""
type CookBookRecipe {
    """
    Number of times collected
    """
    collected: Int!

    """
    Tell us when its added and last changed
    """
    date: CookBookDate!

    """
    record id of recipe
    """
    id: Int!

    """
    Ingredients
    """
    ingredients: [CookBookRecipeIngredient!]

    """
    Favorite recipe
    """
    isFavourite: Boolean!

    """
    Diet recipe
    """
    isSlim: Boolean!

    """
    meta information about the recipe
    """
    meta: CookBookRecipeMeta

    """
    Preparation times
    """
    preparation: String!

    """
    Source of recipe
    """
    source: String!

    """
    Preparation, cooking and waiting times for recipe
    """
    times: CookBookRecipeTimes!

    """
    title of recipe
    """
    title: String!

    """
    Tools needed for the job
    """
    tools: String!

    """
    extended user info
    """
    user: CookBookUser

    """
    user id, this is used for the extension on user details
    """
    userId: Int!
}

"""
Base for stored allerhande recipe
"""
type CookBookRecipeAllerhande {
    """
    user id of recipes
    """
    id: Int!

    """
    is favourite recipe
    """
    isFavourite: Boolean!

    """
    Recipe summary information
    """
    recipe: RecipeSummary
}

"""
Information about stored allerhande recipes, in cookbook we do not show them all
"""
type CookBookRecipeAllerhandeResult {
    """
    page
    """
    page: PageInfo

    """
    results
    """
    result: [CookBookRecipeAllerhande!]
}

type CookBookRecipeCountResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Cookbook recipe count result, each recipe has its own counter for visits by members and is used for creating the popularity of the cookbook author
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Recipe ingredient
"""
type CookBookRecipeIngredient {
    """
    Description
    """
    name: String!

    """
    Quantity
    """
    quantity: String!

    """
    Unit size kg/eetlepel/gram/etc
    """
    unit: String!
}

"""
Small details about top list recipe (cached for 1 hour)
"""
type CookBookRecipeListItem {
    """
    Recipe id
    """
    id: Int!

    """
    Recipe title
    """
    title: String!

    """
    Recipe owner details
    """
    user: CookBookRecipeListItemUser!

    """
    Recipe owner id
    """
    userId: Int!
}

"""
Recipe owner details for top list (cached for 10 minutes)
"""
type CookBookRecipeListItemUser {
    """
    city name of user
    """
    city: String

    """
    Name of the user
    """
    name: String!
}

"""
Meta information about a recipe
"""
type CookBookRecipeMeta {
    """
    Course, FIXME: SHOULD BE ENUM
    """
    course: String!

    """
    Cuisine, FIXME: SHOULD BE ENUM
    """
    cuisine: String!

    """
    Dish type, FIXME: SHOULD BE ENUM
    """
    dish: String!

    """
    Protein source, FIXME: SHOULD BE ENUM
    """
    protein: String!

    """
    For how many persons 1/2/4/6/8/12
    """
    servings: Int!
}

"""
Private data a user can retrieve about its recipe
"""
type CookBookRecipePrivate {
    """
    Is the recipe shared
    """
    isShared: Boolean!

    """
    Personal added note for recipe owners only to see
    """
    note: String

    """
    Personal Moderation state recipe
    """
    state: CookBookModerated!
}

type CookBookRecipeReportOffensiveResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Cook book recipe report offensive result
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Times
"""
type CookBookRecipeTimes {
    """
    Cooking time
    """
    cooking: Int

    """
    Preparation time
    """
    preparation: Int

    """
    Waiting time
    """
    waiting: Int
}

"""
All own recipes for a cookbook user (cached for ten minutes)
"""
type CookBookRecipes {
    """
    User id of recipes
    """
    id: Int

    """
    Page details
    """
    page: PageInfo

    """
    Found recipes
    """
    result: [CookBookRecipesItem!]

    """
    Some details of the user
    """
    user: CookBookUser
}

"""
Collected recipes for a cookbook user
"""
type CookBookRecipesCollected {
    """
    user id of recipes
    """
    id: Int

    """
    page information
    """
    page: PageInfo

    """
    results found
    """
    result: [CookBookRecipesCollectedItem!]

    """
    Basic details of the user
    """
    user: CookBookUser
}

"""
Collected recipe
"""
type CookBookRecipesCollectedItem {
    """
    id of recipe
    """
    id: Int!

    """
    Is favourte recipe
    """
    isFavourite: Boolean!

    """
    meta
    """
    meta: CookBookRecipeMeta!

    """
    owner of the recipe
    """
    owner: CookBookRecipesCollectedOwner!

    """
    title recipe
    """
    title: String!

    """
    user collecting the recipe
    """
    userId: Int!
}

"""
Collected recipes for the cookbook member
"""
type CookBookRecipesCollectedMember {
    """
    member id
    """
    id: Int

    """
    page information
    """
    page: PageInfo

    """
    results found
    """
    result: [CookBookRecipesCollectedItem!]

    """
    Basic details of the user
    """
    user: CookBookUser
}

"""
Owner information
"""
type CookBookRecipesCollectedOwner {
    """
    city
    """
    city: String

    """
    name
    """
    name: String!
}

"""
Recipe summary
"""
type CookBookRecipesItem {
    """
    Recipe id
    """
    id: Int!

    """
    Is recipe a favourite from its owner
    """
    isFavourite: Boolean!

    """
    Is recipe shared by its owner
    """
    isShared: Boolean!

    """
    Meta information about recipe
    """
    meta: CookBookRecipeMeta!

    """
    Moderation state for recipe
    """
    state: CookBookModerated

    """
    Title recipe
    """
    title: String!

    """
    User id
    """
    userId: Int!
}

"""
All own recipes for current cookbook member
"""
type CookBookRecipesMember {
    """
    Member id of recipes
    """
    id: Int

    """
    Page details
    """
    page: PageInfo

    """
    Found recipes
    """
    result: [CookBookRecipesItem!]

    """
    Some details of the user
    """
    user: CookBookUser
}

"""
Recipe overview for search results
"""
type CookBookSearchRecipeItem {
    """
    id of the recipe
    """
    id: Int!

    """
    Meta information about the recipe
    """
    meta: CookBookRecipeMeta!

    """
    title of the recipe
    """
    title: String!

    """
    Basic user information
    """
    user: CookBookSearchRecipeUser!
}

"""
Found recipes based upon your search
"""
type CookBookSearchRecipeResult {
    """
    page
    """
    page: PageInfo

    """
    results
    """
    result: [CookBookSearchRecipeItem!]
}

"""
User info
"""
type CookBookSearchRecipeUser {
    """
    User city name
    """
    city: String

    """
    User id
    """
    id: Int!

    """
    User name
    """
    name: String!
}

"""
Found books based upon your search
"""
type CookBookSearchResult {
    """
    page
    """
    page: PageInfo

    """
    results
    """
    result: [CookBook!]
}

"""
Statistics about the cookbook
"""
type CookBookStats {
    """
    How many other recipes are favourites
    """
    collected: Int!

    """
    How many recipes are stored
    """
    recipes: Int!

    """
    How many times was this cookbook visited
    """
    visited: Int!
}

"""
Minimal user details
"""
type CookBookUser {
    """
    All avatars are numbered and choosable by our customer
    """
    avatar: Int!

    """
    Name of city, users can be searched on their cities
    """
    city: String

    """
    Cookbook owners can activate messaging, so they can receive and sent personal messages
    """
    hasMessaging: Boolean!

    """
    User id
    """
    id: Int!

    """
    Name and surname
    """
    name: String!
}

"""
CostOverview Of an Order
"""
type CostOverview {
    """
    additionalItems (Max recursive depth: 1)
    """
    additionalItems: [AdditionalReceiptItem!]!

    """
    SubtotalPrice based on the delivery state
    """
    aggregatedSubtotalPrice: Money!

    """
    Aggregated total amount of additional items
    """
    aggregatedTotalAdditionalItems: Money!

    """
    Aggregated total bonus discount, contains negative values
    """
    aggregatedTotalBonusDiscount: Money

    """
    The amount that was deducted after the payment capture
    """
    aggregatedTotalPriceAfterDelivery: Money

    """
    Before delivery: Total price of the receipt
    After delivery: subtotalGroceries + subtotal of the additional items
    """
    aggregatedTotalPriceBeforeDelivery: Money!

    """
    The calculated total price of all settlements
    """
    aggregatedTotalPriceSettlement: Money

    """
    Amount of groceries within the order
    """
    groceriesQuantity: Int!

    """
    The price of the Groceries only. For after delivery the net Price could be different compared to
    the net price before/during delivery because of weight items and discounts
    """
    groceryNetPrice: Money!

    """
    InvoiceId
    """
    invoiceId: String

    """
    Methods used to pay the order with
    """
    paymentMethods: [PaymentMethod!] @deprecated(reason: "@sunset_date(2024-07-25) Use PaymentMethod instead \n. . ")

    """
    Payments from the order
    """
    payments: CostOverviewPayments

    """
    Primary Payment Method used for delivery
    """
    primaryPaymentMethod: PaymentMethod!

    """
    settlement Items after delivery
    """
    settlementItems: [SettlementAfterDelivery!]!
        @deprecated(reason: "@sunset_date(2023-09-21) - not in prod yet, ios,android, ah-cost-overview \n. . ")

    """
    settlement items after delivery
    """
    settlements: SettlementItems
}

"""
Payment Item
"""
type CostOverviewPaymentItem {
    """
    Transaction amount
    """
    amount: Money!

    """
    Payment Method used
    """
    method: PaymentMethod!

    """
    Title of the payment method
    """
    title: String!
}

"""
CostOverview Payments
"""
type CostOverviewPayments {
    """
    Total amount that has been paid
    """
    aggregatedAlreadyPaidTotal: Money!

    """
    Payments that are still open
    """
    alreadyPaid: [CostOverviewPaymentItem!]!

    """
    Remaining amount that needs to be paid (at the door)
    """
    toBePaid: CostOverviewPaymentItem
}

"""
Result of performing mutation
"""
type CreateDepositComplaintResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Feedback id
    """
    feedbackId: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result of performing mutation
"""
type CreateGeneralFeedbackResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Feedback id
    """
    feedbackId: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result of performing mutation
"""
type CreateProductComplaintResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Feedback id
    """
    feedbackId: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result of performing mutation
"""
type CreateProductReturnResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Feedback id
    """
    feedbackId: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
The customer
"""
type Customer {
    """
    Debit type of the customer
    """
    debitType: DebitType!

    """
    Customer default pickup location id
    """
    defaultPickupLocationId: Int

    """
    Customer instructions for delivery
    """
    deliveryInstructions: String

    """
    Customer id
    """
    id: Int!
}

"""
Customer care Article component response
"""
type CustomerCareArticle implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Customer Care Link Box Lane Data
    """
    data: CustomerCareArticleData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Customer care Article component data
"""
type CustomerCareArticleData {
    """
    Article body
    """
    body: String

    """
    Article title
    """
    title: String
}

"""
Customer care article detail
"""
type CustomerCareArticleDetail {
    """
    Root Components
    """
    components: [CustomerCareArticleDetailComponents!]!

    """
    This field contains meta data that is needed for SEO purposes (title, description, etc)
    """
    pageMeta: ContentPageMeta!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData
}

"""
Components for customer care article detail page
"""
union CustomerCareArticleDetailComponents =
    | ContentAccordion
    | ContentButtonlane
    | ContentTitle
    | CustomerCareArticleGrid
    | CustomerCareBreadCrumbs
    | CustomerCareHeader

"""
Grid for artciles
"""
type CustomerCareArticleGrid implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Customer Care Article Grid Data
    """
    data: CustomerCareArticleGridData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Article Grid Card
"""
type CustomerCareArticleGridCard {
    """
    body
    """
    body: String!

    """
    cardType
    """
    cardType: String!

    """
    call to action
    """
    cta: CustomerCareArticleGridCardCTA

    """
    title
    """
    title: String!
}

"""
Article Grid Card call to action
"""
type CustomerCareArticleGridCardCTA {
    """
    is external
    """
    externalLink: Boolean!

    """
    href
    """
    href: String!

    """
    target
    """
    target: String!

    """
    title
    """
    title: String!
}

"""
Customer Care Article Grid Data
"""
type CustomerCareArticleGridComponent {
    """
    cards
    """
    cards: [CustomerCareArticleGridCard]!

    """
    title
    """
    title: String!
}

"""
Customer Care Article Grid Data
"""
type CustomerCareArticleGridData {
    """
    Customer Care Article Grid
    """
    grid: CustomerCareArticleGridComponent
}

"""
Customer care article overview
"""
type CustomerCareArticleOverview {
    """
    Root Components
    """
    components: [CustomerCareArticleOverviewComponents!]!

    """
    This field contains meta data that is needed for SEO purposes (title, description, etc)
    """
    pageMeta: ContentPageMeta!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData
}

"""
Components for customer care article overview page
"""
union CustomerCareArticleOverviewComponents =
    | ContentButtonlane
    | CustomerCareArticle
    | CustomerCareArticleGrid
    | CustomerCareBreadCrumbs
    | CustomerCareHeader

"""
Breadcrumb component
"""
type CustomerCareBreadCrumb {
    """
    should open in a new tab
    """
    externalLink: Boolean!

    """
    Breadcrumb link
    """
    href: String!

    """
    Breadcrumb title
    """
    title: String!
}

"""
Breadcrumb data object
"""
type CustomerCareBreadCrumbData {
    """
    Crumbs for BreadCrumb
    """
    links: [CustomerCareBreadCrumb!]!
}

"""
Breadcrumb cms component response
"""
type CustomerCareBreadCrumbs implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Customer Care Link Box Lane Data
    """
    data: CustomerCareBreadCrumbData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
List of all customer care channels
"""
union CustomerCareChannel = ChatChannel | PhoneChannel

"""
Customer care Article component response
"""
type CustomerCareHeader implements ContentBaseCMSComponent {
    """
    Anchor ID
    """
    anchorId: String

    """
    Component Render Status (Whether the component is fully returned or not. This is used for lazy loading components.)
    """
    componentStatus: ContentCMSComponentStatus!

    """
    Customer Care Header data
    """
    data: CustomerCareHeaderData

    """
    ID
    """
    id: String!

    """
    This field contains data that is needed for CMS Experience Manager
    to display components in preview mode.
    """
    previewData: ContentPreviewData

    """
    Tag Level
    """
    tagLevel: Int

    """
    Component Type
    """
    type: ContentCMSComponentType!
}

"""
Customer care Header component
"""
type CustomerCareHeaderComponent {
    """
    offset
    """
    hasOffset: Boolean

    """
    taglevel
    """
    tagLevel: Int

    """
    title
    """
    title: String
}

"""
Customer care Header data
"""
type CustomerCareHeaderData {
    """
    Customer care Header
    """
    header: CustomerCareHeaderComponent
}

"""
Order details for the quick links lane
"""
type CustomerCareQuickLinkLaneOrderDetail {
    """
    Message about the order or delivery track trace
    """
    message: String

    """
    Id of the order
    """
    orderId: Int!

    """
    If order is editable
    """
    reopenable: Boolean!

    """
    Settlement details for the order
    """
    settlement: CustomerCareQuickLinkLaneSettlementDetails

    """
    Track and trace status
    """
    status: DeliveryTrackTraceInformationState!

    """
    Subtitle for the quick links order module
    """
    subTitle: String!

    """
    Title for the quick links order module
    """
    title: String!
}

"""
Settlment information for order
"""
type CustomerCareQuickLinkLaneSettlementDetails {
    """
    The amount of the settlement
    """
    amount: Money!

    """
    The label to display
    """
    label: String!
}

"""
Store visit details for the quick links lane
"""
type CustomerCareQuickLinkLaneStorePurchaseDetail {
    """
    A custom message about the store purchase
    """
    message: String

    """
    Id of the purchase
    """
    purchaseId: String

    """
    subTitle for the quick links store module
    """
    subTitle: String!

    """
    Title for the quick links store module
    """
    title: String!
}

"""
Settlment for the 'mijn verrekeningen' page
"""
type CustomerCareSettlement {
    """
    money
    """
    amount: Money!

    """
    is the settlement cancelable
    """
    cancelable: Boolean!

    """
    customer comment
    """
    comment: String

    """
    formatted datelabel of the creation date of the settlement
    """
    dateLabel: String!

    """
    formatted feedback label
    """
    feedbackLabel: String

    """
    The id of the settlement
    """
    id: String!

    """
    ids of uploaded images
    """
    imageIds: [String!]!

    """
    the order if any
    """
    order: Order

    """
    the product if any
    """
    product: Product

    """
    subtitle
    """
    subtitle: String!

    """
    title
    """
    title: String!
}

"""
union of all baskets for the mijn verrekeningen page
"""
union CustomerCareSettlements =
    | CustomerCareSettlementsBank
    | CustomerCareSettlementsDeliverer
    | CustomerCareSettlementsInvoice

"""
Settlements with refund method bank
"""
type CustomerCareSettlementsBank {
    """
    conclusion of all the settlements combined
    """
    conclusion: String

    """
    the refund method
    """
    refundMethod: SettlementRefundMethod!

    """
    all open settlements with refund method bank
    """
    settlements: [CustomerCareSettlement!]!

    """
    title for the bucket
    """
    title: String!
}

"""
Settlements with refund method deliverer
"""
type CustomerCareSettlementsDeliverer {
    """
    conclusion of all the settlements combined
    """
    conclusion: String

    """
    the refund method
    """
    refundMethod: SettlementRefundMethod!

    """
    all open settlements with refund method deliverer
    """
    settlements: [CustomerCareSettlement!]!

    """
    title for the bucket
    """
    title: String!
}

"""
Settlements with refund method invoice
"""
type CustomerCareSettlementsInvoice {
    """
    conclusion of all the settlements combined
    """
    conclusion: String

    """
    the refund method
    """
    refundMethod: SettlementRefundMethod!

    """
    all open settlements with refund method invoice
    """
    settlements: [CustomerCareSettlement!]!

    """
    title for the bucket
    """
    title: String!
}

"""
The customer care mijn verrekeningen page
"""
type CustomerCareSettlementsPage {
    """
    Open settlemnts for settlement method deliverer, bank and invoice
    """
    settlements: [CustomerCareSettlements!]!
}

"""
Store
"""
type CustomerCareStore {
    """
    The address of the store
    """
    address: CustomerCareStoreAddress!

    """
    The id of the store
    """
    id: Int!
}

"""
Store address
"""
type CustomerCareStoreAddress {
    """
    The city
    """
    city: String!

    """
    The housnumber where the store is located
    """
    houseNumber: String!

    """
    The postcal code
    """
    postalCode: String!

    """
    The street where the store is located
    """
    street: String!
}

type CustomerMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Customer after performing mutation
    """
    result: Customer

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Search response document type
"""
enum CustomerServiceDocumentType {
    """
    Article type for a single "search hit"
    """
    CUSTOMER_SERVICE_ARTICLE

    """
    Page type for a single "search hit"
    """
    CUSTOMER_SERVICE_PAGE
}

"""
Customer service search hit
"""
type CustomerServiceSearchHit {
    """
    The description can contain html
    """
    description: String

    """
    The returned document type
    """
    documentType: String!

    """
    The text in the article, available if documentType is of CUSTOMER_SERVICE_ARTICLE
    """
    text: String

    """
    The title of the search result
    """
    title: String!

    """
    The URL of the search result
    """
    url: String!
}

"""
Search response
"""
type CustomerServiceSearchResponse {
    """
    Boolean to check if there are more results/pages
    """
    hasNextPage: Boolean!

    """
    All the returned searchHits
    """
    searchHits: [CustomerServiceSearchHit!]!

    """
    Amount of total articles found for the Query
    """
    totalHits: Int!
}

"""
Search suggestion
"""
type CustomerServiceSuggestion {
    """
    The title of the suggestion
    """
    title: String!

    """
    The url of the suggestion
    """
    url: String!
}

"""
Search suggestion response
"""
type CustomerServiceSuggestionResponse {
    """
    Suggestions returned based on search term
    """
    suggestions: [CustomerServiceSuggestion!]!
}

"""
Onboarding result
"""
type DCTOnboardingResult {
    """
    Reference id of the external token
    """
    externalTokenReference: String

    """
    https://developer.mastercard.com/mastercard-checkout-solutions/documentation/use-cases/card-on-file/card-enrollment/scof-push-acc-receipt/
    """
    pushAccountReceipt: String!

    """
    Onboarding response code
    """
    responseCode: PaymentsTokenOnboardingResponseCode!
}

"""
A date (yyyy-MM-dd)
"""
scalar Date

"""
A datetime in ISO8601 format
"""
scalar DateTime

"""
Debit Type
"""
enum DebitType {
    """
    Direct Debit value
    """
    DIRECT_DEBIT

    """
    Invoice Debit value
    """
    INVOICE

    """
    None value
    """
    NONE
}

"""
Delete member recipe result
"""
type DeleteMemberRecipeMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded or failed
    """
    status: MutationResultStatus!
}

"""
Delivery belonging to order
"""
type Delivery {
    """
    Address of delivery
    """
    address: DeliveryAddress

    """
    Address formatted as single line
    """
    addressSingleLine: String

    """
    Date delivered
    """
    date: String!

    """
    Date delivered formatted for display
    """
    dateDisplay: String!

    """
    Short delivery display date
    """
    dateDisplayShort: String

    """
    Additional information for the deliverer
    """
    delivererMessage: String

    """
    Id of the delivery location
    """
    deliveryLocationId: Int!

    """
    End time of delivery
    """
    endTime: String!

    """
    Id of delivery (this is equal to the orderId)
    """
    id: Int!

    """
    The method of the delivery
    """
    method: DeliveryMethod!

    """
    Offset of delivery
    """
    offset: String

    """
    Pickup information
    """
    pickup: DeliveryPickup

    """
    Id of the pickup location
    """
    pickupLocationId: Int

    """
    Shift code
    """
    shiftCode: String!

    """
    Slot for delivery
    """
    slot: String

    """
    State time of delivery
    """
    startTime: String!

    """
    Status of delivery
    """
    status: DeliveryStatus!

    """
    Track and trace information for a delivery
    """
    trackTrace: DeliveryTrackTraceInformation
}

"""
Address delivered to
"""
type DeliveryAddress {
    """
    City
    """
    city: String!

    """
    Country Code Alpha 3
    """
    countryCode: String!

    """
    House number
    """
    houseNumber: Int!

    """
    House number extra
    """
    houseNumberExtra: String

    """
    Street
    """
    street: String!

    """
    Zip Code
    """
    zipCode: String!
}

"""
Description for a Delivery Bundle subscription including terms and pricing
"""
type DeliveryBundle {
    """
    Delivery Bundle type code
    """
    code: String!

    """
    Chosen personal delivery days
    """
    deliveryDays: DeliveryBundleDeliveryDays!

    """
    Human readable description
    """
    description: String!

    """
    Contract length of the delivery bundle subscription
    """
    duration: DeliveryBundleDuration!

    """
    Delivery bundle identifier
    """
    id: ID!

    """
    Pricing per month and per duration
    """
    price: DeliveryBundlePrice!

    """
    Pricing per month and per duration without discount
    """
    priceBeforeDiscount: DeliveryBundlePrice!
}

"""
Delivery Bundle subscription cancellation specification
"""
type DeliveryBundleCancellation {
    """
    Shows the date the subscription will be cancelled on after a user choose to cancel it, null if not cancelled
    """
    date: Date

    """
    First possible cancellation date option, null if the option isn't possible
    """
    earliestDate: Date

    """
    Last possible cancellation date option, null if the option isn't possible
    """
    latestDate: Date
}

"""
Chosen days to receive deliveries
"""
enum DeliveryBundleDeliveryDays {
    """
    Delivery on peak days
    """
    MONDAY_SATURDAY

    """
    Delivery on off-peak days
    """
    TUESDAY_THURSDAY
}

"""
Contract length of Delivery Bundle subscription
"""
enum DeliveryBundleDuration {
    """
    6 month subscription
    """
    HALF_YEAR

    """
    1 month subscription
    """
    ONE_MONTH

    """
    3 month subscription
    # TODO
    # not available to new customers
    # should throw error if someone tries to set this as period
    """
    THREE_MONTHS

    """
    1 year subscription
    """
    YEAR
}

"""
Description of next delivery bundle subscription
"""
type DeliveryBundleNextSubscription {
    """
    Delivery Bundle type code
    """
    code: String!

    """
    Human readable description
    """
    description: String!

    """
    Subscription identifier
    """
    id: ID!

    """
    Amount customer will pay for the next subscription
    """
    price: Money!

    """
    When the subscription will start
    """
    startDate: String!
}

"""
Available iDeal issuers
"""
type DeliveryBundlePaymentIDealIssuer {
    """
    Logo brand image of iDeal issuer
    """
    brandUrl: String!

    """
    Reference ID of iDeal issuer
    """
    id: Int!

    """
    Name of iDeal issuer
    """
    name: String!
}

"""
Payment status of a delivery bundle
"""
enum DeliveryBundlePaymentStatus {
    """
    Payment has been cancelled
    """
    CANCELLED

    """
    Payment has been completed
    """
    COMPLETED

    """
    Payment has expired
    """
    EXPIRED

    """
    Payment has failed
    """
    FAILURE

    """
    Payment is newly created
    """
    NEW

    """
    Payment is open
    """
    OPEN
}

"""
Delivery Bundle pricing specification
"""
type DeliveryBundlePrice {
    """
    Price for entire duration
    """
    duration: Money!

    """
    Monthly price
    """
    monthly: Money!
}

"""
Pricing calculation to upgrade or downgrade Delivery Bundle
"""
type DeliveryBundlePriceToChange {
    """
    Human readable description of change in bundle
    """
    description: String!

    """
    Human readable description of applied discount
    """
    discountDescription: String!

    """
    Price going forward after making changing delivery bundle
    """
    price: Money!

    """
    Price before discount going forward after changing delivery bundle
    """
    priceBeforeDiscount: Money!
}

"""
Delivery Bundle next renewal pricing specification
"""
type DeliveryBundleRenewal {
    """
    Date renewal will occur
    """
    date: String!

    """
    Amount deducted on renewal date
    """
    price: Money!
}

"""
When an order for a member with a delivery bundle subscription will be delivered
"""
type DeliveryBundleSlot implements IDeliverySlot {
    """
    Date of delivery slot
    """
    date: String!

    """
    Begin time of range where delivery may be expected
    """
    from: String!

    """
    Whether the moment is favourite or not
    """
    isFavourite: Boolean!

    """
    Whether the delivery slot is preferred or not
    """
    isPreferred: Boolean!

    """
    End time of range where delivery may be expected
    """
    until: String!
}

"""
A Delivery Bundle customer subscription
"""
type DeliveryBundleSubscription {
    """
    Subscription cancellation options and a the cancellation date
    """
    cancellation: DeliveryBundleCancellation!

    """
    Delivery Bundle type code
    """
    code: String!

    """
    Delivery days of the subscription
    """
    deliveryDays: DeliveryBundleDeliveryDays!

    """
    Last day of the subscription, null if not active
    """
    endDate: String

    """
    Delivery bundle identifier
    """
    id: ID!

    """
    Whether the subscription is activated and can be used
    """
    isActive: Boolean!

    """
    Whether the subscription can be changed
    """
    isChangeable: Boolean!

    """
    What the next subscription type will be
    """
    nextSubscription: DeliveryBundleNextSubscription

    """
    The monthly price of the subscription
    """
    price: Money!

    """
    Next renewal, null if already canceled
    """
    renewal: DeliveryBundleRenewal
}

"""
Method of Delivery
"""
enum DeliveryMethod {
    """
    Delivery at a member's location
    """
    HOME_DELIVERY

    """
    Delivery at a pickup location
    """
    PICKUP

    """
    Delivery at a member specific pickup location
    """
    PICKUP_HOME_DELIVERY

    """
    Unknown method
    """
    UNKNOWN
}

"""
Delivery Notification
"""
type DeliveryNotification implements Notification {
    """
    Delivery date info
    """
    dateInfo: String!

    """
    Icon name that is shown on the notification
    """
    icon: NotificationIcon!

    """
    Notification ID
    """
    id: String!

    """
    Link object with title and href
    """
    link: NotificationLink!

    """
    Type of notification
    """
    type: NotificationType!
}

"""
Order pickup information
"""
type DeliveryPickup {
    """
    Id of pickup delivery
    """
    id: String!
}

"""
When an order will be delivered
"""
type DeliverySlot implements IDeliverySlot {
    """
    Date of delivery slot
    """
    date: String!

    """
    Begin time of range where delivery may be expected
    """
    from: String!

    """
    Whether the delivery slot is preferred or not
    """
    isPreferred: Boolean

    """
    End time of range where delivery may be expected
    """
    until: String!
}

"""
Status of delivery
"""
enum DeliveryStatus {
    """
    The delivery has been cancelled
    """
    CANCELLED

    """
    The delivery has been delivered
    """
    DELIVERED

    """
    The order has been created, but a block has not yet been chosen.
    """
    ENTERED

    """
    The delivery has been created with a timeslot that is valid for 1.5 hours
    """
    ENTERED_WITH_DELIVERY_BLOCK

    """
    The delivery is being packaged
    """
    PACKAGING

    """
    The order belonging to the delivery has been reopened
    """
    REOPENED

    """
    The delivery has been submitted and a timeslot has been reserved
    """
    SUBMITTED

    """
    The order cannot be altered and is being processed (picked/packed)
    """
    SUBMITTED_WITH_SHORTREC_ETA

    """
    The order cannot be altered and is being transported to destination
    """
    SUBMITTED_WITH_SIMACAN_ETA

    """
    Unknown status
    """
    UNKNOWN
}

"""
Delivery Information contains information about the delivery of an order
"""
type DeliveryTrackTraceInformation {
    """
    A message that can be displayed
    """
    deliveryMessage: String!

    """
    The state of delivery
    """
    deliveryState: DeliveryTrackTraceInformationState!

    """
    The estimated end time
    """
    endEstimatedTimeArrival: DateTime

    """
    Boolean that can determines if the message contained an ETA
    """
    messageContainsDeliveryEta: Boolean!

    """
    A list of messages sent to the users device
    """
    messages: [DeliveryTrackTraceInformationMessage!]!

    """
    orderId
    """
    orderId: Int!

    """
    The type of the order
    """
    orderType: DeliveryTrackTraceInformationOrderType!

    """
    The state of pickup
    """
    pickupState: DeliveryTrackTraceInformationState!

    """
    The actual/realised delivery time
    """
    realisedDeliveryTime: DateTime

    """
    The estimated start time
    """
    startEstimatedTimeArrival: DateTime

    """
    The order state
    """
    state: DeliveryTrackTraceInformationState!

    """
    The amount of stops the 'bezorger' has to make before delivering the order to your address
    """
    stopsLeftBeforeThisOrder: Int
}

"""
A message about the delivery that can be displayed
"""
type DeliveryTrackTraceInformationMessage {
    """
    The text of the message
    """
    text: String!

    """
    The type of the message
    """
    type: DeliveryTrackTraceInformationMessageType!
}

"""
The type of the message
"""
enum DeliveryTrackTraceInformationMessageType {
    """
    Default type used for notifications etc.
    """
    DISPLAY

    """
    Used for google assistant
    """
    SPEECH
}

"""
The type of order
"""
enum DeliveryTrackTraceInformationOrderType {
    """
    DELIVERY
    """
    DELIVERY

    """
    DELIVERY_POINT
    """
    DELIVERY_POINT

    """
    IN_STORE_PICK
    """
    IN_STORE_PICK

    """
    PHYSICAL_STORE
    """
    PHYSICAL_STORE

    """
    PICKUP
    """
    PICKUP

    """
    PICKUP_DELIVERY
    """
    PICKUP_DELIVERY

    """
    SPECIALS_ONLY
    """
    SPECIALS_ONLY

    """
    UNKNOWN
    """
    UNKNOWN
}

"""
List of possible states the order or delivery can have
"""
enum DeliveryTrackTraceInformationState {
    """
    CANCELLED
    """
    CANCELLED

    """
    DELIVERED
    """
    DELIVERED

    """
    INCIDENT
    """
    INCIDENT

    """
    IN PREPERATION
    """
    IN_PREPARATION

    """
    ORDERED
    """
    ORDERED

    """
    OUT FOR DELIVERY
    """
    OUT_FOR_DELIVERY

    """
    PICKED UP
    """
    PICKED_UP

    """
    REOPENED
    """
    REOPENED

    """
    TO BE PICKED UP
    """
    TO_BE_PICKED_UP

    """
    UNKNOWN
    """
    UNKNOWN
}

"""
The deposit item that the complaint is about
"""
type DepositComplaintDepositItem {
    """
    Explanations about the deposit state
    """
    explanations: [DepositComplaintExplanation!]!

    """
    The deposit item label
    """
    label: String!

    """
    Item quantities in the order
    """
    quantities: DepositComplaintDepositItemQuantities!

    """
    The item the deposit is for
    """
    type: DepositComplaintDepositType!
}

"""
Quantity properties for the deposit item
"""
type DepositComplaintDepositItemQuantities {
    """
    amount of items that can be claimed
    """
    claimable: Int!

    """
    amount of items has already been claimed
    """
    claimed: Int!

    """
    amount of items that has been settled on delivery
    """
    settledByDeliverer: Int!
}

"""
The type of deposit
"""
enum DepositComplaintDepositType {
    BEER_BOTTLE
    BEER_CRATE_12_BOTTLES
    BEER_CRATE_16_OR_24_BOTTLES
    CAN
    FLIP_TOP_BOTTLE
    FOLDING_CRATE
    PET_BOTTLE_LARGE
    PET_BOTTLE_SMALL
    PLASTIC_BAG
}

"""
Explanations
"""
type DepositComplaintExplanation {
    """
    Explanation label
    """
    label: String

    """
    Explanation type
    """
    type: DepositComplaintExplanationType!
}

"""
Explanation type
"""
enum DepositComplaintExplanationType {
    SETTLED_BY_DELIVERER
    SUBMITTED
}

"""
Order eligible to deposits
"""
type DepositComplaintOrder {
    """
    Is the order eligible for returns
    """
    claimStatus: DepositComplaintStatus!

    """
    Delivery slot end time
    """
    deliveryEndTime: String

    """
    Delivery slot start time
    """
    deliveryStartTime: String

    """
    is of the order
    """
    id: String!

    """
    Shopping type of the order
    """
    shoppingType: DepositComplaintShoppingType!

    """
    Delivery address
    """
    transactionAddress: DepositComplaintOrderAddress!

    """
    Date time of the delivery slot
    """
    transactionDateTime: String!
}

"""
The adress of the delivery
"""
type DepositComplaintOrderAddress {
    """
    The city of the delivery
    """
    city: String

    """
    The housenumber of the delivery
    """
    houseNumber: String

    """
    The postalcode of the delivery
    """
    postalCode: String

    """
    The street of the delivery
    """
    street: String
}

"""
Optional reimbursement
"""
enum DepositComplaintReimbursementOption {
    FEEDBACK_ONLY
    REIMBURSEMENT
}

"""
Shopping type of the order
"""
enum DepositComplaintShoppingType {
    """
    delivery
    """
    DELIVERY

    """
    delivery point
    """
    DELIVERY_POINT

    """
    in store pick
    """
    IN_STORE_PICK

    """
    store
    """
    PHYSICAL_STORE

    """
    pickup
    """
    PICKUP

    """
    pickup delivery
    """
    PICKUP_DELIVERY

    """
    specials only
    """
    SPECIALS_ONLY

    """
    unkown
    """
    UNKNOWN
}

"""
Status of the order for deposit complaints
"""
enum DepositComplaintStatus {
    """
    The order contains deposits that can be returned
    """
    CLAIMABLE

    """
    Maximum deposits in this order have been returned
    """
    MAX_CLAIMED
}

"""
Device Challenge that is performed by verifying the device fingerprint
"""
type DeviceChallengeAction implements CheckoutChallengeAction {
    """
    The id of the authorization that is being performed on the payment
    """
    authorizationId: String!

    """
    Base 64 encoded data of the psp
    """
    data: String!

    """
    SDK Information used for the challenge
    """
    sdk: PaymentSDK

    """
    Transaction Id
    """
    transactionId: String!
}

"""
Service charge discount levels
"""
enum DiscountLevel {
    """
    Maximum charge
    """
    MAXIMUM

    """
    Normal charge
    """
    NONE

    """
    Partial charge
    """
    PARTIAL
}

"""
All available domains where the users email will be checked on
"""
enum DomainsEnum {
    AH
    ETOS
    GALL
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

"""
A type containing all information on an entry point, which is part of a component.
"""
type EntryPoint {
    """
    Deprecated old content field of entry points. Use `contentVariant` instead.
    """
    content: EntryPointContent! @deprecated(reason: "@sunset_date(2024-04-01) - Use `contentVariant` instead \n. . ")

    """
    The content to be rendered in the entry point. Contains elements such as a title,
    a subtitle, an image, background colors and the target to route to on interaction.
    """
    contentVariant: EntryPointContentVariant!

    """
    The additional metadata of the entry point.
    """
    metadata: EntryPointMetadata
}

"""
A type containing the content of a card entry point. Contains elements such as a title,
a subtitle, an action label, an image, background colors and the target to route to on
interaction.
"""
type EntryPointCardContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    The body of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic body due to an internal
    error.
    """
    body: String

    """
    The font color of the entry point. This color will be used for the text displayed
    on the entry point. The value will have the format of a hexadecimal color code: #xxxxxx.
    """
    fontColor: String!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The label of an entry point. Optional, entry points do not always have a label. Will
    also be null if the backend failed to create the dynamic label due to an internal
    error.
    """
    label: String

    """
    The label background color of an entry point. Optional, entry points do not always
    have a label background color.
    """
    labelBackgroundColors: [String!]

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    CARD for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing the content of a card extended entry point. Contains elements such as
a title, a subtitle, an action label, an image, background colors and the target to route
to on interaction.
"""
type EntryPointCardExtendedContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    The body of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic body due to an internal
    error.
    """
    body: String

    """
    The font color of the entry point. This color will be used for the text displayed
    on the entry point. The value will have the format of a hexadecimal color code: #xxxxxx.
    """
    fontColor: String!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The label of an entry point. Optional, entry points do not always have a label. Will
    also be null if the backend failed to create the dynamic label due to an internal
    error.
    """
    label: String

    """
    The label background color of an entry point. Optional, entry points do not always
    have a label background color.
    """
    labelBackgroundColors: [String!]

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic subtitle due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    CARD_EXTENDED for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing a full entry point component. This is a renderable component by a
frontend consumer and acts as a lane or page with entries to other parts of the app or
website, supporting both deeplinks and weblinks.
"""
type EntryPointComponent {
    """
    The ranked list of entry points that are part of the component. It is important
    to maintain the order of the list as the entry-point backend has determined that
    this is the order to be used by the dynamic ranking business ruling. If the backend
    failed to rank entry points, they will assume the default ranking.
    """
    entryPoints: [EntryPoint!]!

    """
    The name of the entry point component. Is unique among other entry point components,
    and is used as an easy identifier for a component. Every component has a name.
    """
    name: String!
}

"""
A type containing the content of a regular horizontal entry point. Contains elements
such as a title, a subtitle, an image, background colors and the target to route to on
interaction.
"""
type EntryPointContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    List of image renditions for the entry point.
    """
    images: [ImageSet!]! @deprecated(reason: "@sunset_date(2023-12-01) - Use `imageUrls` instead \n. . ")

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic title due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data.
    """
    title: String!
}

"""
Union type of all entry point content variants.
"""
union EntryPointContentVariant =
    | EntryPointCardContent
    | EntryPointCardExtendedContent
    | EntryPointLargeHorizontalContent
    | EntryPointLargeVerticalContent
    | EntryPointRegularHorizontalContent
    | EntryPointRegularHorizontalExtendedContent
    | EntryPointRegularVerticalContent

"""
Enum type referencing the content variant of an entry point content. Mostly used for
internal purposes to differentiate between the different content types, as GraphQL's
query language already supports fetching based on type.
"""
enum EntryPointContentVariantType {
    """
    Card Entry Point Content.
    """
    CARD

    """
    Card Extended Entry Point Content.
    """
    CARD_EXTENDED

    """
    Large Horizontal Entry Point Content.
    """
    LARGE_HORIZONTAL

    """
    Large Vertical Entry Point Content.
    """
    LARGE_VERTICAL

    """
    Regular Horizontal Entry Point Content.
    """
    REGULAR_HORIZONTAL

    """
    Regular Horizontal Extended Entry Point Content.
    """
    REGULAR_HORIZONTAL_EXTENDED

    """
    Regular Vertical Entry Point Content.
    """
    REGULAR_VERTICAL
}

"""
A type containing the content of a large horizontal entry point. Contains elements
such as a title, a subtitle, an image, background colors and the target to route to on
interaction.
"""
type EntryPointLargeHorizontalContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic subtitle due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    LARGE_HORIZONTAL for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing the content of a large vertical entry point. Contains elements
such as a title, a subtitle, an image, background colors and the target to route to on
interaction.
"""
type EntryPointLargeVerticalContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic subtitle due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    LARGE_VERTICAL for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing metadata of an entry point.
"""
type EntryPointMetadata {
    """
    The group that this entry point belongs to. Used for grouping entry points together
    under a common header, if the frontend wishes to do so, in which case the name of the
    group will be the displayable name of the header. Optional, not all entry points
    belong to a group.
    """
    group: String
}

"""
A type containing the content of a regular horizontal entry point. Contains elements
such as a title, a subtitle, an image, background colors and the target to route to on
interaction.
"""
type EntryPointRegularHorizontalContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic subtitle due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    REGULAR_HORIZONTAL for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing the content of a regular horizontal extended entry point. Contains
elements such as a title, a subtitle, an action label, an image, background colors and
the target to route to on interaction.
"""
type EntryPointRegularHorizontalExtendedContent {
    """
    The action label of the entry point. Can be displayed as part of a CTA element
    inside the button. Optional, entry points do not always have an action label. Will
    also be null if the backend failed to create the dynamic action label due to an
    internal error.
    """
    action: String

    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The label of an entry point. Optional, entry points do not always have a label. Will
    also be null if the backend failed to create the dynamic label due to an internal
    error.
    """
    label: String

    """
    The label background color of an entry point. Optional, entry points do not always
    have a label background color.
    """
    labelBackgroundColors: [String!]

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic subtitle due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    REGULAR_HORIZONTAL_EXTENDED for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing the content of a regular vertical entry point. Contains elements
such as a title, a subtitle, an image, background colors and the target to route to on
interaction.
"""
type EntryPointRegularVerticalContent {
    """
    List of background colors of the entry point. Will contain one of three options:
    no values, 1 value or 2 values. If there are 2 values, then a gradiant is meant to
    be rendered. Each value will have the format of a hexadecimal color code: #xxxxxx.
    """
    backgroundColors: [String!]!

    """
    List of image rendition URLs for the entry point.
    """
    imageUrls: [String!]!

    """
    The subtitle of the entry point. Can be built by the backend using dynamic data
    formatted into a string. Optional, entry points do not always have a subtitle. Will
    also be null if the backend failed to create the dynamic subtitle due to an internal
    error.
    """
    subtitle: String

    """
    The target to route to on interaction with the entry point.
    """
    target: EntryPointTarget!

    """
    The title of the entry point. Every entry point will always have a title, and the
    title cannot contain any dynamic data. Optional, can be null in very rare cases when
    the backend fails to format the title and there is no fallback configured.
    """
    title: String

    """
    The variant of the content. Mostly used for internal purposes, as GraphQL's query
    language already supports fetching based on type. Will always be set to
    REGULAR_VERTICAL for this type.
    """
    variantType: EntryPointContentVariantType
}

"""
A type containing the target to route to on interaction with the entry point.
"""
type EntryPointTarget {
    """
    The type of the link.
    """
    type: EntryPointTargetLinkType!

    """
    The target URI.
    """
    uri: String!
}

"""
Enum type referencing the target type of an entry point target.
"""
enum EntryPointTargetLinkType {
    """
    A deeplink, used by the mobile frontends to route to pages.
    """
    DEEPLINK

    """
    A weblink.
    """
    WEBLINK
}

"""
This property will be filled when the form end date is in the past
"""
type ExpiredNotification {
    """
    Expired description
    """
    description: String!

    """
    Expired title
    """
    title: String!
}

"""
Explanation type
"""
enum ExplanationType {
    """
    Cannot be returned
    """
    CANNOT_BE_RETURNED

    """
    Excluded from self service
    """
    EXCLUDED_FROM_SELF_SERVICE

    """
    Not delivered
    """
    NOT_DELIVERED

    """
    Processed
    """
    PROCESSED

    """
    Settled by deliverer
    """
    SETTLED_BY_DELIVERER

    """
    Submitted
    """
    SUBMITTED

    """
    WARN_FOR_SHORT_EXPIRATION
    """
    WARN_DISCOUNT_ALREADY_APPLIED

    """
    WARN_FOR_SHORT_EXPIRATION
    """
    WARN_FOR_SHORT_EXPIRATION
}

"""
Explanation with label
"""
type ExplanationWithLabel {
    """
    explanation that belongs to a feedbackType
    """
    byFeedbackTypes: [FeedbackType!]!

    """
    Label
    """
    label: String!

    """
    Type
    """
    type: ExplanationType!
}

"""
List containing a member's favorite products.
"""
type FavoriteList {
    """
    List description
    """
    description: String!

    """
    List id
    """
    id: Int!

    """
    Favorite list image. At least one product should be in the list for the image to show.
    """
    imageSet: ProductImageSet

    """
    List items, contains quantity information needed for products.
    """
    items: [FavoriteListItem!]!

    """
    Products matching the favorite list items.
    """
    products: [Product!]!

    """
    List id (will replace the "id" field later)
    """
    referenceId: String!

    """
    Indicates if a fovorite list is a shared list.
    """
    sharedBy: FavoriteListSharedBy!

    """
    Total size of items in the list
    """
    totalSize: Int!
}

"""
Items on a favorite list.
"""
type FavoriteListItem {
    """
    List item id
    """
    id: Int!

    """
    List item product ID
    """
    productId: Int!

    """
    List item quantity
    """
    quantity: Int!
}

"""
Result of a mutation done to a favorite list.
"""
type FavoriteListMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    List after performing the mutation
    """
    result: FavoriteList

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Add a product to a favorite list or update the quantity of an existing one.
"""
input FavoriteListProductMutation {
    """
    Product id of the favorite list item
    """
    productId: Int!

    """
    Quantity of the product. Defaults to 1.
    """
    quantity: Int
}

"""
Shared by enum
"""
enum FavoriteListSharedBy {
    """
    You shared this list with others
    """
    ME

    """
    Not a shared list
    """
    NOT_SHARED

    """
    Someone else shared this list with you
    """
    OTHER
}

"""
A feedback object
"""
type Feedback {
    """
    label for deposit type
    """
    depositLabel: String

    """
    the id
    """
    id: String!

    """
    if applicable the label that  matches the type of feedback
    """
    label: String

    """
    loyaltyProgram
    """
    loyaltyProgram: FeedbackLoyaltyProgram

    """
    the product
    """
    product: Product

    """
    fallback product description
    """
    productDescription: String!

    """
    How many items
    """
    quantity: Int

    """
    the rating 1-5
    """
    rating: Int

    """
    The amount of the settlement (0% 25% 50% 75% 100%)
    """
    settlementFraction: Float

    """
    the settlement
    """
    settlements: [FeedbackSettlement!]!

    """
    shoppingtype for feedback
    """
    shoppingType: FeedbackShoppingType

    """
    the type of feedback
    """
    type: FeedbackType!
}

"""
Feedback channel
"""
enum FeedbackChannel {
    AH_APP_BE
    AH_APP_NL
    AH_BE
    AH_NL
    DEALS_AH_NL
    MY_LIFESTYLE_COACH_APP
}

"""
The feedback image with url
"""
type FeedbackImageWithUrl {
    """
    The id
    """
    imageId: String!

    """
    The image url that is only valid for 5 seconds
    """
    url: String!
}

"""
The type of loyalty program
"""
enum FeedbackLoyaltyProgram {
    AH_MILES
    AH_PREMIUM
    DELIVERY_BUNDLE
    PURCHASE_STAMPS
    SAVING_CAMPAIGNS
}

"""
Order available for feedback
"""
type FeedbackOrder {
    """
    End time of the delivery slot
    """
    deliveryEndTime: String

    """
    Start time of the delivery slot
    """
    deliveryStartTime: String

    """
    Order id
    """
    id: String!

    """
    Order id
    """
    shoppingType: FeedbackOrderShoppingType!

    """
    The address of either a store where it's bought, or a home address if ordered online
    """
    transactionAddress: FeedbackOrderAddress!

    """
    Transaction date
    """
    transactionDateTime: String!
}

"""
The order address can be a store location or a home address of a customer
"""
type FeedbackOrderAddress {
    """
    Name of the city
    """
    city: String

    """
    Country code of the order
    """
    countryCode: String

    """
    House number combined with houseNumberExtra
    """
    houseNumber: String

    """
    The postal code
    """
    postalCode: String

    """
    Name of the street
    """
    street: String
}

"""
ShoppingType of the order eligible for feedback
"""
enum FeedbackOrderShoppingType {
    DELIVERY
    DELIVERY_POINT
    IN_STORE_PICK
    PHYSICAL_STORE
    PICKUP
    PICKUP_DELIVERY
    SPECIALS_ONLY
    UNKNOWN
}

"""
The settlement linked to feedback
"""
type FeedbackSettlement {
    """
    the refund amount
    """
    amount: Money!

    """
    The id
    """
    id: Int!

    """
    How many items
    """
    quantity: Int
}

"""
The type of Shopping
"""
enum FeedbackShoppingType {
    ONLINE
    STORE
}

"""
The source of feedback
"""
enum FeedbackSource {
    CES_FORM
    DEPOSIT_FORM
    FAQ
    FEEDBACK_FORM
    PRODUCT_COMPLAINT_FORM
    PRODUCT_RETURN_FORM
    SALESFORCE
}

"""
The type of feedback.
"""
enum FeedbackType {
    ACCESSIBILITY
    ACTION_CODE
    ASSORTMENT
    AVAILABILITY
    BONUS
    BONUS_PERSONAL
    CALCULATION_ERROR
    CANCELLED_BY_CUSTOMER
    CANCELLED_BY_CUSTOMER_SUPPORT
    COMPLETENESS
    CONTENT
    CORRECTION_PARTNERSHOP
    DAMAGED
    DEFROSTED
    DELIVERY_SLOTS
    DELIVERY_TIMELINESS
    DEPOSITS_EXCEED_ORDER_VALUE
    DOUBLE_PAYMENT
    FROZEN
    FUNCTIONING_APP
    FUNCTIONING_WEBSITE
    GENERAL
    GENERAL_COMPENSATION
    GENERAL_CORRECTION
    HYGIENE
    LOYALTY
    MISSING_LOAD_CARRIER
    NOT_AT_HOME
    NOT_PICKED_UP
    OUTAGE
    PACKAGING_DEPOSIT
    PAST_EXPIRY_MARGIN
    PAYMENT
    PICKUP_ORDER_COSTS
    PRICING
    QUALITY
    RETURN
    SEARCH
    SERVICE_HOURS
    SPEED
    SPOILED
    STAFF
    SUSTAINABILITY
    WRONG_DELIVERY
}

"""
Feedback type with label
"""
type FeedbackTypeWithLabel {
    """
    Label
    """
    label: String!

    """
    The feedback type
    """
    value: FeedbackType!
}

"""
Folder
"""
type Folder {
    """
    CoverUrl for the cover image (@800 resolution)
    """
    coverUrl: String!

    """
    ID
    """
    id: Int!

    """
    Time at which the folder was last set offline
    """
    offlineAt: String

    """
    Time at which the folder was last set online
    """
    onlineAt: String

    """
    Number of pages in the folder
    """
    pageCount: Int!

    """
    Folder public URL or null when the folder is still converting.
    """
    publicUrl: String!

    """
    Time at which the folder is scheduled to go offline
    """
    scheduledOfflineAt: String

    """
    Time at which the folder is scheduled to go online
    """
    scheduledOnlineAt: String

    """
    Slug
    """
    slug: String!

    """
    The Folder state see enum FolderState
    """
    state: FolderState

    """
    Title
    """
    title: String!

    """
    Details URL
    """
    url: String!
}

"""
Publication state
"""
enum FolderState {
    """
    Folder is not publicly visible.
    """
    OFFLINE

    """
    Folder is publicly visible
    """
    ONLINE
}

"""
FreeDelivery BonusSegments with the subscription
"""
type FreeDeliveryBonusSegments {
    """
    BonusSegments
    """
    bonusSegments: [BonusSegment!]
}

"""
A fulfillment is an order with additional information.
"""
type Fulfillment {
    """
    Indicates if an OCI order is approved or not
    """
    approved: Boolean

    """
    Cancaellable boolean
    """
    cancellable: Boolean!

    """
    Cancallable by the customer service boolean
    """
    cancellableByCustomerService: Boolean!

    """
    Reason why an order was cancelled.
    """
    cancellationReason: FulfillmentCancellationReason

    """
    CostOverview of the complete order
    """
    costOverview: CostOverview

    """
    Delivery
    """
    delivery: FulfillmentDelivery

    """
    Whether the order is an OCI order
    """
    isOciOrder: Boolean!

    """
    Order modifable
    """
    modifiable: Boolean!

    """
    Order id
    """
    orderId: Int!

    """
    OrderMethod of fullfilment
    """
    orderMethod: Int!

    """
    Order reaponable
    """
    reopenable: Boolean!

    """
    Total price
    """
    totalPrice: FulfillmentPrice

    """
    Transaction completed boolean
    """
    transactionCompleted: Boolean
}

"""
Reason why an order was cancelled. Only available for the fulfillment detail query.
"""
type FulfillmentCancellationReason {
    """
    An additional message explaining the cancellation for BE orders.
    """
    messageBE: String

    """
    An additional message explaining the cancellation for NL orders.
    """
    messageNL: String

    """
    Order is cancelled by the customer.
    """
    type: FulfillmentCancellationReasonType!
}

"""
Type of cancellation for a fulfillment.
"""
enum FulfillmentCancellationReasonType {
    """
    Order is cancelled because of an address change.
    """
    ADDRESS_CHANGE

    """
    Order is cancelled because not approved by the procurement system.
    """
    B2B_NOT_APPROVED

    """
    Order is cancelled by AH.
    """
    BY_AH

    """
    Order is cancelled by the customer.
    """
    BY_CUSTOMER

    """
    Order is cancelled because the minimum order value of a fixed delivery moment order wasn't reached before cut-off time.
    """
    VBM_VALUE_NOT_REACHED
}

"""
Delivery information of a fulfillment.
"""
type FulfillmentDelivery {
    """
    Delivery addresss
    """
    address: FulfillmentDeliveryAddress

    """
    Delivery address single line
    """
    addressSingleLine: String

    """
    Delivery message
    """
    deliveryMessage: String

    """
    Delivery methond
    """
    method: FulfillmentDeliveryMethod

    """
    Delivery slot
    """
    slot: FulfillmentDeliveryTime

    """
    Delivery status
    """
    status: OrderDeliveryStatus!
}

"""
Address the orders should be delivered on.
"""
type FulfillmentDeliveryAddress {
    """
    Delivery city
    """
    city: String

    """
    Delivery country code
    """
    countryCode: String

    """
    Delivery house number
    """
    houseNumber: Int

    """
    Delivery house number extra
    """
    houseNumberExtra: String

    """
    Delivery postal code
    """
    postalCode: String

    """
    Delivery street
    """
    street: String
}

"""
The method of delivery for a fulfillment.
"""
enum FulfillmentDeliveryMethod {
    """
    Home delivery
    """
    HOME_DELIVERY

    """
    Pick up delivery
    """
    PICKUP

    """
    Pick up home delivery
    """
    PICKUP_HOME_DELIVERY
}

"""
Delivery date and time estimation of a fulfillment.
"""
type FulfillmentDeliveryTime {
    """
    Delivery full date
    """
    date: String!

    """
    Delivery date display
    """
    dateDisplay: String!

    """
    Delivery short date display
    """
    dateDisplayShort: String!

    """
    Delivery day
    """
    dayDisplay: String!

    """
    Delivery time
    """
    timeDisplay: String!
}

"""
Price of a fulfillment.
"""
type FulfillmentPrice {
    """
    Price after discount
    """
    afterDiscount: Money

    """
    Price before discount
    """
    beforeDiscount: Money

    """
    Discount
    """
    discount: Money

    """
    Total price
    """
    total: Float
        @deprecated(
            reason: "@sunset_date(2023-09-01) - checked 2023-09-01 - used in ah-grid, ah-orders, ah-shoppinglist appie-android@? - Use the money type instead of float \n. . "
        )

    """
    TotalPrice
    """
    totalPrice: Money
}

"""
Whether the fulfillment is still open or already closed (or both).
"""
enum FulfillmentStatus {
    """
    Delivery status - all orders
    """
    ALL

    """
    Delivery status - closed orders
    """
    CLOSED

    """
    Delivery status - open orders
    """
    OPEN
}

"""
Result of the fulfillment query.
"""
type FulfillmentsResult {
    """
    Page info
    """
    page: PageInfo

    """
    Results
    """
    result: [Fulfillment!]
}

"""
Date range start and end date
"""
input FullfillmentDateRange {
    """
    End date from fulfillment e.g. 2023-03-26
    """
    endDate: String!

    """
    Start date from fulfillment e.g. 2023-03-26
    """
    startDate: String!
}

"""
Gender options available within Ahold
"""
enum Gender {
    """
    Female
    """
    FEMALE

    """
    IRRELEVANT
    """
    IRRELEVANT

    """
    Male
    """
    MALE
}

"""
Geolocation
"""
type GeoLocation {
    """
    latitude
    """
    latitude: Float!

    """
    longitude
    """
    longitude: Float!
}

"""
Geolocation as input
"""
input GeoLocationInput {
    """
    latitude
    """
    latitude: Float!

    """
    longitude
    """
    longitude: Float!
}

"""
Contains newsletter subscription status
"""
type GetNewsletterStatus {
    """
    The newsletter subscription status
    """
    contactSubscription: String!

    """
    Give an error object when user errors occur (using a link twice, not providing a code)
    """
    error: String
}

"""
Required information for adding a giftcard
"""
input GiftCardCredentials {
    """
    id of the giftcard (Usually the numbers under the barcode)
    """
    cardId: String!

    """
    Secret of the Card
    """
    cardSecret: String!

    """
    Id of the issuer
    """
    issuerId: Int!
}

"""
GiftCardResponseCode
"""
enum GiftCardResponseCode {
    """
    Gift Card is already connected
    """
    ALREADY_CONNECTED @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    Gift Card Approvded
    """
    APPROVED @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    GiftCard is declined
    """
    DECLINED @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    General Error
    """
    ERROR @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    Card is blocked
    """
    FORBIDDEN @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    Gift Card is not activated
    """
    NOT_ACTIVATED @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    Giftcard has no balance
    """
    NO_BALANCE @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")

    """
    Gift Card requires verification
    """
    REQUIRE_ADDITIONAL_AUTHENTICATION @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead")
}

"""
Item on a grocery list
"""
type GroceryItem {
    """
    Is the product crossed off
    """
    crossedOff: Boolean!

    """
    Grocery item id
    """
    id: String!

    """
    Position of the item in the list
    """
    position: Int!

    """
    The actual product
    """
    product: Product!

    """
    Quantity of the item
    """
    quantity: Int!
}

"""
The complete grocery list
"""
type GroceryList {
    """
    Grocery list items that are on the list
    """
    groceryItems: [GroceryItem!]!

    """
    GroceryList id
    """
    id: String!

    """
    Notes that are on the list
    """
    notes: [Note!]!

    """
    Title of the grocery list
    """
    title: String!

    """
    Type of grocery list ea SHOPPING SHARABLE
    """
    type: GroceryListType!
}

"""
GroceryList result we added the status code to indicate when a list is not found later on we can add more status codes for no persmission etc.
"""
type GroceryListGetResult {
    """
    GroceryList
    """
    groceryList: GroceryList

    """
    Relevant error message if applicable
    """
    statusCode: Int
}

"""
Result of creating a grocery list
"""
type GroceryListResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    GroceryList
    """
    groceryList: GroceryList

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Different types of grocery lists
"""
enum GroceryListType {
    FAVORITE
    SHARED
    SHOPPING
}

"""
Common Delivery slot interface
"""
interface IDeliverySlot {
    """
    Date of delivery slot
    """
    date: String!

    """
    Begin time of range where delivery may be expected
    """
    from: String!

    """
    Whether the delivery slot is preferred or not
    """
    isPreferred: Boolean

    """
    End time of range where delivery may be expected
    """
    until: String!
}

"""
Image Set
"""
type ImageSet {
    """
    Height of the image in pixels
    """
    height: Int

    """
    Url of the image
    """
    url: String!

    """
    Width of the image in pixels
    """
    width: Int
}

"""
Invoice specification
"""
type Invoice {
    """
    Invoice date
    """
    date: String!

    """
    Invoice unique id
    """
    id: String!

    """
    The unique number of the order of the invoice
    """
    orderId: String!

    """
    Cost of invoice
    """
    price: Money

    """
    url of where user can download invoice
    """
    url: String
}

"""
Input given to fetch invoices
"""
input InvoiceInput {
    """
    Amount of invoices to collect
    """
    limit: Int = 10

    """
    Starting point of invoice to collect
    """
    offset: Int = 0

    """
    OrderId to which the invoices should be connected
    """
    orderId: Int
}

"""
Result of found invoices
"""
type Invoices {
    """
    Pagination for all invoices
    """
    pagination: Pagination!

    """
    Invoices found for the user
    """
    results: [Invoice]!
}

"""
A key-value pair
"""
type KeyValue {
    """
    The key
    """
    key: String!

    """
    The value
    """
    value: KeyValueValue!
}

"""
Generic key value input for subscriptionPaymentIDealStatusV2 queryParam
"""
input KeyValueInput {
    """
    The key of the key value pair
    """
    key: String!

    """
    The value of the key value pair
    """
    value: String!
}

"""
keyvaluevalue scalar
"""
scalar KeyValueValue

"""
Link type
"""
enum LinkType {
    DEEPLINK
    PRODUCT_SHELF
    RECIPE
    THEME_PAGE
    UNKNOWN
    URL
    WEBFLOW
}

"""
Returns the type of the loyalty card
"""
enum LoyaltyCard {
    AIRMILES
    BONUS
    ETOS
    GALL
}

"""
Loyalty cards which are added to member
"""
type LoyaltyCards {
    """
    Card number transformed in an EAN-13 code
    """
    barcodeNumber: String!

    """
    Number of loyalty card
    """
    cardNumber: String!

    """
    Loyalty card type can be something like: BONUS, ETOS, GALL, AIRMILES
    """
    type: LoyaltyCard!
}

"""
A single loyalty points balance. This balance can be of a campaign of any type.
"""
type LoyaltyPointsBalance {
    """
    The balance for the given campaign.
    """
    balance: Int!

    """
    The ID of the campaign the balance belongs to.
    """
    programId: Int!
}

"""
A single loyalty points transaction. These transactions indicate additions or removals
of loyalty points from a member's loyalty points balance.
"""
type LoyaltyPointsTransaction {
    """
    The amount of points involved in the transaction. Can be both positive and negative.
    """
    amount: Int!

    """
    The date and time at which the transaction took place.
    """
    dateTime: DateTime!

    """
    The reason of the transaction.
    """
    reason: LoyaltyPointsTransactionReason!
}

"""
A page containing transactions. This type also has a pagination object attached to it
with information on the pagination object that was passed along.
"""
type LoyaltyPointsTransactionPage {
    """
    The pagination object with more information on this page's pagination object.
    """
    pagination: LoyaltyPointsTransactionPagination!

    """
    The list of transactions on this page. Can be empty if there are no more transactions
    given the input pagination parameters.
    """
    transactions: [LoyaltyPointsTransaction!]!
}

"""
A pagination object containing information on the page of transactions that was
returned.
"""
type LoyaltyPointsTransactionPagination {
    """
    The pagination session key. To be attached on subsequent calls to ensure that
    transactions do not randomly jump in case of new transactions.
    """
    key: String!

    """
    The limit of items on the page.
    """
    limit: Int!

    """
    The offset of the page.
    """
    offset: Int!
}

"""
An enum to indicate the reason for a transaction.
"""
enum LoyaltyPointsTransactionReason {
    """
    A correction by a store employee or the customer service department. For example, a
    customer complained that they did not receive any loyalty points after a store transaction.
    """
    CORRECTION

    """
    Transaction as part of stamp sharing flows. For example, a customer has received or sent
    loyalty points to another customer.
    """
    GIFT

    """
    Transaction as part of (regular) activity online. For example, a customer has placed
    an order and has received loyalty points as a result of that.
    """
    ONLINE

    """
    Boosted transaction (Premium) as part of (regular) activity online. For example, a customer
    has placed an order and has received double loyalty points due to Premium as a result of that.
    """
    ONLINE_BOOSTED

    """
    Transaction as part of (regular) activity in the store. For example, a customer has
    bought products and received loyalty points as part of it. Or a customer has redeemed
    loyalty points for a discount on a loyalty product.
    """
    STORE

    """
    Boosted transaction (Premium) as part of (regular) activity in the store. For example,
    a customer has bought products and received double loyalty points due to Premium as part
    of it.
    """
    STORE_BOOSTED

    """
    The reason for the transaction is unknown. This should not happen often and might
    indicate a data problem.
    """
    UNKNOWN
}

"""
Represents a loyalty program, including basic program information and content.
"""
type LoyaltyProgram {
    """
    The program's displayable content to users. Might be null if no content was set up for
    this program.
    """
    content: LoyaltyProgramContent

    """
    The program's ID.
    """
    id: Int!

    """
    The name of the program. Might not always be suitable for display to users.
    """
    name: String!

    """
    The program's redeemable products. Might be an empty array if this program does not
    have any redeemable products. Might be null when the products could not be resolved.
    """
    products: [LoyaltyProgramProduct!]

    """
    The period in which users can redeem points for this program. Nullable, as
    not all programs are tied to a period (e.g. AH to go or Koopzegels)
    """
    redeemPeriod: LoyaltyProgramPeriod

    """
    The period in which users can save points for this program. Nullable, as
    not all programs are tied to a period (e.g. AH to go or Koopzegels).
    """
    savingPeriod: LoyaltyProgramPeriod

    """
    The current state of the program, derived by the backend from the periods.
    """
    status: LoyaltyProgramState!

    """
    The type of the program.
    """
    type: LoyaltyProgramType!
}

"""
Basic information about the program that can be displayed.
"""
type LoyaltyProgramAboutContent {
    """
    A body containing content about the program. Can contain rich text, which is enriched with
    HTML tags for text formatting. Be aware of this, and always process the data in this field
    with a text enricher before displaying it to the user.
    """
    body: String

    """
    An image to be displayed alongside the about content. Might be empty if no images are
    configured.
    """
    image: [ImageSet!]!

    """
    The title of the content about the program.
    """
    title: String
}

"""
Information on the reusable banner of a program.
"""
type LoyaltyProgramBannerContent {
    """
    The banner's body.
    """
    body: String

    """
    The banner's call to action.
    """
    cta: LoyaltyProgramCtaContent

    """
    The banner's image set. Might be empty if no images are configured.
    """
    image: [ImageSet!]!

    """
    The banner's theme.
    """
    theme: String @deprecated(reason: "@sunset_date(2023-09-01) - use themeConfiguration.theme instead. \n. . ")

    """
    The configuration of the banner's theme, containing the colors and/or images to be
    displayed.
    """
    themeConfiguration: ContentThemeConfiguration

    """
    The banner's title.
    """
    title: String
}

"""
The main type containing all displayable program content.
"""
type LoyaltyProgramContent {
    """
    Information on a program in the form of formatted / rich text.
    """
    about: LoyaltyProgramAboutContent

    """
    Information on a generic banner that can be used as a CTA for the program. Think about
    things like "View products" or "Share stamps".
    """
    banner: LoyaltyProgramBannerContent

    """
    Information on the main Call To Action (CTA) of the program.
    """
    cta: LoyaltyProgramCtaContent

    """
    An URL for Easter Egg content.
    """
    easterEgg: String

    """
    Frequently Asked Questions that are attached to this program. Might be null if no FAQ
    document is attached in the CMS.
    """
    faq: LoyaltyProgramQuestionsContent

    """
    Information on a generic banner that can be used as a header or hero for the program.
    Think about things like a header on the list of redeemable products or above a section
    with details on the program.
    """
    heroBanner: LoyaltyProgramHeroBannerContent

    """
    Information on links related to the program, such as the Terms & Conditions or the web
    pages with more details on the program.
    """
    links: LoyaltyProgramLinks

    """
    Information on the stamps of the program, such as the image of a stamp, the image of
    an empty spot where a stamp could be and the number of stamps that make up a full card.
    """
    stamps: LoyaltyProgramStampContent

    """
    The subtitle of the program.
    """
    subtitle: String

    """
    The theme of the program.
    """
    theme: String @deprecated(reason: "@sunset_date(2023-09-01) - use themeConfiguration.theme instead. \n. . ")

    """
    The configuration of a theme, containing the colors and/or images to be displayed.
    """
    themeConfiguration: ContentThemeConfiguration

    """
    The title of the program.
    """
    title: String
}

"""
Information on a CTA of a program.
"""
type LoyaltyProgramCtaContent {
    """
    The place to link to when interacting with the CTA. Can be a deeplink or a web link.
    """
    link: String

    """
    The type of the CTA link.
    """
    linkType: LoyaltyProgramCtaLinkType

    """
    The text to display in the CTA (button).
    """
    text: String
}

"""
Type of the CTA link.
"""
enum LoyaltyProgramCtaLinkType {
    """
    The link is a deep link.
    """
    DEEPLINK

    """
    The link is a web link.
    """
    WEBLINK
}

"""
Information on the reusable hero banner of a program. Differs from a regular banner as
a hero banner does not contain any CTA.
"""
type LoyaltyProgramHeroBannerContent {
    """
    The banner's image set. Might be empty if no images are configured.
    """
    image: [ImageSet!]!

    """
    The banner's theme.
    """
    theme: String @deprecated(reason: "@sunset_date(2023-09-01) - use themeConfiguration.theme instead. \n. . ")

    """
    The configuration of the banner's theme, containing the colors and/or images to be
    displayed.
    """
    themeConfiguration: ContentThemeConfiguration

    """
    The banner's title.
    """
    title: String
}

"""
The program's external links.
"""
type LoyaltyProgramLinks {
    """
    A link to a place that contains more details on the program. Examples could be a theme
    page in the app (deeplink) or a link to a web page.
    """
    details: String

    """
    A link to a place that contains the terms & conditions of the program.
    """
    termsAndConditions: String
}

"""
A type containing a period between two dates.
"""
type LoyaltyProgramPeriod {
    """
    End date of the period.
    """
    end: Date!

    """
    Start date of the period.
    """
    start: Date!
}

"""
A redeemable product as part of a program. Contains the resolved product from the
product-resolver, as well as the overrides defined for the product. These overrides
should be applied on the resolved products' data. For example, if the overrides
contains a different product title, then it should override the NASA product's title.
"""
type LoyaltyProgramProduct {
    """
    The product overrides. These values should override the values from the resolved
    NASA product.
    """
    overrides: LoyaltyProgramProductOverrides

    """
    The number of points needed to redeem this product.
    """
    points: Int!

    """
    The product as resolved through the product-resolver.
    """
    product: Product!
}

"""
Defines the content overrides for a LoyaltyProgramProduct.
"""
type LoyaltyProgramProductOverrides {
    """
    The base price of the product, or the "guidance" price.
    """
    basePrice: Money!

    """
    The discounted price of the product, which is the price you can buy the
    product for if you have a full card.
    """
    discountedPrice: Money!
}

"""
A Frequently Asked Question (FAQ) with an answer attached to it.
"""
type LoyaltyProgramQuestionContent {
    """
    Link to a webpage containing the question.
    """
    link: String

    """
    The rich text of the FAQ's answer. Note that this is rich text, containing HTML
    tags. These should be parsed correctly to prevent them from being shown to the
    customer. Might be null.
    """
    text: String

    """
    The title of the FAQ, which most likely is also the question that a customer could
    ask for.
    """
    title: String
}

"""
Content related to the Frequently Asked Questions (FAQs) of a program. These are derived
from the global search on the website, e.g. when searching for "oven", you'll find some
customer service pages with FAQ questions on them.
"""
type LoyaltyProgramQuestionsContent {
    """
    Whether there are more questions available that weren't returned in the "questions"
    list. The content-facade only returns the first 5 questions.
    """
    hasMoreQuestions: Boolean!

    """
    List of FAQs with answers. Might be empty if there are no FAQs defined. Only contains
    the first 5 questions, see the "hasMoreQuestions" boolean if there are more than 5
    configured.
    """
    questions: [LoyaltyProgramQuestionContent!]!

    """
    The search term executed in the global search. Should also be used when viewing all
    questions.
    """
    searchTerm: String!

    """
    This link contains the remainder of the FAQs that got cut off (non top-5).
    """
    seeMoreLink: String
}

"""
Information on the stamps involved in the program.
"""
type LoyaltyProgramStampContent {
    """
    The image set containing the background / empty spot image of a single stamp. This is used
    to display a "place" where a stamp can be "pasted" onto the card. Might be empty if no
    images are configured.
    """
    emptyImage: [ImageSet!]!

    """
    The image set containing the image of a single stamp.  Might be empty if no images are
    configured.
    """
    stampImage: [ImageSet!]!

    """
    The number of stamps that you need to fill a card. Also useful to calculate how many
    full cards a user has.
    """
    stampsPerCard: Int
}

"""
Enum that indicates the program state.
"""
enum LoyaltyProgramState {
    """
    The program is active. Its saving period is now, but its redemption period is not.
    """
    ACTIVE

    """
    The program is active and points can currently be redeemed.
    """
    ACTIVE_AND_REDEEMABLE

    """
    The program has finished, saving and redeeming are no longer possible.
    """
    FINISHED

    """
    The program has finished, saving is no longer possible. Redeeming is also not yet
    possible, as this can be done in the future.
    """
    FINISHED_AND_FUTURE_REDEEMABLE

    """
    The program has finished, saving is no longer possible. However, redeeming still is.
    """
    FINISHED_AND_REDEEMABLE

    """
    The program has not yet started. Its saving period is in the future.
    """
    FUTURE

    """
    The program is in an unknown state.
    """
    UNKNOWN
}

"""
Enum that indicates the program type.
"""
enum LoyaltyProgramType {
    """
    Digital Savings program. These are programs such as Bestek, Handdoeken or Efteling.
    """
    DIGITAL_SAVINGS

    """
    Digital Scratching program. These are programs such as Zomerkrassen.
    """
    DIGITAL_SCRATCHING

    """
    Koopzegels program. There is only one such program.
    """
    KOOPZEGELS

    """
    To go program. These are programs such as Sapje, Broodje or Koffie.
    """
    TO_GO
}

"""
Basic member information
"""
type Member {
    """
    Address
    """
    address: MemberAddress

    """
    Member data for analytics purposes
    """
    analytics: MemberAnalytics!

    """
    All possible mfa settings for the member
    """
    availableMfaSettings: [CiamAvailableMfaSetting!]!

    """
    All member cards
    """
    cards: MemberCards

    """
    Company info
    """
    company: MemberCompany

    """
    Member consents
    """
    consents: MemberConsents!

    """
    Member consents to show, information if a consent should be asked to the user
    """
    consentsToShow: [String!]!

    """
    Contact subscriptions for example: AH_NEWSLETTER
    """
    contactSubscriptions: [String!]

    """
    The audiences for the current user
    """
    customerProfileAudiences: [String!]

    """
    The properties for the current user
    """
    customerProfileProperties: [KeyValue!]

    """
    Date of birth
    """
    dateOfBirth: String

    """
    Email address
    """
    emailAddress: EmailAddress

    """
    Member favourite store preference
    """
    favouriteStore: Store
        @deprecated(
            reason: "@sunset_date(2023-07-01) - checked 2023-05-08 - used in ah-stores - ah-stores is being refactored therefore the graphql stories belonging to it aswell \n. storesFavouriteStore in stores module. "
        )

    """
    Gender
    """
    gender: Gender

    """
    Member identification
    **not to be used in any client requests we make!!!**
    TODO: maybe ID should become hashed ID?
    """
    id: Int!

    """
    Is member business to business user or not
    """
    isB2B: Boolean!

    """
    Whether the phone number `Member.phoneNumber` is a mobile number.
    """
    isPhoneNumberMobile: Boolean

    """
    Whether the phone number has been verified through an MFA code
    """
    isPhoneNumberVerified: Boolean!

    """
    Member loyalty cards, show the cards the user has but also the cards which are available
    """
    loyaltyCards: MemberLoyaltyCards!

    """
    All active memberships
    """
    memberships: [String!]

    """
    The current MFA setting for the member
    """
    mfaSetting: String!

    """
    Name
    """
    name: MemberName

    """
    Permissions of the member example: GEBDATUM
    """
    permissions: [String!]

    """
    Phone number
    """
    phoneNumber: PhoneNumber
}

"""
Member address
"""
type MemberAddress {
    """
    City
    """
    city: String

    """
    CountryCode for example: 'NLD' (Iso3 format)
    """
    countryCode: String

    """
    House number
    """
    houseNumber: Int

    """
    The adjectend part of the house nummber. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Zipcode
    """
    postalCode: PostalCode

    """
    Street name of the member
    """
    street: String
}

"""
Member address input
"""
input MemberAddressInput {
    """
    City
    """
    city: String!

    """
    CountryCode for example: 'NLD'
    """
    countryCode: String!

    """
    House number without adjacent part
    """
    houseNumber: Int!

    """
    The adjactent part of the house nummber. For example, the 'a' of 10a
    """
    houseNumberExtra: String

    """
    Zipcode
    """
    postalCode: String!

    """
    Street name of the member
    """
    street: String!
}

"""
Member analytics data
"""
type MemberAnalytics {
    """
    BATCHCOM ID
    """
    batch: String

    """
    Digimon ID
    """
    digimon: String

    """
    FIREBASE ID
    """
    firebase: String

    """
    Google analytics ID
    """
    idga: String!

    """
    Monetization ID
    """
    idmon: String

    """
    SAS ID
    """
    idsas: String

    """
    Member optins
    """
    optins: [String!]!

    """
    SITESPECT ID
    """
    sitespect: String
}

"""
Member business activities
"""
type MemberBusinessActivity {
    """
    Business activity identifier
    Overview of business activities: https://www.kvk.nl/overzicht-standaard-bedrijfsindeling/
    Example: 01.13.1 - 'Teelt van groenten in de volle grond'
    """
    businessActivityId: String!

    """
    Company main area of expertise
    """
    isMainBusinessActivity: Boolean!
}

"""
Member business activities input
"""
input MemberBusinessActivityInput {
    """
    Business activity identifier
    See describtion of Business activities in MemberCompanyRegistration for more details
    """
    businessActivityId: String!

    """
    Company main area of expertise
    """
    isMainBusinessActivity: Boolean!
}

"""
All membercards with the card code for example bonus: '1234'
"""
type MemberCards {
    """
    Airmiles
    """
    airmiles: String

    """
    Bonus card
    """
    bonus: String

    """
    Etos card
    """
    etos: String

    """
    Gall & Gall card
    """
    gall: String

    """
    Wijndomein card
    """
    wijndomein: String

    """
    XL card
    """
    xl: String
}

"""
Member company details
"""
type MemberCompany {
    """
    Address that is printed on the invoices
    """
    addressInvoice: MemberAddress

    """
    Company branch id
    """
    branchId: String

    """
    List of activities associated to the company
    """
    businessActivities: [MemberBusinessActivity!]

    """
    Used as a legal setting to differentiate between Consumer and Business law, for businesses with less then 5 employees Consumer laws apply and AH is allowed to send an offers newsletter. True if a business has less then 5 employees.
    """
    customOffersAllowed: Boolean

    """
    Company id
    """
    id: String

    """
    Company name
    """
    name: String

    """
    Industry sector code
    """
    sector: String
        @deprecated(
            reason: "@sunset_date(2022-08-01) - checked 2023-05-08 - used in appie-android@latest(8.40.1) - Is a legacy property, shouldn't be used anywhere \n. . "
        )

    """
    The company VAT identification
    """
    vatId: String
}

"""
Member company details input
"""
input MemberCompanyDetailsInput {
    """
    Address that is printed on the invoices
    """
    addressInvoice: MemberAddressInput

    """
    Company branch id
    """
    branchId: String

    """
    List of activities associated to the company
    """
    businessActivities: [MemberBusinessActivityInput!]

    """
    Used as a legal setting to differentiate between Consumer and Business law, for businesses with less then 5 employees Consumer laws apply and AH is allowed to send an offers newsletter. True if a business has less then 5 employees.
    """
    customOffersAllowed: Boolean

    """
    Company id
    """
    id: String

    """
    Company name
    """
    name: String

    """
    The company VAT identification
    """
    vatId: String
}

"""
Search for a specific company within the dutch Chamber of Commerce
"""
type MemberCompanyRegistration {
    """
    Company address
    """
    addressSearch: AddressSearch

    """
    Company name
    """
    branchId: String

    """
    Company area of expertise bound by a number (SBI codes)
    SBI code is a dutch list with area of expertises from the kvk (Kamer van Koophandel)
    The company chooses his expertise (for example supermarket, education or government) and we map it to the SBI number
    Overview of business activities: https://www.kvk.nl/overzicht-standaard-bedrijfsindeling/
    Example: 01.13.1 - 'Teelt van groenten in de volle grond'
    """
    businessActivities: [BusinessActivity]!

    """
    Company country
    """
    countryCode: String!

    """
    Company identifier
    """
    id: String!

    """
    Company name
    """
    name: String!
}

"""
The returned object with the company registration and error state
"""
type MemberCompanyRegistrationResult {
    """
    The returned company
    """
    company: MemberCompanyRegistration

    """
    State whether or not the kvk service is down
    """
    isKvkServiceDown: Boolean!
}

"""
Contains the rules and result against user password
"""
type MemberCompanyRegistrationSearch {
    """
    Company address
    """
    addressText: String!

    """
    Company name
    """
    branchId: String!

    """
    Company country
    """
    countryCode: String!

    """
    Company identifier
    """
    id: String!

    """
    Company name
    """
    name: String!
}

"""
The result of the company search
"""
type MemberCompanyRegistrationSearchResult {
    """
    The returned array with companies of the company search
    """
    companyRegistrations: [MemberCompanyRegistrationSearch!]!

    """
    State whether or not the kvk service is down
    """
    isKvkServiceDown: Boolean!

    """
    Current page
    """
    pageNumber: Int!

    """
    Number of pages
    """
    totalPages: Int!
}

"""
Show all consents a member has given or declined
"""
type MemberConsents {
    """
    A list with all consents
    """
    items: [Consents!]
}

"""
Provide the consents which should be added or removed when doing the memberConsents mutation
"""
input MemberConsentsInput {
    """
    Provide the code, version and granted to add it for one or multiple consents
    """
    add: [ConsentInput!]

    """
    Provide the code of a consent to delete it
    """
    remove: [String!]
}

"""
Returns member diet preference option
"""
type MemberDietPreferenceOption {
    """
    Image of preference option
    """
    image: ImageSet!

    """
    Title of diet preference option
    """
    label: String!

    """
    Helps the UI decide if this option is selected or not
    """
    selected: Boolean!

    """
    Preference value, ex. LACTOSE_FREE | GLUTEN_FREE
    """
    value: MemberDietPreferencesOptionType!
}

"""
All member diet options
"""
enum MemberDietPreferencesOptionType {
    """
    GLUTEN_FREE
    """
    GLUTEN_FREE

    """
    LACTOSE_FREE
    """
    LACTOSE_FREE
}

"""
Returned error for invalid property
"""
type MemberError {
    """
    Error code, for example: 'forbidden'
    """
    error: String!

    """
    Invalid property described as a path, for example: 'cards.bonus', 'emailaddresss'
    """
    path: String!
}

"""
Returns member meat preference option
"""
type MemberFavouriteDishOption {
    """
    Image of preference option
    """
    image: ImageSet!

    """
    Title of favourite dish type
    """
    label: String!

    """
    Helps the UI decide if this option is selected or not
    """
    selected: Boolean!
}

"""
All member preferences pertaining food
"""
type MemberFoodPreferences {
    """
    Preference on what a members favorite dish type is. Like pasta.
    """
    favouriteDishTypes: [MemberPreferenceDishOptions!]!

    """
    Preference on how often a member eats meat or fish. Options are one letter
    """
    protein: [MemberPreferenceProteinOptions!]!

    """
    Preference on what ingredients a member dislikes.
    """
    unwantedIngredients: [String!]!
}

"""
Member food preference input
"""
input MemberFoodPreferencesInput {
    """
    Stores diet preferences
    """
    dietPreferences: [String!]

    """
    Default serving number
    """
    familySize: Int

    """
    Stores favorite dish types of the member
    """
    favouriteDishTypes: [String!]!

    """
    Stores meat preference
    """
    meatPreference: MemberMeatPreferencesOptionType

    """
    Nutrition preference
    """
    nutritionPreference: MemberNutritionPreferenceOptionType

    """
    Stores how often a member eats meat/fish
    """
    protein: MemberProteinPreferencesOptionType

    """
    Stores 5 ingredients a member dislikes
    """
    unwantedIngredients: [String!]!
}

"""
Check if an email-address is found on multiple domains
"""
type MemberHasAccount {
    """
    Email-address has account on following domains
    """
    domains: [DomainsEnum!]!

    """
    Email-address used to check
    """
    email: String!
}

"""
Status of member
"""
enum MemberLoginState {
    """
    Logged in customer
    """
    LOGGEDON

    """
    Returning recognised customer, not logged in
    """
    RETURNING

    """
    anonymous user
    """
    UNKNOWN
}

"""
Member Loyalty Cards object
"""
type MemberLoyaltyCards {
    """
    loyalty cards the member can attach to his account will be inside here
    """
    availableLoyaltyCards: [AvailableLoyaltyCards!]!

    """
    Attached loyalty cards of the member will be in here
    """
    loyaltyCards: [LoyaltyCards!]!
}

"""
Returns member meat preference option
"""
type MemberMeatPreferenceOption {
    """
    Link to preference option webview
    """
    href: String!

    """
    Image of preference option
    """
    image: ImageSet!

    """
    Title of the preference
    """
    label: String!

    """
    Helps the UI decide if this option is selected or not
    """
    selected: Boolean!

    """
    Preference value, ex. VEGETARIAN | VEGAN | PESCATARIAN | FLEXITARIAN
    """
    value: MemberMeatPreferencesOptionType!
}

"""
All member protein options
"""
enum MemberMeatPreferencesOptionType {
    """
    FLEXITARIAN
    """
    FLEXITARIAN

    """
    PESCATARIAN
    """
    PESCATARIAN

    """
    VEGAN
    """
    VEGAN

    """
    VEGETARIAN
    """
    VEGETARIAN
}

"""
Name of member containing first and lastname with prefix
"""
type MemberName {
    """
    First name
    """
    first: String

    """
    Last name
    """
    last: String
}

"""
Returns member meat preference option
"""
type MemberNutritionPreferenceOption {
    """
    Title of the preference
    """
    label: String!

    """
    Helps the UI decide if this option is selected or not
    """
    selected: Boolean!

    """
    Preference value, ex. KETO | LOW_CALORIES | LOW_CARBS | PROTEIN_RICH
    """
    value: MemberNutritionPreferenceOptionType!
}

"""
All member nutrition preference options
"""
enum MemberNutritionPreferenceOptionType {
    """
    KETO
    """
    KETO

    """
    LOW CALORIES
    """
    LOW_CALORIES

    """
    LOW CARBS
    """
    LOW_CARBS

    """
    PROTEIN RICH
    """
    PROTEIN_RICH
}

"""
Member patch entities input
"""
input MemberPatchEntitiesInput {
    """
    Cards for example: BO 1234567890123
    """
    cards: MemberPatchIdEntitiyInput

    """
    Contact subscriptions for example: AH_NEWSLETTER
    """
    contactSubscriptions: MemberPatchEntityInput

    """
    Memberships for example: WEBSHOP
    """
    memberships: MemberPatchEntityInput

    """
    Permissions for example: GEBDATUM
    """
    permissions: MemberPatchEntityInput
}

"""
Member patch entity input
"""
input MemberPatchEntityInput {
    """
    Add memberships, contact-subscriptions for example: WEBSHOP or AH_NEWSLETTER
    """
    add: [String!]

    """
    Add memberships, contact-subscriptions for example: WEBSHOP or AH_NEWSLETTER
    """
    remove: [String!]
}

"""
Member patch id entity input
"""
input MemberPatchIdEntitiyInput {
    """
    Add cards for example: BonusCard (bonus) with card-number
    """
    add: [MemberPatchIdEntityAddInput!]

    """
    Add memberships, contact-subscriptions for example: WEBSHOP or AH_NEWSLETTER
    """
    remove: [String!]
}

"""
Member patch id entity add input
"""
input MemberPatchIdEntityAddInput {
    """
    Number of card for example: 1234567890123
    """
    number: String!

    """
    Type of card for example: bonus, airmiles, gall
    """
    type: String!
}

"""
Member personal details input
"""
input MemberPersonalDetailsInput {
    """
    Address of the member with countrycode
    """
    address: MemberAddressInput

    """
    Date of birth of the member. Format: YYYY-DD-MM
    """
    dateOfBirth: String

    """
    Gender of the member
    """
    gender: Gender

    """
    Name of the member, firstname and surname included
    """
    name: NameInput

    """
    Member phonenumber
    """
    phoneNumber: String
}

"""
Return type for memberPhoneNumberIsValid query
"""
type MemberPhoneNumberIsValid {
    """
    Boolean indicating if the phone number is a mobile number
    """
    isMobile: Boolean

    """
    Boolean indicating if the phone number is valid
    """
    isValid: Boolean
}

"""
Returns member dish preference
"""
type MemberPreferenceDishOptions {
    """
    title of the preference
    """
    label: String!

    """
    Helps the UI decide if this option is selected or not
    """
    selected: Boolean!
}

"""
Returns member protein preference
"""
type MemberPreferenceProteinOptions {
    """
    title of the preference
    """
    label: MemberProteinPreferencesOptionType!

    """
    Helps the UI decide if this option is selected or not
    """
    selected: Boolean!
}

"""
Returns member food preference
"""
type MemberPreferences {
    """
    These are preferences the user entered pertaining their liked and disliked food
    """
    food: MemberFoodPreferences!
}

"""
All member protein options
"""
enum MemberProteinPreferencesOptionType {
    """
    ALWAYS
    """
    ALWAYS

    """
    NEVER
    """
    NEVER

    """
    SOMETIMES
    """
    SOMETIMES
}

"""
Member recipe is type of recipe that is created by members or scraped by members from third party sources.
Unlike regular Recipe, Member Recipe can be created, updated or delete. Regular Recipe is a read-only recipe
that's been created by dedicated team and is managed by them
"""
type MemberRecipe {
    """
    Recipe author
    """
    author: RecipeAuthor

    """
    Recipe Description
    """
    description: String

    """
    Member's recipe Id
    """
    id: Int!

    """
    Recipe images by rendition name
    """
    images(renditions: [RenditionKey!]): [RecipeImage!]!

    """
    Recipe ingredients
    """
    ingredients: [MemberRecipeIngredient!]

    """
    Recipe preparation details
    """
    preparation: RecipePreparation!

    """
    Recipe servings
    """
    servings: MemberRecipeServing

    """
    Recipe source
    """
    source: RecipeSource

    """
    Recipe time
    """
    time: RecipeTime

    """
    Recipe Title
    """
    title: String
}

"""
Member recipe author input
"""
input MemberRecipeAuthorInput {
    """
    Recipe origin input
    """
    origin: MemberRecipeOriginInput!
}

"""
Member Recipe ingredient type
"""
type MemberRecipeIngredient {
    """
    Ingredient complete text which includes name, quantity and quantity unit for example:
    15 g verse peterselie
    """
    text: String
}

"""
Member recipe input
"""
input MemberRecipeInput {
    """
    Recipe author
    """
    author: MemberRecipeAuthorInput

    """
    Cook Time
    """
    cookTime: Int

    """
    Member recipe description
    """
    description: String!

    """
    Id of the member's recipe that is being updated. For create id is empty
    """
    id: Int

    """
    Ingredients
    """
    ingredients: [String!]

    """
    Preparation steps
    """
    preparationSteps: [String!]

    """
    Servings number
    """
    servingsNumber: Int

    """
    Recipe Source
    """
    source: RecipeSourceInput

    """
    Member recipe title
    """
    title: String!
}

"""
Member recipe origin input
"""
input MemberRecipeOriginInput {
    """
    Recipe host name
    """
    hostName: String

    """
    Recipe type
    """
    type: MemberRecipeOriginType!

    """
    Recipe url
    """
    url: String
}

"""
Member recipe origin type
"""
enum MemberRecipeOriginType {
    """
    Member created
    """
    MEMBER_CREATED

    """
    Member scraped
    """
    MEMBER_SCRAPED
}

"""
Preference option that's going to be displayed if member haven't specified the preferences
and as the result doesn't have any recipes recommended
"""
type MemberRecipePreferencePreviewOption {
    """
    Link to preference option webview
    """
    href: String!

    """
    Image of preference option
    """
    image: ImageSet!

    """
    Title of the preference
    """
    label: String!

    """
    Preference value
    """
    value: String!
}

"""
Preference option that's been selected
"""
type MemberRecipePreferenceSelectedOption {
    """
    Title of the preference
    """
    label: String!

    """
    Preference value
    """
    value: String!
}

"""
All member recipe related preferences
"""
type MemberRecipePreferences {
    """
    Diet preferences
    """
    dietPreferences: [MemberDietPreferenceOption!]!

    """
    Default serving size
    """
    familySize: Int

    """
    Preference on what a members favorite dish type is. Like pasta.
    """
    favouriteDishTypes: [MemberFavouriteDishOption!]!

    """
    Preference on how often a member eats meat or fish
    """
    meatPreferences: [MemberMeatPreferenceOption!]!

    """
    Nutrition preferences
    """
    nutritionPreferences: [MemberNutritionPreferenceOption!]!

    """
    Preference on what ingredients a member dislikes.
    """
    unwantedIngredients: [String!]!
}

"""
Member Recipe Serving Details
"""
type MemberRecipeServing {
    """
    Recipe number of servings
    """
    number: Int

    """
    Recipe serving type
    """
    type: String!
}

"""
MemberSetFavouriteStoreResult
"""
type MemberSetFavouriteStoreResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Member after performing the mutation
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Returned result after member update
"""
type MemberUpdateMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Member after performing the mutation
    """
    result: Member

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!

    """
    Validation errors, when status is FAILED
    """
    validationErrors: [MemberError!]
}

"""
Input required to mark message center message as read or unmark message as read
"""
input MessageCenterMarkingMessageReadInput {
    """
    Should mark message as read or vice versa
    """
    isRead: Boolean!

    """
    Id of the message to be marked
    """
    messageId: String!
}

"""
Represents a message center message
"""
type MessageCenterMessage {
    """
    Content related data of message
    """
    content: MessageCenterMessageContent!

    """
    Id of a message
    """
    id: String!

    """
    Is message read or not
    """
    isRead: Boolean!

    """
    Is message urgent or not
    """
    isUrgent: Boolean!

    """
    Optional attributes for analytics and other purposes
    """
    optionalAttributes: MessageCenterMessageOptionalAttributes!

    """
    Perion when this message should be displayed and at which time section it should be put
    """
    period: MessageCenterMessageDisplayTimePeriod!
}

"""
Represents a message center message content related data
"""
type MessageCenterMessageContent {
    """
    Message category
    """
    category: String!

    """
    Application deeplink that specifies app behaviour when message is clicked
    """
    deeplink: String!

    """
    Links to icons to show beside the message.
    """
    icons: [ImageSet!]!

    """
    Message title
    """
    title: String!
}

"""
Represents a message center message display time period data
"""
type MessageCenterMessageDisplayTimePeriod {
    """
    Date after which message is no longer relevant
    """
    endDate: String!

    """
    Which section message belongs to (today, this week or this month)
    """
    section: String!

    """
    Date starting from which message is relevant
    """
    startDate: String!
}

"""
Represents optional attributes of each message that should be used for analytics purposes
"""
type MessageCenterMessageOptionalAttributes {
    """
    Id of SAS (marketing tool) marketing campaign
    """
    campaignId: String
}

"""
Represent message center unread messages info
"""
type MessageCenterUnreadMessagesInfo {
    """
    Whether to show profile icon dot or not
    """
    showProfileIcon: Boolean!

    """
    Amount of unread messages
    """
    unreadMessagesAmount: Int!

    """
    Amount of unread urgent messages
    """
    urgentUnreadMessagesAmount: Int!
}

"""
Messenger button
"""
type MessengerButton {
    """
    disabled
    """
    disabled: Boolean!

    """
    label
    """
    label: String!

    """
    target
    """
    target: String!

    """
    type
    """
    type: ButtonType!

    """
    url
    """
    url: String!
}

"""
Chat channel entrypoint
"""
enum MessengerChannelTypeEntrypoint {
    CHAT
    PHONE
}

"""
Messenger event corresponding to a closed event sent by the message handler
"""
type MessengerClosedEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    id
    """
    id: String!

    """
    type
    """
    type: MessengerConversationEventType!
}

"""
A messenger conversation with a subset of messenger events
"""
type MessengerConversation {
    """
    Whether the CES form needs to show or not
    """
    cesFormEnabled: Boolean!

    """
    a list of all messenger events
    """
    events: [MessengerConversationEvent!]!

    """
    id
    """
    id: String!

    """
    Enable chat input
    """
    inputFieldEnabled: Boolean!

    """
    Language of the conversation
    """
    locale: String!

    """
    if the conversation can be resumed after it has been closed
    """
    reopenable: Boolean!

    """
    open/closed status
    """
    status: MessengerStatus!
}

"""
A subset of all possible messenger events
"""
union MessengerConversationEvent =
    | MessengerClosedEvent
    | MessengerHandlerImageSentEvent
    | MessengerHandlerLinkListSentEvent
    | MessengerHandlerMessageSentEvent
    | MessengerHandlerTableSentEvent
    | MessengerMemberImageSentEvent
    | MessengerMemberMessageSentEvent
    | MessengerReopenedEvent

"""
All available event types in a conversation
"""
enum MessengerConversationEventType {
    MESSENGER_CLOSED_EVENT
    MESSENGER_HANDLER_IMAGE_SENT_EVENT
    MESSENGER_HANDLER_LINK_LIST_SENT_EVENT
    MESSENGER_HANDLER_MESSAGE_SENT_EVENT
    MESSENGER_HANDLER_TABLE_SENT_EVENT
    MESSENGER_MEMBER_IMAGE_SENT_EVENT
    MESSENGER_MEMBER_MESSAGE_SENT_EVENT
    MESSENGER_REOPENED_EVENT
}

"""
Status of the conversation in the messenger
"""
type MessengerConversationStatus {
    """
    Registered channelType when starting the conversation
    """
    channelType: MessengerChannelTypeEntrypoint

    """
    Conversation status
    """
    status: MessengerStatus
}

"""
Context from the member
"""
input MessengerCreateConversationContext {
    """
    AB Tests ids (sitespect)
    """
    abTests: String

    """
    App version
    """
    appVersion: String

    """
    Operating system information. e.g. IOS 16.2.1
    """
    os: String
}

"""
Messenger image event from handler
"""
type MessengerHandlerImageSentEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    handler name
    """
    handlerName: String!

    """
    id
    """
    id: String!

    """
    Id of the image
    """
    imageId: String!

    """
    type
    """
    type: MessengerConversationEventType!
}

"""
A link list send by the handler of the conversation
"""
type MessengerHandlerLinkListSentEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    Name of the handler
    """
    handlerName: String!

    """
    id
    """
    id: String!

    """
    A list of hyper links
    """
    links: [MessengerLinkListHyperLink!]!

    """
    event type
    """
    type: MessengerConversationEventType!
}

"""
Messenger event corresponding to a message sent by the message handler
"""
type MessengerHandlerMessageSentEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    handler name
    """
    handlerName: String!

    """
    id
    """
    id: String!

    """
    A message is considered 'new' when it is not older than 7 seconds
    """
    isNewMessage: Boolean!

    """
    conversation message
    """
    message: MessengerMessage!

    """
    event type
    """
    type: MessengerConversationEventType!
}

"""
A table message send by the handler of the conversation
"""
type MessengerHandlerTableSentEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    Table footer
    """
    footer: [String]!

    """
    Name of the handler
    """
    handlerName: String!

    """
    Table headers
    """
    header: [String]!

    """
    id
    """
    id: String!

    """
    Table rows
    """
    rows: [[String]!]!

    """
    event type
    """
    type: MessengerConversationEventType!
}

"""
the type of link
"""
enum MessengerHyperLinkType {
    """
    highlighted
    """
    HIGHLIGHT

    """
    standard
    """
    STANDARD
}

"""
Short living url for images
"""
type MessengerImageUrl {
    """
    Image id
    """
    id: String!

    """
    Image url. Url is valid for 5 seconds
    """
    url: String!
}

"""
Images with urls
"""
type MessengerImages {
    """
    Images with urls
    """
    images: [MessengerImageUrl]!
}

"""
Hyper link send by the Digital Assistant
"""
type MessengerLinkListHyperLink {
    """
    Hypertext Reference
    """
    href: String!

    """
    The text to display
    """
    text: String!

    """
    the type of link
    """
    type: MessengerHyperLinkType!
}

"""
A list of messenger buttons
"""
type MessengerList {
    """
    text
    """
    text: String!

    """
    type
    """
    type: String
}

"""
Messenger image event from member
"""
type MessengerMemberImageSentEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    id
    """
    id: String!

    """
    Id of the image
    """
    imageId: String!

    """
    type
    """
    type: MessengerConversationEventType!
}

"""
Messenger event corresponding to a message sent by a member
"""
type MessengerMemberMessageSentEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    id
    """
    id: String!

    """
    text
    """
    text: String!

    """
    type
    """
    type: MessengerConversationEventType!
}

"""
MessengerHandlerMessageSentEvent message
"""
type MessengerMessage {
    """
    button
    """
    button: MessengerButton

    """
    a list of messenger buttons
    """
    list: [MessengerList!]!

    """
    suggestions
    """
    suggestions: [String!]!

    """
    text
    """
    text: String
}

"""
Messenger event corresponding to a reopened event sent by the message handler
"""
type MessengerReopenedEvent {
    """
    timestamp
    """
    createdAt: String!

    """
    id
    """
    id: String!

    """
    type
    """
    type: MessengerConversationEventType!
}

"""
Status
"""
enum MessengerStatus {
    CLOSED
    OPEN
}

"""
Input for an easy onboarding miles account
"""
input MilesAccountFields {
    """
    Member address
    """
    address: AddressSearchInput!

    """
    Does the member want to receive newsletters from Miles?
    """
    consents: [String!]!

    """
    Member date of birth
    """
    dateOfBirth: String!

    """
    Gender of Member
    """
    gender: Gender

    """
    Member name
    """
    name: NameInput!

    """
    Member phone number
    """
    phoneNumber: String
}

"""
Response after the request to create a miles account
"""
type MilesAccountResponse {
    """
    More information about what happened
    """
    message: String

    """
    Status
    """
    status: MilesStatus!
}

"""
The returned balance with the rate € to Air Mile
"""
type MilesBalance {
    """
    The current balance of the user
    """
    balance: Int

    """
    Possible returned error message for the user
    """
    errorState: MilesErrorState
}

"""
A type representing a mutation on an Miles balance. All values inside the mutation
represent a number of Miles.
"""
type MilesBalanceMutation {
    """
    The actual number of miles of the mutation.
    """
    mutation: Int!

    """
    The Miles balance after the mutation.
    """
    new: Int!

    """
    The Miles balance before the mutation.
    """
    old: Int!
}

"""
A type containing a charity to where Miles can be donated to.
"""
type MilesCharity {
    """
    Displayable content of the charity, containing the name of the charity, the logo,
    a summary, etc.
    """
    content: MilesCharityContent!

    """
    The ID of the charity.
    """
    id: String!

    """
    The period in which this charity is valid.
    """
    validityPeriod: MilesCharityPeriod!
}

"""
A type containing the displayable content of a charity where Miles can be donated
to. Contains information such as the charity's name, logo, summary, etc.
"""
type MilesCharityContent {
    """
    A longer description of the charity.
    """
    description: String!

    """
    A message of gratitude of the charity. Can be displayed e.g. when a member has
    donated some Miles to this charity.
    """
    gratitude: String!

    """
    An image representing the charity, often just the charity's logo.
    """
    image: [ImageSet!]! @deprecated(reason: "@sunset_date(2023-12-01) - Use `imageUrl` instead \n. . ")

    """
    A url pointing to an image representing the charity, often just the charity's logo.
    """
    imageUrl: String!

    """
    The name of the charity.
    """
    name: String!

    """
    A short summary of the charity.
    """
    summary: String!
}

"""
A type containing a period in which the charity is valid (can be donated to).
"""
type MilesCharityPeriod {
    """
    The end date.
    """
    end: DateTime!

    """
    The start date.
    """
    start: DateTime!
}

"""
A type containing a summary of a successful Miles donation to a charity.
"""
type MilesDonation {
    """
    The mutation on the member's Miles balance after the donation was processed
    successfully.
    """
    balanceMutation: MilesBalanceMutation!

    """
    The ID of the charity that was donated to.
    """
    charityId: String!

    """
    The request ID that was passed along by the frontend to ensure idempotency.
    """
    requestId: UUID!

    """
    The timestamp at which the donation was processed.
    """
    timestamp: DateTime!
}

"""
A type containing the result of making a donation using Miles.
"""
type MilesDonationMutationResult implements MutationResult {
    """
    A summary of the donation that was made. Will be null when the donation was not
    successful.
    """
    donation: MilesDonation

    """
    A message stating why the donation was not successful. Will be null when the donation
    was successful.
    """
    errorMessage: String

    """
    The status of the mutation. Indicates if the donation was successful or not.
    """
    status: MutationResultStatus!
}

"""
The different kinds of error state that a customer can be in with regards to the AH Miles program.
"""
enum MilesErrorState {
    """
    The customer does not have a (valid) authentication token to fetch their balance at Air Miles.
    They need to complete the LMN auth flow. They are, however, opted in for Air Miles.
    """
    AUTHENTICATION_REQUIRED

    """
    The customer is not opted in for the AH Miles program.
    """
    NOT_OPTED_IN
}

"""
Enum with values of status for miles
"""
enum MilesStatus {
    """
    Account has been created
    """
    CREATED

    """
    Something went wrong when trying to create account
    """
    ERROR

    """
    Account is already existing (Email needs to be unique)
    """
    EXISTING
}

"""
Transaction made with Air Miles
"""
type MilesTransaction {
    """
    The date of the transaction
    """
    date: String

    """
    Description of the transaction
    """
    description: String

    """
    The platform of the transaction
    """
    domain: String

    """
    The number of Air Miles that were exchanged
    """
    value: Int
}

"""
Recommendations for a bonus offer a member is missing out on in their order.
The recommendations are in the form of enriched order lines.
"""
type MissingBonusOrderLine {
    """
    More information about the missing bonus recommendation.
    """
    description: String

    """
    The amount of products still needed to reach the bonus discount.
    """
    offerQuantity: Int

    """
    The position of the missing bonus order line.
    """
    position: Int!

    """
    The product in the basket that triggers the missing bonus recommendation.
    """
    product: Product!

    """
    The quantity of the missing bonus product.
    """
    productQuantity: Int!

    """
    Discount bonus segment id.
    """
    segmentId: Int

    """
    The title of the bonus segment the missing bonus product is related to.
    """
    title: String
}

"""
Product model
"""
type Model {
    """
    Model name
    """
    name: String

    """
    Model version
    """
    version: String
}

type Money {
    """
    The raw amount in cents/pence
    """
    amount: Float!

    """
    The formatted amount with the users currency.
    """
    formatted: String!
}

"""
Need to define mutation somehow, otherwise sometimes 'extend' fails
"""
type Mutation {
    """
    Member Consents Mutation

    With this mutation a users consents can be updated. A consent can be accepted, rejected or deleted.
    In the case of deletion a user will likely get a popup to accept or reject a consent again.
    """
    ahMemberConsentsUpdate(consents: MemberConsentsInput!): MemberConsents!

    """
    Create a member
    By adding an username, password, and other personal data
    and entities to an authorized anonymous member
    """
    ahMemberOnboard(
        captcha: CaptchaVerifyInput!
        companyDetails: MemberCompanyDetailsInput
        entities: MemberPatchEntitiesInput
        password: String!
        personalDetails: MemberPersonalDetailsInput
        username: String!
    ): MemberUpdateMutationResult!

    """
    Remove a member on token, provided by email
    """
    ahMemberUndoOnboarding(code: String!): BasicMutationResult!

    """
    Remove newsletter subscription by code
    """
    ahMemberUnsubscribeNewsletter(code: String!): BasicMutationResult!

    """
    Update/patch a member (full)
    """
    ahMemberUpdate(
        companyDetails: MemberCompanyDetailsInput
        entities: MemberPatchEntitiesInput
        personalDetails: MemberPersonalDetailsInput
    ): MemberUpdateMutationResult!

    """
    Delete all the items from the basket
    """
    basketDelete: BasketMutationResult!

    """
    Replace one item for another item
    """
    basketItemReplace(newItem: BasketMutation!, oldItem: BasketDelete!): BasketMutationResult!

    """
    Add items to basket
    """
    basketItemsAdd(items: [BasketMutation!]!): BasketMutationResult!

    """
    Delete items from the basket
    """
    basketItemsDelete(items: [BasketDelete!]!): BasketMutationResult!

    """
    Update quantity of items
    """
    basketItemsUpdate(items: [BasketMutation!]!): BasketMutationResult!

    """
    Merge basket items (products from list into order)
    """
    basketMergeList: BasketMutationResult!

    """
    Submit the preferred business payment method for a B2B account
    """
    businessPaymentMethodUpdate(
        """
        Payment method input
        """
        paymentMethod: PaymentMethodUpdateInput!
    ): BasicMutationResult!

    """
    Confirm an order of an user
    """
    checkoutConfirmOrder(
        """
        Id of the order to confirm
        """
        orderId: Int!

        """
        Order Info Payload
        """
        orderInfo: CheckoutConfirmOrderPayload!
    ): CheckoutOrderSubmitResult

    """
    Delete the account. Fails if there are blocker reasons, for more info, see
    `Query.memberUnsubscribeGetBlockerReasons`
    """
    ciamDeleteAccount(password: String!): CiamDeleteAccountMutationResult!

    """
    Delete a passkey.
    """
    ciamPasskeyDelete(
        """
        ID of the passkey to remove.
        """
        id: String!
    ): CiamPasskeyUpdateMutationResult!

    """
    Finish registering a new passkey.
    """
    ciamPasskeyRegisterFinish(
        """
        Name for the new passkey
        """
        name: String!

        """
        Public key credential obtained from WebAuthn browser API.
        Stringified JSON object.
        @link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential
        """
        publicKeyCredential: String!

        """
        Registration ID returned in previous `mutation.ciamPasskeyRegisterStart` call.
        """
        registrationId: String!
    ): CiamPasskeyUpdateMutationResult!

    """
    Start registering a new passkey.
    Should be followed up by `mutation.ciamPasskeyRegisterFinish`.
    """
    ciamPasskeyRegisterStart: CiamPasskeyRegisterStartMutationResult!

    """
    Update a passkey name.
    """
    ciamPasskeyUpdate(
        """
        ID of the passkey to remove.
        """
        id: String!

        """
        New name for the passkey.
        """
        name: String!
    ): CiamPasskeyUpdateMutationResult!

    """
    Change members password
    """
    ciamPasswordChange(newPassword: String!, oldPassword: String!): CiamPasswordChangeMutationResult!

    """
    Reset the password of the logged in user.
    Similar to `ciamPasswordResetRequest` but for the currently logged in user.
    """
    ciamPasswordReset: BasicMutationResult!

    """
    Changes the users password.
    Uses the code obtained from the email sent by `Mutation.ciamPasswordReset(Request)`.
    """
    ciamPasswordResetChange(code: String!, password: String!): BasicMutationResult!

    """
    Requests a password reset.
    Will send an email with a password reset link.
    """
    ciamPasswordResetRequest(emailAddress: String!): BasicMutationResult!

    """
    Start flow to update a phone-number using control-code verification. This
    mutation returns a session-id needed to use the verification mutation. Phone-
    number is only updated after correct verification.
    Possible error-messages: INVALID_PHONE_NUMBER, WRONG_MEMBER, MEMBER_NOT_FOUND, VERIFICATION_NOT_FOUND, SEND_CODE_MAX_REACHED. SMS_DOMAIN_CONFIG_NOT_FOUND, SMS_SEND_ERROR
    """
    ciamPhoneNumberSendCode(phoneNumber: String!, sessionId: String): CiamPhoneNumberSendCodeMutationResult!

    """
    Provide the controle-code from the sms and the session-id of the previous
    ciam-phone-number-send-code mutation. Phone-number is updated after correct
    verification.
    """
    ciamPhoneNumberVerifyCode(code: String!, sessionId: String!): CiamPhoneNumberVerifyCodeMutationResult!

    """
    Skips the required password update when the users password is weak
    """
    ciamSkipPasswordUpdate: BasicMutationResult!

    """
    Update the MFA setting for the current member
    """
    ciamUpdateMfaSetting(mfaSetting: String!): CiamUpdateMfaSettingMutationResult!

    """
    Change members username (email)

    Will send a confirmation email with a code that should be used in mutation.ciamUserNameChangeConfirm to confirm the change.
    """
    ciamUserNameChange(password: String!, username: String!): CiamUserNameChangeMutationResult!

    """
    Confirm email address change for member
    """
    ciamUserNameChangeConfirm(confirmationCode: String!): BasicMutationResult!

    """
    Add a recipe
    """
    cookBookAddRecipeV2(
        """
        Ingredients
        """
        ingredients: [CookBookInputRecipeIngredient!]!

        """
        Favorite recipe
        """
        isFavourite: Boolean

        """
        Shared recipe
        """
        isShared: Boolean

        """
        Diet recipe
        """
        isSlim: Boolean!

        """
        meta information about the recipe
        """
        meta: CookBookInputRecipeMeta!

        """
        Personal added note for recipe owners only to see
        """
        note: String

        """
        Preparation times
        """
        preparation: String!

        """
        Source of recipe
        """
        source: String!

        """
        Preparation, cooking and waiting times for recipe
        """
        times: CookBookInputRecipeTimes

        """
        title of recipe
        """
        title: String!

        """
        Tools needed for the job
        """
        tools: String
    ): CookBookAddRecipeResult

    """
    Remove collected recipe from collection
    """
    cookBookCollectedRecipeRemoveV2(
        """
        The recipe to be removed
        """
        recipeId: Int!
    ): CookBookCollectedRecipeRemoveResult

    """
    When recipe is collected it can be favorite and have personal note
    """
    cookBookCollectedRecipeSetV2(
        """
        isFavorite
        """
        isFavourite: Boolean!

        """
        personal notification
        """
        note: String

        """
        The recipe
        """
        recipeId: Int!
    ): CookBookCollectedRecipeResult

    """
    Deleting a recipe. The recipe will actually not be deleted, but juts MARKED as deleted using a flag in the database (so you can undelete them if needed, and you know the recipe id)
    """
    cookBookDeleteRecipeV2(
        """
        id of recipe
        """
        id: Int!
    ): CookBookDeleteRecipeResult

    """
    Edit a recipe
    you have the option to only pass the fields you want to overwrite or overwrite it completely it gives you more flexibility in transferring data
    """
    cookBookEditRecipeV2(
        """
        id of recipe
        """
        id: Int!

        """
        Ingredients
        """
        ingredients: [CookBookInputRecipeIngredient!]

        """
        Favorite recipe
        """
        isFavourite: Boolean

        """
        Shared recipe
        """
        isShared: Boolean

        """
        Diet recipe
        """
        isSlim: Boolean

        """
        meta information about the recipe
        """
        meta: CookBookInputRecipeMeta

        """
        Personal added note for recipe owners only to see
        """
        note: String

        """
        Preparation times
        """
        preparation: String

        """
        Source of recipe
        """
        source: String

        """
        Preparation, cooking and waiting times for recipe
        """
        times: CookBookInputRecipeTimes

        """
        title of recipe
        """
        title: String

        """
        Tools needed for the job
        """
        tools: String
    ): CookBookEditRecipeResult

    """
    Add cookbook profile
    """
    cookBookMemberAddProfile(profile: CookBookMemberAddProfileInput!): CookBookMemberProfile

    """
    Delete a specific message
    """
    cookBookMemberDeleteMessage(id: Int!): Boolean!

    """
    Delete cookbook profile, this can not be undone
    """
    cookBookMemberDeleteProfile: CookBookMemberProfile

    """
    Delete a specific message
    """
    cookBookMemberSendMessage(
        """
        Message itself
        """
        message: String!

        """
        Subject of the message
        """
        subject: String!

        """
        Id of the recipient cook book member
        """
        userId: Int!
    ): CookBookMemberMessage

    """
    Toggle blocking another cookbook user on/off. Blocking prevents user can send messages to eachother.
    """
    cookBookMemberToggleBlocking(
        """
        Block or unblock
        """
        block: Boolean!

        """
        Cookbook user id
        """
        userId: Int!
    ): Boolean!

    """
    Update cookbook profile
    """
    cookBookMemberUpdateProfile(profile: CookBookMemberUpdateProfileInput!): CookBookMemberProfile

    """
    Each recipe has its own counter for visits by members and is used for creating the popularity of the cookbook author
    """
    cookBookRecipeCountV2(
        """
        id of recipe
        """
        id: Int!
    ): CookBookRecipeCountResult

    """
    Each cookbook member can flag a recipe as offensive which will lead to different moderation state for a recipe (and not showed online anymore)
    """
    cookBookRecipeReportOffensiveV2(
        """
        id of recipe
        """
        id: Int!
    ): CookBookRecipeReportOffensiveResult

    """
    Update customer delivery instructions
    """
    customerDeliveryInstructionsUpdate(deliveryInstructions: String!): CustomerMutationResult!

    """
    Add an SMS Reminder to a confirmed Order
    """
    deliveryAddSMSReminder(orderId: Int!, phoneNumber: String!): AddSMSReminderResult!

    """
    Creates a deposit complaint
    """
    depositComplaint(
        """
        An optional comment
        """
        comment: String

        """
        The type of deposit
        """
        depositType: DepositComplaintDepositType!

        """
        The id of the order
        """
        orderId: Int!

        """
        The number of items that will be returned
        """
        quantity: Int!

        """
        Optional reimbursement
        """
        reimbursementOption: DepositComplaintReimbursementOption!
    ): CreateDepositComplaintResult!

    """
    Not a real mutation
    """
    dummyMutation: String!

    """
    Add a list, optionally also directly with items
    """
    favoriteListAdd(description: String!, products: [FavoriteListProductMutation!]): FavoriteListMutationResult!

    """
    Change the name of a favorite list
    """
    favoriteListChange(description: String!, id: Int!): FavoriteListMutationResult!

    """
    Delete a favorite list
    """
    favoriteListDelete(id: Int!): BasicMutationResult!

    """
    Add a list of products to a specific list. Providing the same id with a different quantity updates the item.
    """
    favoriteListProductsAdd(
        """
        Id of the list you want to add products to.
        """
        id: Int!

        """
        Products you want to add to the list. Quantity defaults to 1.
        """
        products: [FavoriteListProductMutation!]!
    ): FavoriteListMutationResult!

    """
    Add a list of products to a specific list. Providing the same id with a different quantity updates the item.
    """
    favoriteListProductsDelete(
        """
        Id of the list you want to delete products from.
        """
        id: Int!

        """
        Array of integers corresponding with item ids that need to be deleted (NOTE: doesn't work with product ids).
        """
        itemIds: [Int!]!
    ): BasicMutationResult!

    """
    Share already shared favorite list(s) with newly added sub-locations
    """
    favoriteListRefreshShareWithSubAccounts(referenceIds: [String!]!): SharedEntityMutationResult!

    """
    You can use this mutation to share a favorite list with a sub accounts if you are a master account (most of the time these are special case customers)
    """
    favoriteListShareWithSubAccounts(referenceId: String!): BasicMutationResult!

    """
    Unshare a main account's favorite list so sub-accounts can no longer see it
    """
    favoriteListUnshareWithSubAccounts(referenceId: String!): BasicMutationResult!

    """
    Create new general feedback
    """
    feedbackCreateGeneralFeedback(
        """
        If the feedback is by invite
        """
        byInvite: Boolean

        """
        Feedback channel
        """
        channel: FeedbackChannel

        """
        The actual complaint
        """
        comment: String!

        """
        The external reference
        """
        externalReference: String

        """
        A rating from 1 to 5
        """
        happinessRating: Int

        """
        Id's of uploaded images
        """
        imageIds: [String!]

        """
        Feedback over a loyalty program
        """
        loyaltyProgram: FeedbackLoyaltyProgram

        """
        Net promoter score
        """
        netPromoterScore: Int

        """
        Order id
        """
        orderId: Int

        """
        The page url
        """
        pageUrl: String

        """
        The shopping type for feedback, online or store
        """
        shoppingType: FeedbackShoppingType

        """
        The source of feedback
        """
        source: FeedbackSource

        """
        Store id
        """
        storeId: Int

        """
        The type of complaint
        """
        type: FeedbackType!
    ): CreateGeneralFeedbackResult!

    """
    Update general feedback
    """
    feedbackUpdateGeneralFeedback(
        """
        The actual complaint
        """
        comment: String!

        """
        Feedback id
        """
        feedbackId: String!

        """
        A rating from 1 to 5
        """
        happinessRating: Int
    ): BasicMutationResult!

    """
    Add new grocery list
    """
    groceryListAdd(
        """
        List of grocery items
        """
        groceryItems: [NewGroceryItem!]!

        """
        List of notes
        """
        notes: [NewNote!]!

        """
        Name of the grocerylist
        """
        title: String!

        """
        Description of the grocerylist
        """
        type: GroceryListType!
    ): GroceryListResult!

    """
    Member Consents Mutation

    With this mutation a users consents can be updated. A consent can be accepted, rejected or deleted.
    In the case of deletion a user will likely get a popup to accept or reject a consent again.
    """
    memberConsentsUpdate(consents: MemberConsentsInput!): MemberConsents!
        @deprecated(reason: "@sunset_date(2023-09-05) - use ahMemberConsentsUpdate \n. . ")

    """
    (Partially) update a member's profile
    """
    memberProfileUpdate(profile: MemberPersonalDetailsInput!): MemberUpdateMutationResult!

    """
    Remove loyalty card
    """
    memberRemoveCard(card: LoyaltyCard!): BasicMutationResult!

    """
    Set member favourite store to a specific store
    Returns true if successful, otherwise will return an error object
    """
    memberSetFavouriteStoreV2(
        """
        Id of store to set as favourite
        """
        id: Int
    ): MemberSetFavouriteStoreResult
        @deprecated(
            reason: "@sunset_date(2023-07-01) - checked 2023-05-08 - used in ah-stores - ah-stores is being refactored therefore the graphql stories belonging to it aswell \n. storesSetFavouriteStore in stores module. "
        )

    """
    Update/patch a member (full)

    Personal details like DOB and Address can be deleted (if user is allowed depending if he has loyalty. webshop or no memberships)
    -if loyalty DOB can't be deleted
    -if webshop DOB and Address can't be deleted
    """
    memberUpdate(
        companyDetails: MemberCompanyDetailsInput
        entities: MemberPatchEntitiesInput
        personalDetails: MemberPersonalDetailsInput
    ): MemberUpdateMutationResult! @deprecated(reason: "@sunset_date(2023-09-05) - use ahMemberUpdate \n. . ")

    """
    Mark message as Read/Unread
    """
    messageCenterMarkMessage(markMessageParameters: MessageCenterMarkingMessageReadInput!): BasicMutationResult!

    """
    Create a close requested event
    """
    messengerCloseConversation: BasicMutationResult!

    """
    Create a new chat session
    """
    messengerCreateConversation(
        channelType: MessengerChannelTypeEntrypoint!
        context: MessengerCreateConversationContext
        forceRenew: Boolean
    ): BasicMutationResult!

    """
    Creates a new chat session for order completeness complaint
    """
    messengerOrderCompletenessComplaint(context: MessengerCreateConversationContext): BasicMutationResult!

    """
    Create a reopen requested event
    """
    messengerReopenConversation: BasicMutationResult!

    """
    Create a new MessengerMemberMessageSentEvent
    """
    messengerSendMessage(text: String!): BasicMutationResult!

    """
    Create a miles account with the provided data
    """
    milesAccount(accountDetails: MilesAccountFields!): MilesAccountResponse!

    """
    Performs a donation of Miles to the designated charity ID with the provided
    number of Miles. A UUID (v4) needs to be passed along as the request ID, which
    is used to ensure idempotency of the request in case of retries. This prevents a retry
    from accidentally processing a request twice, and thus also reduce a member's balance
    twice. Returns a mutation result containing either a summary of the donation in case
    of success, or an error in case of failure.
    """
    milesDonate(charityId: String!, miles: Int!, requestId: UUID!): MilesDonationMutationResult!

    """
    Create a budget
    """
    orderBudgetCreate(
        """
        Amount of the budget
        """
        budget: Int!

        """
        Period of the created budget
        """
        period: BudgetPeriod!
    ): OrderBudgetMutationResult!

    """
    Update the budget
    """
    orderBudgetUpdate(
        """
        Amount of the budget
        """
        budget: Int!

        """
        Budget ID
        """
        id: Int!

        """
        Period of the updated budget
        """
        period: BudgetPeriod!
    ): OrderBudgetMutationResult!

    """
    Cancel an active order, may before have been submitted
    """
    orderCancel(id: Int!): BasicMutationResult!

    """
    Create or update an order
    """
    orderCheckin(
        """
        Delivery address
        """
        address: OrderDeliveryAddress

        """
        Message for the delivery driver
        """
        delivererMessage: String

        """
        The method of an OCI shop session
        """
        ociShopSession: OciShopSession

        """
        Order id in case of updating an existing order
        """
        orderId: Int

        """
        Id of a pickup location
        """
        pickupLocationId: Int

        """
        Order delivery timeslot
        """
        slot: OrderSlot!
    ): OrderCheckinMutationResult!

    """
    Delete an active and never before submitted order (gone is gone)
    """
    orderDelete(id: Int!): BasicMutationResult!

    """
    Merge order by id
    """
    orderMergeById(
        """
        ID of the order to merge with
        """
        orderId: Int!
    ): Basket!

    """
    Reopen a submitted order
    """
    orderReopen(id: Int!): BasicMutationResult!

    """
    Revert a re-opened order back to the previous submitted state
    """
    orderRevert(id: Int!): BasicMutationResult!

    """
    Reject or accept a sample to be added to your order.
    """
    orderSampleUpdate(
        """
        The ID of the order.
        """
        orderId: Int!

        """
        Whether to reject the sample or not.
        """
        rejected: Boolean!

        """
        The ID of the sample which needs to be updated.
        """
        sampleId: Int!
    ): BasicMutationResult!

    """
    Submits an action code to a submitted or open order
    """
    orderSubmitActionCode(actionCode: String!): BasicMutationResult!

    """
    Adds a gift card to the user account
    """
    paymentsAddGiftCard(
        """
        Channel of origin
        """
        channel: PaymentChannel!

        """
        Card Credentials
        """
        giftCardCredentials: GiftCardCredentials!
    ): PaymentsAddGiftCardResult!

    """
    Authorizes given transaction that exists in our infrastructure. Typically used for completing a payment.
    """
    paymentsAuthorizeTransaction(
        """
        Request information in order to authorize payment
        """
        authorizeRequest: PaymentsAuthorizeInput!
    ): PaymentsAuthorizeResult!

    """
    Onboards a debit-card-tokenization token to the user account to pay in the checkout
    The PrimaryAccountNumber (PAN) is tokenized and stored in the payment profile
    """
    paymentsOnboardDCTToken(
        """
        Channel of origin
        """
        channel: PaymentChannel!

        """
        Token information
        """
        token: PaymentsDctCardOnboardingInput!
    ): PaymentsOnboardDCTTokenResult!

    """
    Updates the PaymentCard in the system
    """
    paymentsUpdateCard(
        """
        Update card Alias
        """
        cardAlias: String

        """
        identifier of the card
        """
        cardId: String!

        """
        Set card as default
        """
        default: Boolean

        """
        Update Payment Token status for example: SUSPENDED, DELETED, ACTIVE
        """
        status: PaymentTokenStatus

        """
        type of the card (PaymentsGiftCard or PaymentsDCTCard)
        """
        type: PaymentCardType!
    ): PaymentsUpdateCardResult!

    """
    Enables a customer pickup location
    """
    pickupLocationEnable(locationCode: String!): PickupLocationEnableResult

    """
    Creates a product complaint for an online order
    """
    productComplaintOnlineOrder(
        """
        An optional comment
        """
        comment: String

        """
        Ids of uploaded images
        """
        imageIds: [String!]

        """
        The id of the order
        """
        orderId: Int!

        """
        The id of the product
        """
        productId: Int!

        """
        The number of items that will be returned
        """
        quantity: Int!

        """
        The amount of the settlement (0% 25% 50% 75% 100%)
        """
        settlementFraction: Float!

        """
        The type of complaint
        """
        type: FeedbackType!
    ): CreateProductComplaintResult!

    """
    Creates a product complaint for a store purchase
    """
    productComplaintStorePurchase(
        """
        optional comments
        """
        comment: String

        """
        Store product id
        """
        hqId: Int!

        """
        Ids of uploaded images
        """
        imageIds: [String!]

        """
        The id of the store purchase
        """
        purchaseId: String!

        """
        The number of products
        """
        quantity: Int!

        """
        The type of complaint
        """
        type: FeedbackType!
    ): CreateProductComplaintResult!

    """
    Creates a product return
    """
    productReturn(
        """
        An optional comment
        """
        comment: String

        """
        The id of the order
        """
        orderId: Int!

        """
        The id of the product
        """
        productId: Int!

        """
        The number of items that will be returned
        """
        quantity: Int!
    ): CreateProductReturnResult!

    """
    Creates a new secret and returns it back to the client. These secrets are used together
    with the current server time to create TOTP codes, which works fully offline. The secret
    cannot be fetched from the backend after being created, so the client will need to store
    it. Takes in the ID of the secret, which doubles as the "device ID". If a frontend
    consumer wants to recreate a secret, it is preferred that the same ID is passed along.
    The created secret will have the same ID as the provided ID.
    """
    purchaseStampCreateSecret(id: UUID!): PurchaseStampSecretMutationResult!

    """
    Delete the member's purchase stamp saving goal.
    """
    purchaseStampSavingGoalDelete: PurchaseStampSavingGoalMutationResult!

    """
    Sets the purchase stamp saving goal for the member.
    A member can only have one purchase stamp saving goal.
    In case of multiple call, the purchase stamp saving goal will be overwritten.
    """
    purchaseStampSavingGoalSet(
        """
        The amount of the purchase stamp saving goal.
        """
        amount: Int!

        """
        The name of the purchase stamp saving goal.
        """
        name: String!
    ): PurchaseStampSavingGoalMutationResult!

    """
    Update push token
    """
    pushNotificationsTokenUpdate(tokenUpdateParameters: PushNotificationsTokenUpdateInput!): BasicMutationResult!

    """
    Assign recipe to the given categories
    """
    recipeCollectionAssignRecipeToCategories(
        """
        List of categories to associate the recipe with
        """
        categoryIds: [Int!]!

        """
        Recipe Type defines where it comes from
        """
        collectedRecipeType: CollectionCategoryRecipeType

        """
        Recipe id
        """
        recipeId: Int!
    ): RecipeCollectionAssignRecipeToCategoriesResult!

    """
    Create recipe collection category
    """
    recipeCollectionCreateCategoryV2(
        """
        Category name
        """
        name: String!
    ): RecipeCollectionCreateCategoryResult!

    """
    Create recipe collection category
    """
    recipeCollectionDeleteCategoryV2(
        """
        Category id
        """
        id: Int!
    ): RecipeCollectionDeleteCategoryResult!

    """
    Remove recipe from all categories
    """
    recipeCollectionRemoveRecipeFromCategoriesV3(
        """
        Recipe Type defines where it comes from
        """
        collectedRecipeType: CollectionCategoryRecipeType

        """
        Collected recipe id
        """
        recipeId: Int!
    ): RecipeCollectionRemoveRecipeFromCategoriesResult!

    """
    Create recipe collection category
    """
    recipeCollectionUpdateCategoryV2(
        """
        Category id
        """
        id: Int!

        """
        Category name
        """
        name: String!
    ): RecipeCollectionUpdateCategoryResult

    """
    Delete recipe preference / reset to initial state
    """
    recipeDeleteFoodPreferences: BasicMutationResult!

    """
    Delete a member recipe
    """
    recipeDeleteMemberRecipe(id: Int!): DeleteMemberRecipeMutationResult!

    """
    Update member recipe preferences
    """
    recipeSaveFoodPreferences(foodPreferences: MemberFoodPreferencesInput!): BasicMutationResult!

    """
    Save member recipe
    """
    recipeSaveMemberRecipe(memberRecipe: MemberRecipeInput!): SaveMemberRecipeMutationResult!

    """
    Set rating which user gave
    """
    recipeSetMemberRatingV2(
        """
        Recipe id
        """
        id: Int!

        """
        Rating which user gave
        """
        rating: Int!
    ): RecipeSetMemberRatingResult!

    """
    save member-product-selections, should always return true
    """
    recipeShoppableSaveSelectionV2(
        """
        member product selections
        """
        productSelection: RecipeShoppableSaveSelectionParams!
    ): RecipeShoppableSaveSelectionResult

    """
    Save member recipe
    """
    saveMemberRecipe(memberRecipe: MemberRecipeInput!): SaveMemberRecipeMutationResult!
        @deprecated(
            reason: "@sunset_date(2024-02-01) - checked 2023-12-29 - used in appie-ios appie-android appie-be-ios - mutation has been renamed to recipeSaveMemberRecipe to match module prefix standard \n. use recipeSaveMemberRecipe. "
        )

    """
    Cancel a settlement
    """
    settlementCancel(id: String!): BasicMutationResult!

    """
    Create a new gift link to be shared with another member. The gift link belongs to the
    currently authenticated member.
    """
    stampSharingGiftLinkCreate(
        """
        The number of stamps to gift through the gift link.
        """
        numberOfStamps: Int!

        """
        The program / saving campaign that is connected to this gift link.
        """
        programId: Int!
    ): StampShareableMutationResult!

    """
    Deletes a gift link created by the currently authenticated member.
    """
    stampSharingGiftLinkDelete(
        """
        The shareable ID. This is the ID that is embedded in the request link.
        """
        shareableId: Int!
    ): StampShareableMutationResult!

    """
    Transfer stamps from a gifting member to an accepting member using the shareable ID.
    Uses the authenticated member as the accepting member, and the member that created the
    gift link as the gifting member.
    """
    stampSharingGiftTransfer(
        """
        The shareable ID. This is the ID that is embedded in the request link.
        """
        shareableId: String!
    ): StampTransferMutationResult!

    """
    Transfer stamps from a giving member to the requesting member using the shareable ID.
    Uses the authenticated member as the giving member, and the member that created the
    request link as the requesting member.
    """
    stampSharingRequestTransfer(
        """
        The number of stamps to send from the giving member to the requesting member.
        """
        numberOfStamps: Int!

        """
        The shareable ID. This is the ID that is embedded in the request link.
        """
        shareableId: String!
    ): StampTransferMutationResult!

    """
    Deletes an Receipt of an purchase that you made InStore
    """
    storeReceiptDelete(
        """
        id of the receipt
        """
        id: String!
    ): MutationResult

    """
    Set member favourite store to a specific store
    Returns true if successful, otherwise will return an error object
    """
    storesSetFavouriteStore(
        """
        Id of store to set as favourite
        """
        id: Int
    ): BasicMutationResult

    """
    Applying a promocode to the member's account. Resulting in changed prices of subscriptionBundles.
    Is only applicable when the subscriptionBundles are used on client-side (not subscriptionAvailable).
    Returns an array of subscriptionBundles with the new prices.
    """
    subscriptionBundlePromoCodeApply(
        """
        The bundleId of the subscriptionBundle one wishes to apply the promo code on
        """
        bundleId: String!

        """
        The promotion code to apply on the purchasable bundle
        """
        promoCode: String!

        """
        Use the v2 BE endpoint instead of v1. This param is to avoid unnecessary doubling of the same query.
        """
        returnV2Bundles: Boolean

        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: SubscriptionType!
    ): SubscriptionBundlePromoCodeApplyResult!

    """
    Subscribe to a subscription such as PREMIUM and/or delivery bundle. Supports both singular subscriptions and subscription bundles.
    Use this is combination with query subscriptionBundlesAvailable.
    """
    subscriptionBundleSubscribe(
        """
        The id of the bundle. Contains the details of what subscriptionCode you are subscribing to.
        Can be retrieved via the query subscriptionBundlesAvailable.
        """
        bundleId: ID!

        """
        Which IDEAL issuer the customer is using to pay for the subscription
        """
        idealIssuerId: Int!

        """
        Promotion code if applicable
        """
        promoCode: String

        """
        Url to return to after completing payment
        May include query parameters
        """
        returnUrl: String!

        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: SubscriptionType!
    ): SubscriptionBundleSubscribeMutationResult!

    """
    Cancel subscription
    When canceling delivery-bundle it cancels order-plan (if one exists) as a side-effect
    """
    subscriptionCancel(
        """
        Date on which to cancel the subscription
        """
        endDate: String!

        """
        Type of Subscription to cancel
        """
        type: String!
    ): SubscriptionCancelMutationResult!

    """
    Applying a promocode to the current subscription of the member. Differs from subscriptionBundlePromoCodeApply since this mutation
    only does one single definition and is only usable when you have a subscriptionCurrent.
    """
    subscriptionCurrentPromoCodeApply(
        """
        The definitionId of the current subscription
        """
        definitionId: Int!

        """
        The promotion code to apply on the definition of the current subscription
        """
        promoCode: String!

        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: SubscriptionType!
    ): SubscriptionCurrentPromoCodeApplyResult!

    """
    Subscription definition change for a member. Within a certain subscription type, such as delivery-bundle (BEZORG),
    you can change to a 1 or 12 month subscription.
    Use subscriptionCalculateChange query first to get an overview of the change's consequences.
    """
    subscriptionDefinitionChange(
        """
        Code of the subscription definition to change to
        """
        code: String!

        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: String!
    ): SubscriptionDefinitionChangeMutationResult!

    """
    Applying a reactivation to the current subscription of the member
    """
    subscriptionReactivate(
        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: SubscriptionType!
    ): SubscriptionReactivateResult!

    """
    Set subscriptionFixedDeiverySlot for a member
    """
    subscriptionSetFixedDeliverySlot(
        """
        The chosen slot. If null, the mutation unsets the fixed deliveryslot
        """
        slot: SubscriptionSlotInput

        """
        The subscriptionType. For example: OMNI, BEZORG, B2B
        """
        type: String!
    ): SubscriptionSetFixedDeliverySlotMutationResult!

    """
    Subcribe subscription to member
    Must supply iDEAL as payment provider
    """
    subscriptionSubscribe(
        """
        Code of Subscription to calculate change to
        """
        code: String

        """
        Which payment provider to use
        """
        paymentProvider: SubscriptionPaymentProvider!

        """
        Promotion code if applicable
        """
        promoCode: String

        """
        Url to return to after completing payment
        May include query parameters
        """
        returnUrl: String!

        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: String!
    ): SubscriptionSubscribeMutationResult!
        @deprecated(
            reason: "@sunset_date(2023-02-01) - checked 2023-06-15 - used in appie-ios@8.29.1  - subscriptionBundleSubscribe supports both singular and bundle subscriptions \n. subscriptionBundleSubscribe. "
        )

    """
    Allocates a new targeted offer for a member. The member might not be eligible for another
    targeted offer, and as such this mutation might return an unsuccessful state. Only members
    can allocate targeted offers, not automated systems.
    """
    targetedOfferAllocate(programId: Int!): TargetedOfferAllocationMutationResult!

    """
    Resolver throws MutationResultError
    """
    testError: TestMutationResult

    """
    Resolver throws TypeError
    """
    testErrorThrown: TestMutationResult

    """
    Resolves with status=Failed
    """
    testFailed: TestMutationResult

    """
    Resolves with status=Partial
    """
    testPartial: TestMutationResult

    """
    Resolves succesfully
    """
    testSuccess: TestMutationResult

    """
    Resolver throws suppressed error
    """
    testSuppressed: TestMutationResult!

    """
    Required arguments
    """
    testWithArguments(arguments: TestWithArgumentsInput!): TestMutationResult!
}

"""
Result of performing mutation
"""
interface MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

enum MutationResultStatus {
    """
    Mutation failed completely
    """
    FAILED

    """
    Mutation succeeded partially
    """
    PARTIAL

    """
    Mutation succeeded
    """
    SUCCESS
}

"""
Member name input
"""
input NameInput {
    """
    Member's first name
    """
    first: String!

    """
    Member's last name
    """
    last: String!
}

"""
Arguments for creating a new grocery list item
"""
input NewGroceryItem {
    """
    Is the product crossed off
    """
    crossedOff: Boolean!

    """
    Position of the item in the list
    """
    position: Int!

    """
    The actual product
    """
    productId: Int!

    """
    Quantity of the item
    """
    quantity: Int!
}

"""
Arguments for creating a new note
"""
input NewNote {
    """
    Is the product crossed off
    """
    crossedOff: Boolean!

    """
    The actual product
    """
    description: String!

    """
    Position of the item in the list
    """
    position: Int!
}

"""
A note on a grocery list
"""
type Note {
    """
    Is the product crossed off
    """
    crossedOff: Boolean!

    """
    The actual product
    """
    description: String!

    """
    Note id
    """
    id: String!

    """
    Position of the item in the list
    """
    position: Int!
}

"""
Notification Base
"""
interface Notification {
    """
    Notification id
    """
    id: String!

    """
    Link object with title and href
    """
    link: NotificationLink!

    """
    Type of the notification
    """
    type: NotificationType!
}

"""
CMS Notification
"""
type NotificationCMS implements Notification {
    """
    Custom classification of the notification, e.g. 'Belangrijke Veligheidswaarschuwing'
    """
    classification: String!

    """
    Notification id
    """
    id: String!

    """
    Is the notification visible on the whole website
    """
    isGlobalNotification: Boolean!

    """
    Link object with title and href
    """
    link: NotificationLink!

    """
    Priority of notification, e.g. 'HIGH' or 'MEDIUM'
    """
    priority: NotificationPriorityType

    """
    Priority label of notification, e.g. 'Veligheidswaarschuwing'
    """
    priorityLabel: String

    """
    Type of the notification
    """
    type: NotificationType!
}

"""
Enum for notification icons
"""
enum NotificationIcon {
    """
    delivery icon
    """
    DELIVERY

    """
    home delivery icon
    """
    HOME_DELIVERY

    """
    pickup icon
    """
    PICKUP

    """
    pickup home delivery icon
    """
    PICKUP_HOME_DELIVERY
}

"""
Notification link with href and title
"""
type NotificationLink {
    """
    href
    """
    href: String!

    """
    title
    """
    title: String!
}

"""
Enum Priority type of notification
"""
enum NotificationPriorityType {
    """
    e.g. safety warnings and product recalls
    """
    HIGH

    """
    e.g. customer care messages, outages
    """
    MEDIUM
}

"""
NotificationType
"""
enum NotificationType {
    """
    type for safety warnings, product recalls and failures which impacts users e.g. priority notifications. Will return all CMS notifications.
    """
    CMS

    """
    type for safety warnings, product recalls and failures which impacts users e.g. priority notifications. Will only return CMS notifications which have isGlobalNotification set to true.
    """
    CMS_GLOBAL

    """
    type for safety warnings, product recalls and failures which impacts users e.g. priority notifications. Will only return CMS notifications which have isGlobalNotification set to true and will return 'HIGH' priority notifications as one combined notification.
    """
    CMS_GLOBAL_COMBINED

    """
    type for safety warnings, product recalls and failures which impacts users e.g. priority notifications. Will only return CMS notifications which have isGlobalNotification set to false.
    """
    CMS_NOT_GLOBAL

    """
    type for delivery notification
    """
    ORDER
}

"""
Nudge types, which indicated the category of slots. SUSTAINABLE or EXCLUDE_INEFFICIENT. More to come soon
"""
enum NudgeType {
    """
    When a slots is excluded based on the delta values
    """
    EXCLUDE_INEFFICIENT

    """
    Special milkman routes which contains 2 hour-max slots.
    """
    MILKMAN

    """
    Service fee discount.
    """
    SERVICE_FEE_DISCOUNT

    """
    When a slot is eco friendly it gets the sustainable nudge type
    """
    SUSTAINABLE

    """
    Unknown nudge type.
    """
    UNKNOWN
}

"""
All Nutri-Score values
"""
enum NutriScore {
    A
    B
    C
    D
    E
}

"""
Result object with the nutriscore for the user
"""
type NutriScoreDistribution {
    """
    Gives the nutriscore can be: A, B, C, D or E
    """
    nutriscore: String!

    """
    Percentage of the nutriscore can be a number from 0 to 100
    """
    percentage: Int!

    """
    All products from the nutriscore category purchased by the user
    """
    products: [Product]!
}

"""
Get an overview of the nutriscore from a user with all purchased products
"""
type NutriScoreOverview {
    """
    When input is invalid it will give an error
    """
    error: String

    """
    Result object with the nutriscore for the user
    """
    nutriscoreDistribution: [NutriScoreDistribution]
}

"""
The method of an OCI shop session
"""
enum OciShopSession {
    """
    Default order
    """
    DEFAULT

    """
    Reopenable order
    """
    REOPENABLE
}

"""
Offset / Limit pagination input type

@example Using a default value, so that pagination input is not required.
extend type Query {
   queryWithPagination(
     pagination: OffsetLimitPagination! = { offset: 0, limit: 50 }
   ): [SomeResultType!]!
}
"""
input OffsetLimitPagination {
    limit: Int!
    offset: Int!
}

"""
Order
"""
type Order {
    """
    Get the calculated receipt of a potential order
    """
    checkoutCalculation(
        """
        the purchase stamps booklets applied to this order
        """
        appliedPurchaseStampsBookletQuantity: Int

        """
        The purchase stamps booklets that the customer
        """
        maxPurchaseStampsBookletQuantity: Int

        """
        NPL Card Id
        """
        nplCardId: String
    ): OrderCalculationReceipt

    """
    DateTime that the order closes and can no longer be modified
    """
    closingDateTime: String!

    """
    Delivery for order
    """
    delivery: Delivery

    """
    Display time of when order ends
    """
    entryEndDisplayTime: String!

    """
    Id of order
    """
    id: Int!

    """
    Whether the order is expired
    """
    isExpired: Boolean!

    """
    Whether transaction is completed
    """
    isTransactionComplete: Boolean

    """
    Timestamp when the user has changed the order
    """
    lastUserChangeTime: String

    """
    Message for recipient
    """
    messageForRecipient: String

    """
    Get minimum order value
    """
    minimumValue: Money!

    """
    The orderLines (products & amount)
    """
    orderLines: [OrderLineV2!]!

    """
    Method of order
    """
    orderMethod: Int!

    """
    Pricing of order
    """
    price: OrderPrice

    """
    Earliest closing time of changing products
    """
    productsClosingTime: String

    """
    The Receipt for the order
    """
    receipt: OrderReceipt

    """
    Number of times order is reopened
    """
    reopened: Int!

    """
    shopping type of the order
    """
    shoppingType: OrderShoppingType!

    """
    State of order
    """
    state: OrderState!

    """
    order is submitted
    """
    submitted: Boolean!
}

"""
Result of performing mutation
"""
type OrderBudgetMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Basket after performing the mutation
    """
    result: Budget

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result of performing get budget for the budgetmonitor
"""
type OrderBudgetResult {
    """
    Error will be set when user is not authorized to call this endpoint
    """
    errorMessage: String

    """
    Order budget from budget monitor
    """
    result: Budget
}

"""
Calculation Receipt of an Order
"""
type OrderCalculationReceipt {
    """
    Additional information about positive service memo
    """
    additionalInfo: [String!]

    """
    Additional items to the receipt
    """
    additionalItems: [AdditionalReceiptItem!]!

    """
    Amount of groceries
    """
    groceriesQuantity: Int!

    """
    Total Price after settlements, service kosts, klapkratten, purchase stamps etc etc.
    """
    totalPrice: Money!

    """
    Wallet Options to apply to the order
    """
    walletOptions: CheckoutWalletOptions
}

"""
Order checkin mutation result.
"""
type OrderCheckinMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Order id
    """
    orderId: Int

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Address where the order should be delivered.
"""
input OrderDeliveryAddress {
    """
    Delivery city
    """
    city: String

    """
    Delivery country code
    """
    countryCodeAlpha3: String

    """
    Delivery house number
    """
    houseNumber: Int

    """
    Delivery house number extra
    """
    houseNumberExtra: String

    """
    Delivery postal code
    """
    postalCode: String

    """
    Delivery street
    """
    street: String
}

"""
The status of an order's delivery.
"""
enum OrderDeliveryStatus {
    """
    The delivery has been cancelled
    """
    CANCELLED

    """
    The delivery has been delivered
    """
    DELIVERED

    """
    The delivery has been entered
    """
    ENTERED

    """
    The delivery has been created with a timeslot that is valid for 1.5 hours
    """
    ENTERED_WITH_DELIVERY_BLOCK

    """
    The delivery is being packaged
    """
    PACKAGING

    """
    The order belonging to the delivery has been reopened
    """
    REOPENED

    """
    The delivery has been submitted and a timeslot has been reserved
    """
    SUBMITTED

    """
    The delivery has been submitted with a short eta
    """
    SUBMITTED_WITH_SHORTREC_ETA

    """
    The delivery has been submitted
    """
    SUBMITTED_WITH_SIMACAN_ETA

    """
    The delivery status is unknown
    """
    UNKNOWN
}

"""
Order lines
"""
type OrderLineV2 {
    """
    Amount of items that are already allocated for a user
    """
    allocatedQuantity: Int

    """
    time of when the product can not be removed anymore
    """
    closingTime: String

    """
    The page code where the item is added from
    """
    originCode: String

    """
    Product id
    """
    product: Product!

    """
    Amount of product in order
    """
    quantity: Int!
}

"""
Price of Order
"""
type OrderPrice {
    """
    Price after discount
    """
    priceAfterDiscount: Money

    """
    Price before discount
    """
    priceBeforeDiscount: Money

    """
    Amount discount
    """
    priceDiscount: Money

    """
    Price total to be paid
    """
    priceTotalPayable: Money
}

"""
Receipt of the order
"""
type OrderReceipt {
    """
    Amount required as deposit
    """
    deposit: Money!

    """
    Discounts applied
    """
    discounts: [OrderReceiptModifier!]!

    """
    Amount before discounts and service costs
    """
    netPrice: Money!

    """
    Personal discount applied
    """
    personalDiscount: Money!

    """
    Additional service costs
    """
    serviceCosts: [OrderReceiptModifier!]!

    """
    Amount before discounts and service costs
    """
    subTotal: Money!

    """
    Amount after discounts and service costs
    """
    total: Money!

    """
    Discounts given by bonus
    """
    totalBonusDiscount: Money!
}

"""
Service cost or discount modifier
"""
type OrderReceiptModifier {
    """
    Amount modified
    """
    price: Money!

    """
    Human readable description of modifier
    """
    title: String!
}

"""
Sample products that belong to an order.
"""
type OrderSample {
    """
    Description of the sample.
    """
    description: String

    """
    Id of the sample.
    """
    id: Int

    """
    Returns true if the sample is premium which means it should be emphasized.
    """
    premium: Boolean!

    """
    Product information of the sample
    """
    product: Product

    """
    Whether the customer is allowed to reject the sample.
    """
    rejectAllowed: Boolean!

    """
    Returns true if the sample is rejected.
    """
    rejectSample: Boolean!

    """
    Sales unit size description.
    E.g. "per stuk"
    """
    salesUnitSize: String
}

"""
Shopping type of the order
"""
enum OrderShoppingType {
    """
    order gets delivered to the user
    """
    DELIVERY

    """
    Order can be collected on pickup point
    """
    DELIVERY_POINT

    """
    Order is picked up from the store
    """
    IN_STORE_PICK

    """
    order is made in physical store
    """
    PHYSICAL_STORE

    """
    Order is pickup
    """
    PICKUP

    """
    Order will be delivered to pickup point
    """
    PICKUP_DELIVERY

    """
    Specials only
    """
    SPECIALS_ONLY

    """
    shopping type unknown
    """
    UNKNOWN
}

"""
Slot of the order.
"""
input OrderSlot {
    """
    Date of the delivery
    """
    date: String!

    """
    Location id of the delivery
    """
    deliveryLocationId: Int!

    """
    Code of the delivery shift
    """
    shiftCode: String!
}

"""
States order can be in
"""
enum OrderState {
    """
    The order has been cancelled
    """
    CANCELLED

    """
    The order has been delivered
    """
    DELIVERED

    """
    The order is being packaged
    """
    ENTERED

    """
    The order has been created with a timeslot that is valid for 1.5 hours
    """
    ENTERED_WITH_DELIVERY_BLOCK

    """
    The order has been reopened
    """
    REOPENED

    """
    The order has been submitted and a timeslot has been reserved
    """
    SUBMITTED

    """
    The order cannot be altered and is being processed (picked/packed)
    """
    SUBMITTED_WITH_SHORTREC_ETA

    """
    The order cannot be altered and is being transported to destination
    """
    SUBMITTED_WITH_SIMACAN_ETA
}

"""
We will show the total amount of items available, the offset its started in and the amount of items given back.
"""
type PageInfo {
    """
    do we have a next page? relay-page-info-spec
    """
    hasNextPage: Boolean!

    """
    total results for whole unpaginated collection
    """
    total: Int!
}

"""
Pagination descriptor
"""
input PageInput {
    """
    If true, products from pages [0..number] will be merged
    and all the products from all the pages will be returned.
    """
    merged: Boolean

    """
    How many pages to return.
    Page numbers are 0-based, so the first page has index of 0.
    The 0-th is also the default page, so if no number provided, the 0-th page is returned.
    """
    number: Int

    """
    Set number of products per page.
    The default value is 30.
    """
    size: Int
}

"""
Number (Int) of items from results. Value can be 1 till 100
"""
scalar PageSize

"""
Page / Size pagination input type

@example Using a default value, so that pagination input is not required.
extend type Query {
   queryWithPagination(
     pagination: PageSizePagination! = { page: 0, size: 50 }
   ): [SomeResultType!]!
}
"""
input PageSizePagination {
    page: Int!
    size: Int!
}

"""
Keep track of the pages of given items
"""
type Pagination {
    """
    Number of given items
    """
    offset: Int!

    """
    Size of all items for this page
    """
    pageSize: Int!

    """
    Total size of all items
    """
    totalSize: Int!
}

"""
Contains the rules and result against user password
"""
type PasswordRulesValidated {
    """
    Show if provided password is valid
    """
    isValid: Boolean!

    """
    Rules on which the password was tested
    """
    rules: [RuleValidated!]!
}

"""
Type that defines currency and the amount in money
"""
type PaymentAmount {
    """
    amount in money
    """
    amount: Money!

    """
    Currency used
    """
    currency: PaymentTransactionCurrencies!
}

"""
Card Type to update DCT Card (Required by Payments)
"""
enum PaymentCardType {
    """
    DCT Card Type
    """
    DCT

    """
    GiftCard CardType
    """
    GIFT_CARD
}

"""
Channel of processing
"""
enum PaymentChannel {
    """
    Mobile (Android)
    """
    ANDROID

    """
    Mobile (iOS)
    """
    IOS

    """
    Web (Web Browser)
    """
    WEB
}

"""
Available Payment Issuer
"""
type PaymentIssuer {
    """
    Id of the issuer
    """
    id: Int!

    """
    Logo of the payment issuer url
    """
    image: String!

    """
    logo id of the issuer
    """
    issuerLogoId: String!

    """
    name of the issuer
    """
    name: String!

    """
    Url to invoke of the issuer
    """
    url: String
}

"""
Payment method that the customer can use
"""
enum PaymentMethod {
    """
    Correction transaction
    """
    CORRECTION

    """
    Debit Card Tokenization, Reserving amounts on bank accounts
    """
    DCT

    """
    E Value
    """
    EVALUE

    """
    Gift card
    """
    GIFT_CARD

    """
    Instantly pay through Ideal
    """
    IDEAL

    """
    Pay at the delivery moment
    """
    PAY_AT_DELIVERY

    """
    Purchase Stamps
    """
    PURCHASE_STAMPS
}

"""
The input values to submit the new payment method for a B2B user, either by invoice or payment slip
"""
input PaymentMethodUpdateInput {
    """
    Department to which the invoice should be redirected
    """
    department: String!

    """
    E-mailadres to where invoices should be send
    """
    emailInvoice: String!

    """
    E-mailadres to where a reminder should be send to in case of late payment
    """
    emailReminder: String!

    """
    KvkId of company's head of office
    """
    holding: String!

    """
    Website of company requesting payment by invoice
    """
    website: String!
}

"""
A change that ocurred to a payment
"""
type PaymentMutation {
    """
    The id of the mutation that is being performed on the payment
    """
    mutationId: String!

    """
    Operations
    """
    operations: [PaymentMutationOperation!]!

    """
    Status of the mutation
    """
    status: PaymentMutationStatus!
}

"""
Payment Mutation Error
"""
type PaymentMutationError {
    """
    Given Error code
    """
    errorCode: String!

    """
    Error message
    """
    errorMessage: String!

    """
    Whether the payment mutation was successful or not
    """
    success: Boolean!
}

"""
Operations that were applied on an PaymentMutation
"""
type PaymentMutationOperation {
    """
    error object
    """
    error: PaymentMutationError

    """
    The id of the operation that is being performed on the given payment
    """
    operationId: String!

    """
    Operation Status
    """
    operationStatus: PaymentOperationStatus

    """
    Payment Operation type
    """
    operationType: PaymentOperationType

    """
    transactionId
    """
    transactionId: String!
}

"""
Payment Mutation Status
"""
enum PaymentMutationStatus {
    """
    Failed
    """
    FAILED

    """
    In Progress
    """
    IN_PROGRESS

    """
    Success
    """
    SUCCESS
}

"""
Defines status of an operation
"""
enum PaymentOperationStatus {
    """
    Declined
    """
    DECLINED

    """
    Expired
    """
    EXPIRED

    """
    Failed
    """
    FAILED

    """
    New
    """
    NEW

    """
    Pending
    """
    PENDING

    """
    Skipped
    """
    SKIPPED

    """
    success
    """
    SUCCESS
}

"""
Type of operation that is executed
"""
enum PaymentOperationType {
    """
    adjust
    """
    ADJUST

    """
    cancel
    """
    CANCEL

    """
    capture
    """
    CAPTURE

    """
    create
    """
    CREATE

    """
    extend
    """
    EXTEND

    """
    rollback
    """
    ROLLBACK
}

"""
Payment option that the user can use
"""
type PaymentOption {
    """
    Issuer id to retrieve the issuers
    """
    issuers: [PaymentIssuer!]

    """
    Payment method
    """
    option: PaymentMethod!

    """
    Status of the payment option
    """
    status: PaymentOptionStatus!

    """
    List of registered tokens
    """
    tokens: [PaymentToken!]
}

"""
Status of the PaymentOption
"""
enum PaymentOptionStatus {
    """
    ACTIVE
    """
    ACTIVE

    """
    DISABLED
    """
    DISABLED

    """
    Enrollment Disabled
    """
    ENROLLMENT_DISABLED
}

"""
Payment SDK that needs to be consumed
"""
type PaymentSDK {
    """
    SDK Type
    """
    id: PaymentSDKType!

    """
    Minimal version of the SDK component
    """
    minVersion: String!
}

"""
Payment SDK Type
"""
enum PaymentSDKType {
    """
    Adyen SDK
    """
    ADYEN
}

"""
Defining the status of an Payment
"""
enum PaymentStatus {
    """
    Payment Cancelled
    """
    CANCELLED

    """
    Payment failed
    """
    FAILED

    """
    Payment in progress
    """
    IN_PROGRESS

    """
    New payment
    """
    NEW

    """
    Payment successful
    """
    SUCCESS
}

"""
Registered token
"""
type PaymentToken {
    """
    Alias of the card
    """
    cardAlias: String

    """
    CardArtId
    """
    cardArtId: String

    """
    Date of token creation
    """
    createdDate: DateTime!

    """
    Is user default card
    """
    default: Boolean!

    """
    Id of the token
    """
    id: String!

    """
    id of the issuer company
    """
    issuerId: String

    """
    Payment token provider
    """
    psp: PaymentTokenPspProvider!

    """
    State of the card
    """
    status: PaymentTokenStatus!
}

"""
Provider of Psp
"""
enum PaymentTokenPspProvider {
    """
    Adyen
    """
    ADYEN

    """
    AH
    """
    AH

    """
    ING
    """
    ING

    """
    Intersolve
    """
    INTERSOLVE
}

"""
Card status of the payment token
"""
enum PaymentTokenStatus {
    """
    Card is active
    """
    ACTIVE

    """
    Card has been deleted
    """
    DELETED

    """
    Card has been expired
    """
    EXPIRED

    """
    Card is inactive
    """
    INACTIVE

    """
    Card is suspended
    """
    SUSPENDED
}

"""
Payment Transaction Currencies
"""
enum PaymentTransactionCurrencies {
    """
    Euro - EUR
    """
    EUR
}

"""
Payment Transaction Status
"""
enum PaymentTransactionStatus {
    """
    authorized
    """
    AUTHORIZED

    """
    cancelled
    """
    CANCELLED

    """
    cancelling
    """
    CANCELLING

    """
    capturing
    """
    CAPTURING

    """
    completed
    """
    COMPLETED

    """
    declined
    """
    DECLINED

    """
    expired
    """
    EXPIRED

    """
    failed
    """
    FAILED

    """
    new
    """
    NEW

    """
    pending
    """
    PENDING
}

"""
Result of adding a GiftCard
"""
type PaymentsAddGiftCardResult implements MutationResult {
    """
    Created card
    """
    card: PaymentsGiftCard

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Response code of the giftCard
    """
    gitCardResponseCode: GiftCardResponseCode!
        @deprecated(reason: "Use PaymentsTokenOnboardingResponseCode instead \n. . ")

    """
    Replacement of onboarding response code
    """
    onboardingResponseCode: PaymentsTokenOnboardingResponseCode!

    """
    Result of adding the card to the account
    """
    status: MutationResultStatus!
}

"""
Input to authorize transaction
"""
input PaymentsAuthorizeInput {
    """
    AuthorizationId
    """
    authorizationId: String!

    """
    result of the challenge
    """
    challengeResult: PaymentsChallengeResult!

    """
    Id of the payment
    """
    paymentId: String!
}

"""
Payments Authorize result
"""
type PaymentsAuthorizeResult implements MutationResult {
    """
    Further actions and or payments that need to be taken
    """
    action: CheckoutOrderSubmissionPayment

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Data of the challenge result provided by PSP
"""
input PaymentsChallengeResult {
    data: String!
}

"""
DCT Card Type
"""
type PaymentsDCTCard implements Card {
    """
    Card Alias of the Card
    """
    cardAlias: String

    """
    Card Art Id
    """
    cardArtId: String

    """
    Card Id is the id unique in the system
    """
    cardId: String!

    """
    Date card was added to payment profile
    """
    createdDate: DateTime

    """
    is default DCT card
    """
    default: Boolean

    """
    issuer Id of the card
    """
    issuerId: String

    """
    status of the card
    """
    status: PaymentTokenStatus
}

"""
Input required to onboard DCT Tokens
"""
input PaymentsDctCardOnboardingInput {
    cardAlias: String

    """
    The push account receipt reived from the issuer to create a token. Note that the only first record will be processed
    """
    pushAccountReceipts: [String!]!
}

"""
Gift Card such as NPL
"""
type PaymentsGiftCard implements Card {
    """
    Balance on the given card
    """
    balance: PaymentAmount

    """
    tokenId
    """
    cardId: String!

    """
    Card Number of the underlying source
    """
    cardNumber: String

    """
    Creation Date of the GiftCard Token
    """
    createdDate: DateTime

    """
    Status of the given token
    """
    status: PaymentTokenStatus
}

"""
Result of onboarding DCT Token
"""
type PaymentsOnboardDCTTokenResult implements MutationResult {
    """
    The created card
    """
    card: PaymentsDCTCard

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Information from merchant of onboarding
    """
    onboardingResult: DCTOnboardingResult

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Return union for all cards
"""
union PaymentsOrderCards = PaymentsDCTCard | PaymentsGiftCard

"""
Return type for applied transactions on a order
"""
type PaymentsOrderTransactions {
    """
    List of dct cards applied on the order
    """
    dct: [PaymentsDCTCard!]!

    """
    List of giftCards applied to the order
    """
    giftCard: [PaymentsGiftCard!]!

    """
    List of transactions from purchase stamps
    """
    purchaseStamps: [PaymentsPurchaseStampTransaction!]!
}

"""
Purchase stamp account
"""
type PaymentsPurchaseStampTransaction {
    """
    amount of booklets in transaction
    """
    bookletsAmount: Int!
}

"""
Replacement of GiftCard Response code
"""
enum PaymentsTokenOnboardingResponseCode {
    """
    Gift Card is already connected
    """
    ALREADY_CONNECTED

    """
    Gift Card Approvded
    """
    APPROVED

    """
    GiftCard is declined
    """
    DECLINED

    """
    General Error
    """
    ERROR

    """
    Card is blocked
    """
    FORBIDDEN

    """
    Gift Card is not activated
    """
    NOT_ACTIVATED

    """
    Giftcard has no balance
    """
    NO_BALANCE

    """
    Gift Card requires verification
    """
    REQUIRE_ADDITIONAL_AUTHENTICATION
}

"""
Payments Update card result
"""
type PaymentsUpdateCardResult implements MutationResult {
    """
    Created card
    """
    card: PaymentsOrderCards

    """
    Result code of updating the card
    """
    errorCode: UpdateCardResultCode

    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result status of updating the card
    """
    status: MutationResultStatus!
}

"""
Customer care phone channel
"""
type PhoneChannel {
    """
    Availablity and next availability
    """
    availability: ChannelAvailabilityForDay!

    """
    Charge per minute
    """
    chargePerMinute: Int!

    """
    Live agent employee availability
    """
    employeeAvailability: ChannelAvailabilityForDay!

    """
    id
    """
    id: String!

    """
    Text to show for customers, openinghours / waiting time
    """
    label: String

    """
    Phone number
    """
    phoneNumber: String!

    """
    Neatly formatted phone number
    """
    phoneNumberDisplay: String!

    """
    Channel type
    """
    type: ChannelType!

    """
    Is visibible on platform / apps
    """
    visibleOnPlatforms: [ChannelPlatform!]!

    """
    Queue waiting time in minutes
    """
    waitingTimeMinutes: Int
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

"""
Pickup location
"""
type PickupLocation {
    """
    Pickup location address
    """
    address: StoreAddress!

    """
    Delivery location Id
    """
    deliveryLocationId: Int!

    """
    Pickup location description
    """
    description: String

    """
    Pickup location geo coordinates
    """
    geoLocation: GeoLocation!

    """
    Pickup location Id
    """
    id: Int!

    """
    Pickup location name
    """
    name: String!

    """
    Pickup location opening hours ranges
    """
    openingHours: [PickupLocationOpeningHours!]!

    """
    Pickup location type
    """
    type: PickupLocationType!
}

type PickupLocationEnableResult implements MutationResult {
    """
    Errormessage that is thrown
    """
    errorMessage: String

    """
    Status of the call
    """
    status: MutationResultStatus!

    """
    StatusCode of request
    """
    statusCode: Int
}

"""
Pickup location opening hours date and time ranges
"""
type PickupLocationOpeningHours {
    """
    Time ranges
    """
    blocks: [PickupLocationOpeningHoursBlock!]!

    """
    Date (YYYY-MM-DD)
    """
    date: String!
}

"""
Pickup location opening hours time range
"""
type PickupLocationOpeningHoursBlock {
    """
    Open time (HH:MM)
    """
    from: String!

    """
    Close time (HH:MM)
    """
    to: String!
}

"""
Pickup location type
"""
type PickupLocationType {
    """
    Pickup location type code
    """
    code: PickupLocationTypeCode!

    """
    Pickup location type description
    """
    description: String!
}

"""
Pickup location type code
"""
enum PickupLocationTypeCode {
    """
    Business to business
    """
    B2B

    """
    Delivery point
    """
    DLP

    """
    In store picking
    """
    ISP

    """
    Store based full
    """
    SBF

    """
    Store based light
    """
    SBL

    """
    Specials only
    """
    SPO

    """
    Stand alone
    """
    STA
}

"""
Filters for pickup locations
"""
input PickupLocationsFiltersInput {
    """
    Pickup location types
    """
    typeCodes: [PickupLocationTypeCode!]
}

"""
A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.
"""
scalar PostalCode

"""
a productId with the quantity
"""
input PriceLineItem {
    """
    productId
    """
    id: Int!

    """
    product Quantity
    """
    quantity: Int!
}

"""
Contains the total price of the products along with the total discount.
"""
type PriceTotal {
    """
    Total discount  of all products
    """
    discount: Money!

    """
    Total of all products without discount
    """
    withoutDiscount: Money!
}

"""
Scalar for any primitive type
"""
scalar PrimitiveTypeScalar

"""
A product is a thing that can be ordered.
"""
type Product {
    """
    additional information about the product
    """
    additionalInformation: String

    """
    True if the product is age restricted (e.g. alcohol is 18+)
    """
    ageCheck: Boolean

    """
    product availability
    """
    availability: ProductAvailability

    """
    Label if the product is unavailable

    eg: Vandaag besteld, vanaf zondag in huis
    """
    availabilityLabel: String

    """
    brand of product
    """
    brand: String

    """
    Product category, which consists of the first taxonomy node and the last taxanomy node.
    for example: 'Aardappel, groente, fruit/IJsberg sla'
    """
    category: String

    """
    Product date.
    The date has an effect on fields like 'availability'.
    """
    date: String

    """
    Discount related to the product
    """
    discount(
        """
        Include segmentType DIGITAL_SCRATCHING on the discount.
        If includeScratchCards is false, it will not return segmentType DIGITAL_SCRATCHING
        There can be multiple segmentTypes on a discount, it will then return the next one in the order.
        """
        includeScratchCards: Boolean
    ): ProductDiscount

    """
    Whether the product has a list price.
    In Web FE: if `true`, display label "Adviesprijs" on the PDP or product card.
    """
    hasListPrice: Boolean!

    """
    highlight (Feestfavoriet etc. / shop-in-shop / nutriscore)
    """
    highlight: String

    """
    Bullet points on product page
    """
    highlights: [String]

    """
    external hq id
    """
    hqId: Int

    """
    Product identifier
    """
    id: Int!

    """
    Product image(s), specified by rendition(s) and angle(s)
    Each product can have multiple images.
    Each of those images can be represented in different renditions (small, medium, large)
    `imagePack` is a replacement for `imagesMulti`, `imageSet` and `images`. Stay tuned!
    """
    imagePack(
        """
        Product angle(s) to return. If not specified, all angles are returned.
        """
        angles: [ProductImageAngle]
    ): [ProductImage!]

    """
    product images
    """
    images(
        """
        You can specify the Renditions you want to query
        """
        renditions: [ProductImageRenditions!]
    ): [ImageSet!]!
        @deprecated(
            reason: "@sunset_date(2024-08-01) Images should be fetched via Product Service v3 (the only source of truth for images) \n. field imagePack. "
        )

    """
    Product images.
    Each product can have multiple images.
    Each of those images can be represented in different renditions (small, medium, large)
    `imagesMulti` is expected to completely superseded `imageSet` and `images`. Stay tuned!
    """
    imagesMulti: [ProductImageMulti!]
        @deprecated(
            reason: "@sunset_date(2024-08-01) Images should be fetched via Product Service v3 (the only source of truth for images) \n. field imagePack. "
        )

    """
    Interaction label shows 'Kies alternatief' / 'Kies product' if unavailable
    """
    interactionLabel: String

    """
    Whether product is deactivated
    """
    isDeactivated: Boolean

    """
    Whether the product is a sample or not.
    """
    isSample: Boolean!

    """
    Whether the product is sponsored or not
    """
    isSponsored: Boolean

    """
    DO NOT USE - Max quantity of a product order, hardcoded at 99 since
    there is no service available yet. For testing purposes you can use
    the x-feature-flag header with enable-maxQuantity value.
    """
    maxQuantity: Int

    """
    Max number of addable units of the product
    """
    maxUnits: Int

    """
    How many days the product remains fresh
    This maps to 'THT', which is 'Tenminste Houdbaar Tot'
    """
    minBestBeforeDays: Int

    """
    Products of the same brand and in the same taxonomy as the queried product.
    Currently unavailable products are filtered out and not included.
    Currently invisible products are also filtered out.
    All the other filtering (like excluding products without images) should be performed by the caller.
    """
    otherSorts: [Product]!

    """
    product price

    Do not use this date argument but use the date from the product type level
    """
    price(
        """
        DO NOT USE, use the argument from the product type level
        """
        date: String

        """
        Include segmentType DIGITAL_SCRATCHING on the price.
        If includeScratchCards is false, it will not return segmentType DIGITAL_SCRATCHING
        There can be multiple segmentTypes on a discount, it will then return the next one in the order.
        """
        includeScratchCards: Boolean
    ): ProductPrice

    """
    product properties
    """
    properties(
        """
        Select the properties you want to return (if they exist on the product). For example: "np_feestfavoriet"
        """
        codes: [String!]
    ): [ProductProperty!]

    """
    Sales unit size e.g. '2 stuks'
    """
    salesUnitSize: String

    """
    Product shop type
    """
    shopType: ProductShopType!

    """
    Smart label to display either:
        - validity period
        - delivery bundle bonus
        - personal bonus
    """
    smartLabel: String

    """
    Summary, e.g. 'Tortellini kaas'
    """
    summary: String

    """
    product taxonomies
    """
    taxonomies: [ProductTaxonomy!]

    """
    product title
    """
    title: String

    """
    product meta
    """
    tradeItem: ProductTradeItem

    """
    Variant info of this product.

    Null if product doesn't have any variants.
    """
    variant: ProductVariant

    """
    Variants (e.g. wine by the case vs wine per bottle)
    """
    variants: [ProductVariant!]!

    """
    Vitual bundle items (a virtual bundle is a bundle with multiple products)
    """
    virtualBundleProducts: [ProductVirtualBundleItem]

    """
    Path to the web link
    """
    webPath: String
}

"""
product availability
"""
type ProductAvailability {
    """
    is the product orderable for this user
    """
    isOrderable: Boolean!

    """
    is the product visible for this user
    """
    isVisible: Boolean!

    """
    offline availability
    """
    offline: ProductAvailabilityIndication!

    """
    online availability
    """
    online: ProductAvailabilityIndication!

    """
    Presence of `productId` simplifies handling the fetched data when availabilities for multiple products were requested
    from the `availability-facade` at once.
    """
    productId: Int

    """
    if unavailable for order, this field is filled
    """
    unavailableForOrder: ProductUnavailableForOrderIndication
}

"""
indication of the availability of a product
"""
type ProductAvailabilityIndication {
    """
    optional: date when is the product available again YYYY-MM-DD
    """
    availableFrom: String

    """
    availability status
    """
    status: ProductAvailabilityStatus!
}

"""
availability status
"""
enum ProductAvailabilityStatus {
    """
    available
    """
    AVAILABLE

    """
    available in the future
    """
    FUTURE_ASSORTMENT

    """
    no longer available
    """
    OUT_OF_ASSORTMENT
}

"""
A product brand
"""
type ProductBrand {
    """
    Amount of products under this brand name
    """
    count: Int!

    """
    Sanitized brand name
    """
    name: String!

    """
    Human readable brand name
    """
    title: String!
}

"""
Product complaint claim status
"""
enum ProductComplaintClaimStatus {
    """
    The order contains products that can be claimed
    """
    CLAIMABLE

    """
    Maximum products in this order have been claimed
    """
    MAX_CLAIMED
}

"""
Product complaint order
"""
type ProductComplaintOrder {
    """
    Is the order eligible for claims
    """
    claimStatus: ProductComplaintClaimStatus!

    """
    Delivery slot end time
    """
    deliveryEndTime: String

    """
    Delivery slot start time
    """
    deliveryStartTime: String

    """
    ID of the order
    """
    id: String!

    """
    The shopping type
    """
    shoppingType: ProductComplaintShoppingType!

    """
    Delivery address
    """
    transactionAddress: ProductComplaintOrderAddress!

    """
    Date time of the delivery slot
    """
    transactionDateTime: String!
}

"""
Product complaint order address
"""
type ProductComplaintOrderAddress {
    """
    The city of the delivery
    """
    city: String

    """
    The housenumber of the delivery
    """
    houseNumber: String

    """
    The postalcode of the delivery
    """
    postalCode: String

    """
    The street of the delivery
    """
    street: String
}

"""
Product complaint order product
"""
type ProductComplaintOrderProduct {
    """
    Product description
    """
    description: String!

    """
    Explanations
    """
    explanations: [ExplanationWithLabel]!

    """
    The id of the product
    """
    id: Int!

    """
    true if the product is claimable
    """
    isClaimable: Boolean!

    """
    the product
    """
    product: Product

    """
    Quantities
    """
    quantities: Quantities!

    """
    Submittable feedback types
    """
    submittableFeedbackTypes: [FeedbackTypeWithLabel]!
}

"""
Product complaint shopping type
"""
enum ProductComplaintShoppingType {
    """
    Delivery
    """
    DELIVERY

    """
    Delivery point
    """
    DELIVERY_POINT

    """
    In-store pick
    """
    IN_STORE_PICK

    """
    Physical store
    """
    PHYSICAL_STORE

    """
    Pickup
    """
    PICKUP

    """
    Pickup delivery
    """
    PICKUP_DELIVERY

    """
    Specials only
    """
    SPECIALS_ONLY

    """
    Unknown
    """
    UNKNOWN
}

"""
Product complaint store product
"""
type ProductComplaintStoreProduct {
    """
    Description
    """
    description: String!

    """
    HQ ID
    """
    hqId: Int!

    """
    ID
    """
    id: Int

    """
    The product
    """
    product: Product

    """
    Quantity
    """
    quantity: Int!

    """
    Submittable feedback types
    """
    submittableFeedbackTypes: [FeedbackTypeWithLabel]!
}

"""
Product complaint store purchase
"""
type ProductComplaintStorePurchase {
    """
    Is the order eligible for claims
    """
    claimStatus: ProductComplaintClaimStatus!

    """
    Date time of the store purchase nicely formatted
    """
    dateTimeFormatted: String!

    """
    ID of the order
    """
    id: String!

    """
    Delivery address
    """
    transactionAddress: ProductComplaintOrderAddress!

    """
    Date time of the delivery slot
    """
    transactionDateTime: String!
}

"""
Input type for the productCrossSellsV2 query
V2 endpoint filters out unavailable products whereas V1 does not
"""
input ProductCrossSellsV2Input {
    """
    Items currently in the basket
    """
    basketItems: [BasketItemInput!]

    """
    ID of the experiment
    """
    experimentId: String

    """
    Amount of products to return
    """
    limit: Int!

    """
    Offset of products to return
    """
    offset: Int!

    """
    Product id
    """
    productId: Int!
}

"""
Discount related to a product
"""
type ProductDiscount {
    """
    Information about the validity period of the discount
    """
    availability: BonusSegmentAvailability

    """
    Additional info on the discount, such as when the discount begins or ends.
    """
    description: String

    """
    Promotion type of  the discount
    """
    promotionType: BonusPromotionType!

    """
    Segment type of the discount
    """
    segmentType: BonusSegmentType!

    """
    Discount subtitle
    """
    subtitle: String

    """
    Discount theme
    """
    theme: BonusTheme!

    """
    Collection of tiered offers
    """
    tieredOffer: [String!]!

    """
    Whether was price should be displayed
    """
    wasPriceVisible: Boolean
}

"""
Each product is expected to have 1 or more image(s)/angle(s) associated with it.
"""
type ProductImage {
    """
    Angle of the image
    """
    angle: ProductImageAngle!

    """
    Large version of the image (normally 800x800 px)
    """
    large: ProductImageRendition

    """
    Medium version of the image (normally 400x400 px)
    """
    medium: ProductImageRendition

    """
    Small version of the image (normally 200x200 px)
    """
    small: ProductImageRendition
}

"""
What angles are available for a product image
"""
enum ProductImageAngle {
    """
    packshot voorkant / packshot frontside
    """
    ANGLE_2D1

    """
    A multi-angle image
    """
    ANGLE_4D1

    """
    A multi-angle image
    """
    ANGLE_4D2

    """
    A multi-angle image
    """
    ANGLE_4D3

    """
    A multi-angle image
    """
    ANGLE_4D4

    """
    A multi-angle image
    """
    ANGLE_4D5

    """
    A multi-angle image
    """
    ANGLE_4D6

    """
    A multi-angle image
    """
    ANGLE_4D7

    """
    A multi-angle image
    """
    ANGLE_5D1

    """
    A multi-angle image
    """
    ANGLE_5D2

    """
    A multi-angle image
    """
    ANGLE_5D3

    """
    The hero image. To be used on the product detail page.
    """
    HERO
}

"""
Each product is expected to have 1 or more images associated with it.
"""
type ProductImageMulti {
    """
    Angle of the image
    """
    angle: ProductImageAngle!

    """
    Large version of the image (normally 800x800 px)
    """
    large: ProductImageRendition

    """
    Medium version of the image (normally 400x400 px)
    """
    medium: ProductImageRendition

    """
    Small version of the image (normally 200x200 px)
    """
    small: ProductImageRendition
}

"""
The minimal description of a product image that includes the URL, width and height
"""
type ProductImageRendition {
    """
    Product image height
    """
    height: Int!

    """
    An URL to fetch the product image from.
    """
    url: String!

    """
    Product image width
    """
    width: Int!
}

"""
Image renditions returned by the product image processor
in the form of D<width>x<height>
"""
enum ProductImageRenditions {
    """
    width: 200, height: 200
    """
    D200X200

    """
    width: 400, height: 400
    """
    D400X400

    """
    width: 800, height: 800
    """
    D800X800
}

"""
For each product we have some images
"""
type ProductImageSet {
    """
    image dimensions: 24x24
    """
    d24x24: String

    """
    image dimensions: 80x80
    """
    d80x80: String

    """
    image dimensions: 200x200
    """
    d200x200: String

    """
    image dimensions: 708x708
    """
    d708x708: String

    """
    The product ID
    """
    productId: Int!
}

"""
A product price
"""
type ProductPrice {
    """
    discount information
    """
    discount: ProductPriceDiscount

    """
    the current price
    """
    now: Money!

    """
    info per unit
    """
    unitInfo: ProductUnitInfo

    """
    the normal price in case the now price is discounted
    """
    was: Money
}

"""
Price discount information
"""
type ProductPriceDiscount {
    """
    Discount text
    """
    description: String

    """
    Discount bonus segment id
    """
    segmentId: Int

    """
    Discount type
    """
    type: String
}

"""
Each product can have properties
"""
type ProductProperty {
    """
    property code (eg: 'np_etos')
    """
    code: String!

    """
    property icon (eg: 'PRICE_FAVORITE')
    """
    icon: ProductPropertyIcon

    """
    property values (eg: ['A', 'B'])
    """
    values: [String!]!
}

"""
Possible product property icons
"""
enum ProductPropertyIcon {
    """
    Bake off
    """
    BAKE_OFF

    """
    Discount pack
    """
    DISCOUNT_PACK

    """
    Frozen
    """
    FROZEN

    """
    Locally produced
    """
    LOCALLY_PRODUCED

    """
    New
    """
    NEW

    """
    Organic
    """
    ORGANIC

    """
    Price favorite
    """
    PRICE_FAVORITE

    """
    Prize winner
    """
    PRIZE_WINNER

    """
    Vega
    """
    VEGAN

    """
    Vegetarion
    """
    VEGETARIAN

    """
    XL store
    """
    XL_STORE
}

"""
Purchase history
"""
type ProductPurchaseHistory {
    """
    List of products returned based on page size and page number requested
    """
    products: [Product!]!

    """
    Total number of ALL user's previous purchases
    """
    total: Int!
}

"""
Product recommendations
"""
type ProductRecommendations {
    """
    Model
    """
    model: Model

    """
    Product ids
    """
    products: [Product!]
}

"""
Explanation types
"""
enum ProductReturnExplanationType {
    """
    Product cannot be returned
    """
    CANNOT_BE_RETURNED

    """
    Product is excluded from self service
    """
    EXCLUDED_FROM_SELF_SERVICE

    """
    Product was not delivered
    """
    NOT_DELIVERED

    """
    Return is procesed
    """
    PROCESSED

    """
    Product return is settled by deliverer
    """
    SETTLED_BY_DELIVERER

    """
    Product is submited for return
    """
    SUBMITTED
}

"""
Explanations
"""
type ProductReturnExplanations {
    """
    Explanation label
    """
    label: String!

    """
    Explanations type
    """
    type: ProductReturnExplanationType!
}

"""
Order eligible to return products
"""
type ProductReturnOrder {
    """
    Delivery slot end time
    """
    deliveryEndTime: String

    """
    Delivery slot start time
    """
    deliveryStartTime: String

    """
    is of the order
    """
    id: String!

    """
    Is the order eligible for returns
    """
    returnStatus: ProductReturnStatus!

    """
    Shopping type of the order
    """
    shoppingType: ProductReturnShoppingType!

    """
    Delivery address
    """
    transactionAddress: ProductReturnOrderAddress!

    """
    Date time of the delivery slot
    """
    transactionDateTime: String!
}

"""
The adress of the delivery
"""
type ProductReturnOrderAddress {
    """
    The city of the delivery
    """
    city: String

    """
    The housenumber of the delivery
    """
    houseNumber: String

    """
    The postalcode of the delivery
    """
    postalCode: String

    """
    The street of the delivery
    """
    street: String
}

"""
product with return properties
"""
type ProductReturnProduct {
    """
    Product description fallback if product is not found.
    """
    description: String!

    """
    explanations about the product in self service context
    """
    explanations: [ProductReturnExplanations]!

    """
    the product id
    """
    id: Int!

    """
    true if the product is eligible for return
    """
    isReturnable: Boolean!

    """
    the product
    """
    product: Product

    """
    quantities about the product in the order
    """
    quantities: ProductReturnProductQuantities!
}

"""
Quantity properties for the return product
"""
type ProductReturnProductQuantities {
    """
    amount ordered
    """
    ordered: Int!

    """
    amount of items that can be returned
    """
    returnable: Int!
}

"""
Shopping type of the order
"""
enum ProductReturnShoppingType {
    """
    delivery
    """
    DELIVERY

    """
    delivery point
    """
    DELIVERY_POINT

    """
    in store pick
    """
    IN_STORE_PICK

    """
    store
    """
    PHYSICAL_STORE

    """
    pickup
    """
    PICKUP

    """
    pickup delivery
    """
    PICKUP_DELIVERY

    """
    specials only
    """
    SPECIALS_ONLY

    """
    unkown
    """
    UNKNOWN
}

"""
Status of the order for product-returns
"""
enum ProductReturnStatus {
    """
    Maximum products in this order have been returned
    """
    MAX_RETURNED

    """
    The order and its products cannot be returned
    """
    NOT_POSSIBLE

    """
    The order contains products that can be returned
    """
    RETURNABLE
}

"""
Product search input

This is a temporary alternative for the old basketProductCardsByName query.
Should be replaced by a proper ProductSearch when it is available.
"""
input ProductSearchInput {
    """
    Is the product available online
    """
    availableOnline: Boolean

    """
    Filters products that have bonusPrice of specified bonus type
    """
    bonus: BonusFilterType

    """
    bonusPeriodEndDate
    """
    bonusPeriodEndDate: String

    """
    bonusPeriodStartDate
    """
    bonusPeriodStartDate: String

    """
    Filters products that are in stock
    """
    inStock: Boolean

    """
    Order ID for context
    """
    orderId: Int

    """
    Results page you want to retrieve (0..N)
    """
    page: Int

    """
    Did the user bought this product previously
    """
    previouslyBought: Boolean

    """
    Properties of the product to search on, eg: Biologisch
    """
    properties: [String!]

    """
    Search query
    """
    query: String

    """
    referenceDate
    """
    referenceDate: String

    """
    Number of records per page.
    """
    size: Int

    """
    Filters products that are a part of these taxonomy ids
    """
    taxonomyId: [Int!]

    """
    Date used for availability. Determines when products become orderable and what they cost. Default is referenceDate.
    """
    viewDate: String

    """
    Filters products based on webshopid
    """
    webshopId: [Int!]
}

"""
Result type for productSearch query
"""
type ProductSearchResult {
    """
    Page information
    """
    page: ProductSearchResultPage!

    """
    Found products
    """
    products: [Product!]!
}

"""
Pagination details for productSearch
"""
type ProductSearchResultPage {
    """
    Page number
    """
    pageNumber: Int!

    """
    Page size
    """
    pageSize: Int!

    """
    Total found elements
    """
    totalElements: Int!

    """
    Total pages
    """
    totalPages: Int!
}

"""
Possible product shop types
"""
enum ProductShopType {
    """
    Albert Heijn shop
    """
    AH

    """
    Etos shop
    """
    ET

    """
    Gall shop
    """
    GA
}

"""
A product taxonomy
"""
type ProductTaxonomy {
    """
    indicator if the taxonomy is visible of the user or not
    """
    active: Boolean!

    """
    True for age restricted products, such as alcohol.
    """
    ageCheck: Boolean

    """
    children ids of the current taxonomy
    """
    children: [Int!]

    """
    When it's needed to represent a taxonomy by just one product, this should be the product to use.
    E.g. images of this product can be used to decorate a button taking the user to a taxonomy.
    NB: `coverProduct` can be `null` in many cases, please read documentation of a corresponding request
    TODO: find out whether @cacheControl here makes sense (given that we compute `coverProduct` manually
    """
    coverProduct: Product

    """
    id of the taxonomy
    """
    id: Int!

    """
    name of the taxonomy
    """
    name: String!

    """
    parent ids of the current taxonomy
    """
    parents: [Int!]

    """
    Products associated with the taxonomy
    """
    products: [Product]!

    """
    slugified version of the taxonomy name
    """
    slug: String!

    """
    Top-level taxonomy image. Empty in case of a sub-level taxonomy.
    """
    topLevelImage: String

    """
    Total amount of products associated with the taxonomy (including sample products)
    """
    totalProductCount: Int!
}

"""
Trade item info
"""
type ProductTradeItem {
    """
    Additional information
    """
    additionalInfo: ProductTradeItemAdditionalInfo

    """
    Contact information
    """
    contact: ProductTradeItemContact

    """
    Package content specific information
    """
    contents: ProductTradeItemContents

    """
    Descriptions for the product
    """
    description: ProductTradeItemDescription

    """
    Feeding instructions
    """
    feedingInstructions: ProductTradeItemFeedingInstructions

    """
    A product GLN code
    """
    gln: String

    """
    A product GTIN code
    """
    gtin: String

    """
    Revisions of a product GTIN code
    """
    gtinRevisions: [String!]!

    """
    Ingredient data
    """
    ingredients: ProductTradeItemIngredients

    """
    Marketing info
    """
    marketing: ProductTradeItemMarketing

    """
    Nutrition data
    """
    nutritions: [ProductTradeItemNutrition!]

    """
    Origin information
    """
    origin: ProductTradeItemOrigin

    """
    Resources (icons and attachments)
    """
    resources: ProductTradeItemResources

    """
    Storage information
    """
    storage: ProductTradeItemStorage

    """
    Usage instructions
    """
    usage: ProductTradeItemUsage
}

"""
Additional info
"""
type ProductTradeItemAdditionalInfo {
    """
    Certification numbers
    """
    certificationNumbers: [String!]!

    """
    Identification numbers
    """
    identificationNumbers: [ProductTradeItemIdentificationNumber!]!

    """
    Sales conditions
    """
    salesConditions: [String!]!
}

"""
Contact communication channel
"""
type ProductTradeItemCommunicationChannel {
    """
    Type
    """
    type: ProductTradeItemCommunicationChannelType

    """
    Value
    """
    value: String
}

"""
Communication channel type
"""
enum ProductTradeItemCommunicationChannelType {
    """
    Email
    """
    EMAIL

    """
    Fax
    """
    FAX

    """
    Social media
    """
    SOCIAL_MEDIA

    """
    Telephone
    """
    TELEPHONE

    """
    Website
    """
    WEBSITE
}

"""
Contact
"""
type ProductTradeItemContact {
    """
    Address
    """
    address: String

    """
    Communication channels
    """
    communicationChannels: [ProductTradeItemCommunicationChannel]

    """
    Name
    """
    name: String
}

"""
Contents data
"""
type ProductTradeItemContents {
    """
    Drained weight
    """
    drainedWeight: String

    """
    E-mark
    """
    eMark: Boolean!

    """
    Net contents
    """
    netContents: [String!]!

    """
    Serving size
    """
    servingSize: String

    """
    Servings per package
    """
    servingsPerPackage: String

    """
    Statement
    """
    statement: String
}

"""
A generic product definition
"""
type ProductTradeItemDefinition {
    """
    The value
    """
    label: String!

    """
    The label
    """
    value: String!
}

"""
Generic product descriptions
"""
type ProductTradeItemDescription {
    """
    Definitions
    """
    definitions: ProductTradeItemDescriptionDefinitions

    """
    Descriptions
    """
    descriptions: [String!]!
}

"""
Descriptive definitions, i.e. regarding alcohol or animal type
"""
type ProductTradeItemDescriptionDefinitions {
    """
    Animal feed type
    """
    animalFeedType: String

    """
    Animal type
    """
    animalType: String

    """
    Dosage form
    """
    dosageForm: String

    """
    Fish catch info
    """
    fishCatchInfo: String

    """
    Percentage of alcohol
    """
    percentageOfAlcohol: String

    """
    Sun protection factor
    """
    sunProtectionFactor: String
}

"""
Feedings instructions
"""
type ProductTradeItemFeedingInstructions {
    """
    Statement
    """
    statement: String
}

"""
Identification number
"""
type ProductTradeItemIdentificationNumber {
    """
    Label
    """
    label: String

    """
    Type
    """
    type: String

    """
    Value
    """
    value: String
}

"""
Ingredient allergens data
"""
type ProductTradeItemIngredientAllergens {
    """
    Contains
    """
    contains: [String]

    """
    Free from
    """
    freeFrom: [String]

    """
    List
    """
    list: [String]

    """
    May contain
    """
    mayContain: [String]
}

"""
Ingredients data
"""
type ProductTradeItemIngredients {
    """
    Allergens
    """
    allergens: ProductTradeItemIngredientAllergens

    """
    Animal feeding
    """
    animalFeeding: ProductTradeItemIngredientsAnimalFeeding

    """
    Non-food ingredient statement
    """
    nonfoodIngredientStatement: String

    """
    Statement
    """
    statement: String
}

"""
Ingredients animal feeding data
"""
type ProductTradeItemIngredientsAnimalFeeding {
    """
    Additives
    """
    additives: String

    """
    Analytical constituents
    """
    analyticalConstituents: String

    """
    Statement
    """
    statement: String
}

"""
Marketing data
"""
type ProductTradeItemMarketing {
    """
    Description
    """
    description: String

    """
    Features
    """
    features: [String]!
}

"""
Info about one specific nutrient
"""
type ProductTradeItemNutrient {
    """
    Daily value
    """
    dailyValue: String

    """
    Name
    """
    name: String!

    """
    Superscript
    """
    superscript: Int

    """
    Type
    """
    type: String!

    """
    Value
    """
    value: String!
}

"""
Nutrition data
"""
type ProductTradeItemNutrition {
    """
    Additional info
    """
    additionalInfo: [ProductTradeItemDefinition]

    """
    Basis quantity
    """
    basisQuantity: String

    """
    Basis quantity description
    """
    basisQuantityDescription: String

    """
    Daily value intake reference
    """
    dailyValueIntakeReference: String

    """
    Nutrients
    """
    nutrients: [ProductTradeItemNutrient]

    """
    Preparation state
    """
    preparationState: String

    """
    Serving size
    """
    servingSize: String

    """
    Serving size description
    """
    servingSizeDescription: String
}

"""
Origin data
"""
type ProductTradeItemOrigin {
    """
    Activities
    """
    activities: ProductTradeItemOriginActivities

    """
    Provenance
    """
    provenance: [String!]
}

"""
Origin activities
"""
type ProductTradeItemOriginActivities {
    """
    Birth
    """
    birth: [String!]

    """
    Rearing
    """
    rearing: [String!]

    """
    Slaughter
    """
    slaughter: [String!]
}

"""
Resource attachment
"""
type ProductTradeItemResourceAttachment {
    """
    Format
    """
    format: String!

    """
    Name
    """
    name: String!

    """
    Type
    """
    type: String!

    """
    Value
    """
    value: String!
}

"""
Resource icon
"""
type ProductTradeItemResourceIcon {
    """
    ID
    """
    id: String!

    """
    Meta
    """
    meta: ProductTradeItemResourceIconMeta

    """
    Title
    """
    title: String!

    """
    Type
    """
    type: ProductTradeItemResourceIconType!
}

"""
Arbitrary resource icon meta data
"""
scalar ProductTradeItemResourceIconMeta

"""
Resource icon type
"""
enum ProductTradeItemResourceIconType {
    """
    Additional
    """
    ADDITIONAL

    """
    Danger
    """
    DANGER

    """
    Diet allergen
    """
    DIET_ALLERGEN

    """
    Free from
    """
    FREE_FROM

    """
    Registered
    """
    REGISTERED

    """
    Regulated
    """
    REGULATED
}

"""
Resources
"""
type ProductTradeItemResources {
    """
    Attachments
    """
    attachments: [ProductTradeItemResourceAttachment]

    """
    Icons
    """
    icons: [ProductTradeItemResourceIcon]
}

"""
Storage data
"""
type ProductTradeItemStorage {
    """
    Instructions
    """
    instructions: [String!]

    """
    Life span
    """
    lifeSpan: [String!]
}

"""
Instructions, suggestions and statements about product usage
"""
type ProductTradeItemUsage {
    """
    Age description
    """
    ageDescription: String

    """
    Instruct the consumer to wash their hands after handling a poultry product with this property set to `true`.
    """
    bacteriaWarning: Boolean

    """
    Dosage instructions
    """
    dosageInstructions: [String!]

    """
    During breast feeding
    """
    duringBreastFeeding: String

    """
    During pregnancy
    """
    duringPregnancy: String

    """
    Hazard statements
    """
    hazardStatements: [String]

    """
    Instructions
    """
    instructions: [String!]

    """
    Precautions
    """
    precautions: [String]

    """
    Preparation instructions
    FIXME: `preparationInstructions` type here diverges from the type in `ah-products`.
    FIXME: @See CDS-21929
    """
    preparationInstructions: [UsageWithExtra!]

    """
    Serving suggestion
    """
    servingSuggestion: String

    """
    Signal word
    """
    signalWord: String
        @deprecated(
            reason: "@sunset_date(2024-03-26) - Use signalWords field because there can be multiple ghsDetails \n. . "
        )

    """
    Signal words
    """
    signalWords: [String]

    """
    Warnings
    """
    warnings: [String!]
}

"""
indication of the availability of a product
"""
type ProductUnavailableForOrderIndication {
    """
    optional: date when is the product available again YYYY-MM-DD
    """
    availableFrom: String

    """
    availability status
    """
    status: ProductUnavailableReason!
}

"""
reason why the product is unavailable
"""
enum ProductUnavailableReason {
    """
    product will come available but is not yet available
    """
    FUTURE_ASSORTMENT

    """
    product is for pickup but not for this location
    """
    NOT_AT_THIS_PICKUP_POINT

    """
    product is not for pickup
    """
    NOT_FOR_PICKUP

    """
    product is not longer availabile (online)
    """
    NO_LONGER_ONLINE

    """
    product is not longer availabile (online and offline)
    """
    OUT_OF_ASSORTMENT

    """
    product is not availability online
    """
    SHOP_ONLY

    """
    product is sold out
    """
    SOLD_OUT
}

"""
Info per unit
"""
type ProductUnitInfo {
    """
    the actual unit, i.e. KG
    """
    description: String

    """
    price per unit
    """
    price: Money!
}

"""
Variant (e.g. wine by the case vs wine per bottle)
"""
type ProductVariant {
    """
    Label for this variant ('doos', '4 personen')
    """
    label: String!

    """
    The product of the variant
    """
    product: Product!

    """
    Product variant type
    """
    type: ProductVariantType!
}

"""
Product variant type
"""
enum ProductVariantType {
    """
    Primary type (the bottle of wine)
    """
    PRIMARY

    """
    Secondary type (the case of bottles of wine)
    """
    SECONDARY
}

type ProductVirtualBundleItem {
    """
    Product bundle product
    """
    product: Product

    """
    Quantity of bundle items
    """
    quantity: Int!
}

"""
Input for 'products' query.
Optionally has a date.
"""
input ProductsInput {
    """
    Product date.
    The date has an effect on fields like 'availability'.
    """
    date: String

    """
    Product identifier
    """
    id: Int!
}

"""
A type containing information on a single Koopzegel balance.
"""
type PurchaseStampBalance {
    """
    The constants of the Koopzegel loyalty program.
    """
    constants: PurchaseStampConstants!

    """
    The monetary value of the Koopzegel balance.
    """
    money: PurchaseStampBalanceMoney!

    """
    The points, or simply "Koopzegels", included in the balance. Contains information about
    the number of full booklets as well.
    """
    points: PurchaseStampBalancePoints!

    """
    The booklet targets to reach to gain interest on Koopzegels.
    """
    targets: PurchaseStampBookletTargets!
        @deprecated(reason: "@sunset_date(2024-04-01) - use the target fields in the constants field instead. \n. . ")
}

"""
A type that contains information regarding the monetary value of a Koopzegel balance.
"""
type PurchaseStampBalanceMoney {
    """
    The total amount of money received through interest on Koopzegels. Half a booklet
    of Koopzegels results in an interest of 0.50, a full booklet results in an interest
    of 3.00.
    """
    interest: Money!

    """
    The total amount of money invested into Koopzegels to reach the current number of
    Koopzegels. Should be the same as (invested = points * 0.10).
    """
    invested: Money!

    """
    The total amount of money received when all Koopzegels were to be paid out right now.
    Should be the same as (payout = invested + interest).
    """
    payout: Money!
}

"""
A type containing information on the points that are embedded in a Koopzegel balance.
"""
type PurchaseStampBalancePoints {
    """
    The number of Koopzegels in the "current booklet". Should be the same as
    (currentBookletPoints = totalPoints % fullBookletTarget)
    """
    currentBookletPoints: Int!

    """
    The number of full Koopzegel booklets. Should be the same as
    (fullBooklets = floor(totalPoints / fullBookletTarget))
    """
    fullBooklets: Int!

    """
    The total number of Koopzegels in this balance. Not divided across booklets.
    """
    totalPoints: Int!
}

"""
A type containing a target to achieve on a Koopzegel booklet.
"""
type PurchaseStampBookletTarget {
    """
    The interest that is gained when the target is achieved.
    """
    interest: Money!

    """
    The number of points to gain to achieve the target.
    """
    points: Int!
}

"""
A relatively constant type containing the booklet target for Koopzegel booklets.
"""
type PurchaseStampBookletTargets {
    """
    The number of points that make up a full booklet.
    """
    fullBooklet: Int!

    """
    The number of points before half a booklet is reached. Might not be the same as half of
    the fullBooklet attribute, for odd business reasons.
    """
    halfBooklet: Int!
}

"""
A relatively constant type containing the constants for Koopzegels, such as the targets
and the price of a single Koopzegel stamp.
"""
type PurchaseStampConstants {
    """
    The full booklet target.
    """
    fullBookletTarget: PurchaseStampBookletTarget!

    """
    The partial booklet target.
    """
    partialBookletTarget: PurchaseStampBookletTarget!

    """
    The price of a single Koopzegel stamp.
    """
    price: Money!
}

"""
A type representing a purchase stamp saving goal.
"""
type PurchaseStampSavingGoal {
    """
    The amount of the purchase stamp saving goal.
    """
    amount: Money!

    """
    The name of the purchase stamp saving goal.
    """
    name: String!
}

"""
A type representing the mutation result of a purchase stamp saving goal.
Either the purchase stamp saving goal is created or deleted.
In case of deletion, it contains only the status or error state of the mutation.
"""
type PurchaseStampSavingGoalMutationResult implements MutationResult {
    """
    In case of an error, it contains the reason of it.
    """
    errorMessage: String

    """
    In case of creation, it contains the created purchase stamp saving goal.
    """
    result: PurchaseStampSavingGoal

    """
    The status of the mutation.
    """
    status: MutationResultStatus!
}

"""
A type containing a Koopzegel secret. These secrets are used to generate TOTP codes, which
are used in the Koopzegel redeem process.
"""
type PurchaseStampSecret {
    """
    The ID of the secret. Since the client might create more than one secret, you can use
    this ID to find the right secret and to check if the secret is still active, as secrets
    might become inactive or even be fully deleted remotely.
    """
    id: UUID!

    """
    The secret encoded in Base64.
    """
    secret: String!
}

"""
A type containing a Koopzegel secret. These secrets are used to generate TOTP codes, which
are used in the Koopzegel redeem process.
"""
type PurchaseStampSecretMutationResult implements MutationResult {
    """
    An error message explaining why the mutation was not successful. Will be null when the
    status was of type success.
    """
    errorMessage: String

    """
    The created secret as part of the mutation call. Will be null when the status was not of
    type success.
    """
    secret: PurchaseStampSecret

    """
    The status of the mutation. Indicates if the allocation was successful or not.
    """
    status: MutationResultStatus!
}

"""
A type containing information if a secret is (still) valid. Secrets can become invalid after,
for example, password changes, usage or simply because they don't exist (anymore) remotely.
"""
type PurchaseStampSecretState {
    """
    The ID of the secret.
    """
    id: UUID!

    """
    A boolean indicating if the provided secret is still active.
    """
    valid: Boolean!
}

"""
A page containing Koopzegel transactions. This type also has a pagination object attached to it
with information on the pagination object that was passed along.
"""
type PurchaseStampTransactionPage {
    """
    The pagination object with more information on this page's pagination object.
    """
    pagination: LoyaltyPointsTransactionPagination!

    """
    The list of Koopzegel transactions on this page. Can be empty if there are no more transactions
    given the input pagination parameters.
    """
    transactions: [LoyaltyPointsTransaction!]!
}

"""
Enum that represents type of the device that performs the mutation
"""
enum PushNotificationsDeviceType {
    ANDROID
    IOS
}

"""
Input for the Sitespect push experiment
"""
input PushNotificationsSitespectExperiment {
    """
    Sitespect experiment identifier
    """
    experimentId: Int!

    """
    Sitespect variation group identifier
    """
    variationGroupId: Int!
}

"""
Input for the pushtokenSaveToken mutation
"""
input PushNotificationsTokenUpdateInput {
    """
    Version of the application
    """
    applicationVersion: String

    """
    Type of the device
    """
    deviceType: PushNotificationsDeviceType!

    """
    Public part of the RSA key pair used in push notification encryption/decryption
    """
    rsaKey: String

    """
    List of Sitespect push experiments member is assigned to
    """
    sitespectPushExperiments: [PushNotificationsSitespectExperiment!]

    """
    Push token used to send push notifications to the device
    """
    token: String!
}

"""
Quantities
"""
type Quantities {
    """
    Claimable quantity
    """
    claimable: Int!
}

"""
Indicates what kind of stock the quantity displays
"""
enum QuantityType {
    """
    Amount in pieces
    """
    PIECE

    """
    Amount in weight
    """
    WEIGHT
}

type Query {
    """
    Search for an address, check if it is a valid address and if AH
    delivers online orders to the address. The returned address is
    also correctly formatted.
    """
    addressSearch(
        """
        Address partial input
        """
        address: AddressPartialInput!
    ): AddressSearch!

    """
    Fetch a non-personalized advertisement. This advertisement is the same as a personalized advertisement, but
    no ad tracking is implemented. This query can be made using both member and non-member tokens. That means, the JWT
    might or might not contain a memberId.
    """
    advertisementNonPersonalized(
        """
        Device type. Either "phone", "tablet" or "desktop".
        """
        deviceType: AdvertisementDeviceType

        """
        The search keywords that belong to the context of this advertisement request. Useful when e.g. an ad needs to
        be shown on a products search result page.
        """
        searchKeywords: [String!]

        """
        Slot names of the advertisements that need to be fetched.
        """
        slots: [String!]!
    ): [Advertisement!]!

    """
    Fetch a personalized advertisement. This advertisement is the same as an anonymous advertisement, but
    additional parameters need to be provided to enable ad tracking. This query can only be made using a
    member token! That means, a JWT that contains a memberId.
    """
    advertisementPersonalized(
        """
        Anonymous identifier that is stored in the frontend device (web: cookies, app: shared preferences).
        """
        deviceMonetizationId: String!

        """
        Device type. Either "phone", "tablet" or "desktop".
        """
        deviceType: AdvertisementDeviceType!

        """
        The search keywords that belong to the context of this advertisement request. Useful when e.g. an ad needs to
        be shown on a products search result page.
        """
        searchKeywords: [String!]

        """
        Slot names of the advertisements that need to be fetched.
        """
        slots: [String!]!
    ): [Advertisement!]!

    """
    Get a kvk company
    """
    ahMemberCompanyRegistrationSearchPagination(
        """
        The given page number
        """
        page: Int!

        """
        The given search query from the user
        """
        query: String!
    ): MemberCompanyRegistrationSearchResult!

    """
    Get a kvk company based on it's ID
    Kamer van Koophandel (kvk) is part of the Dutch trade register where
    companies working in the Netherlands are registered.
    """
    ahMemberCompanyRegistrationV2(
        """
        BranchId can be used to select a specific building
        (Where ID is the same when a company has multiple buildings)
        """
        branchId: String

        """
        The ID used by the KvK to identify a company
        """
        id: String!
    ): MemberCompanyRegistrationResult!

    """
    Get the name of the application
    """
    applicationName: String!

    """
    Basket of the current user
    """
    basket: Basket

    """
    Retrieve bonus periods for current and next week
    """
    bonusPeriods(
        """
        Select the period that includes this date
        """
        date: String

        """
        Date on which the promotions are visible (used for time travel). Defaults to current
        """
        viewDate: String
    ): [BonusPeriod!]!

    """
    Retrieve bonus sections
    """
    bonusSections(
        """
        Retrieve next period
        """
        nextPeriod: Boolean
    ): [BonusSection!]!

    """
    Retrieve bonus segment by id
    """
    bonusSegment(
        """
        Hide promotion variants. Defaults to false
        """
        hideVariants: Boolean

        """
        Segment id
        """
        id: String!

        """
        Order id, if user has an active orders
        """
        orderId: Int
    ): BonusSegment

    """
    Retrieve bonus segments by promotionType
    """
    bonusSegments(
        """
        Hide promotion variants. Defaults to false
        """
        hideVariants: Boolean

        """
        Order id, if user has an active orders
        """
        orderId: Int

        """
        End of promotion period (inclusive). Filter on overlapping promotion validity period (format: yyyy-mm-dd)
        """
        periodEnd: String

        """
        Start of promotion period. Filter on overlapping promotion validity period (format: yyyy-mm-dd)
        """
        periodStart: String

        """
        Filter segments based on promotion type.
        E.g. INCENTIVE returns all free delivery
        promotion segments.
        """
        promotionType: BonusPromotionType

        """
        Filter segments based on segment type.
        E.g. AHOO returns all AH online segments
        """
        segmentType: BonusSegmentType

        """
        Filter segments based on several segment types.
        If segment types are passed, only segments
        of that type are returned.
        If negative segment types (i.e. NEGATE_PREMIUM and NEGATE_DIGITAL_SCRATCH_CARD)
        are passed, then all segments will be returned,
        except for the negative ones.
        If both negative and normal ones are passed, the normal
        ones will be ignored in favor of the negative ones.
        """
        segmentTypes: [BonusSegmentType]

        """
        List of states to match.
        If no value is provided, no filtering will be applied and all states we be retrieved.
        If the state starts with NEGATE it means exclusion, e.g. NEGATE_ACTIVATABLE means the ACTIVATABLE ones will be filtered out.
        A correct request should only specify either states to match or states to be excluded.
        In case both negative and normal are submitted, negative has priority; the service will ignore the states to be matched
        If the variable is left empty we default to negating the following values: -ACTIVATABLE, -REDEEMED and -REDEEMABLE.
        """
        states: [BonusSegmentState!]

        """
        Suppliers pay an extra fee to highlight specific free deliveries
        """
        supplierBoosted: Boolean

        """
        View date, only used for timetraveling in preview mode
        """
        viewDate: String

        """
        weekNumber
        """
        weekNumber: Int
    ): [BonusSegment!]!

    """
    Return the bonussegments for freedelivery
    """
    bonusSegmentsFreeDelivery(
        """
        nextWeek returns the bonusSegments for next week if no periodStart or periodEnd date is given. The default is returns the current week.
        """
        nextWeek: Boolean

        """
        End of promotion period (inclusive). Filter on overlapping promotion validity period (format: yyyy-mm-dd)
        """
        periodEnd: String

        """
        Start of promotion period. Filter on overlapping promotion validity period (format: yyyy-mm-dd)
        """
        periodStart: String

        """
        Suppliers pay an extra fee to highlight specific free deliveries
        """
        supplierBoosted: Boolean

        """
        View date, only used for timetraveling in preview mode
        """
        viewDate: String
    ): FreeDeliveryBonusSegments

    """
    Encrypts the orderId for sitespect metrics
    """
    checkoutSitespectOrderId(
        """
        Id of the order
        """
        orderId: Int!
    ): String!

    """
    Validates orders on stockLimit, or unavailable products
    """
    checkoutValidateOrder(
        """
        Id of the order to be validated
        """
        orderId: Int!
    ): CheckoutOrderValidation

    """
    Get configuration for captcha
    """
    ciamCaptchaConfiguration(useCase: String!): CaptchaConfiguration!

    """
    Passkey settings for current member,
    whether member is opted-in for passkeys, and list of registered passkeys.
    """
    ciamPasskeySettings: CiamPasskeySettings!

    """
    Validates the password reset code
    """
    ciamPasswordResetValidateCode(code: String!): ValidationResponse

    """
    Check a user password for Validation
    """
    ciamPasswordValidation(
        """
        Password to validate
        """
        password: String!

        """
        Optional username. If specified checks no more leaks.
        """
        username: String
    ): PasswordRulesValidated

    """
    Returns managed company accounts associated with the main company account.
    """
    companyAccountsManagedAccounts: [CompanyAccount!]!

    """
    Get a CMS Allerhande content page
    """
    contentCMSAllerhandePage(
        cmsMode: CmsMode
        options: ContentPageOptions
        path: String!
        useEnumWithUnderscoreStyle: Boolean = false
    ): ContentPage

    """
    Get a CMS flex page with brand header
    """
    contentCMSBrandHeader(
        documentId: String!
        options: ContentFlexPageOptions
        useEnumWithUnderscoreStyle: Boolean
    ): ContentBrandHeaderData

    """
    Get an array of CMS content components
    """
    contentCMSComponents(
        componentIds: [String!]!
        path: String!
        useEnumWithUnderscoreStyle: Boolean = false
    ): [ContentBaseCMSComponent!]!

    """
    Get a CMS flex page
    """
    contentCMSFlexPage(
        documentId: String!
        options: ContentFlexPageOptions
        useEnumWithUnderscoreStyle: Boolean = false
    ): ContentFlexPage

    """
    Get a CMS mobile content component
    """
    contentCMSMobileComponent(
        documentId: String!
        options: ContentMobileComponentOptions
        useEnumWithUnderscoreStyle: Boolean = false
    ): ContentBaseMobileCMSComponent

    """
    Get a CMS content page
    """
    contentCMSPage(
        cmsMode: CmsMode
        options: ContentPageOptions
        path: String!
        useEnumWithUnderscoreStyle: Boolean = false
    ): ContentPage

    """
    Get a CMS content page for external preview env (e.g. preview.ah.nl)
    """
    contentCMSPageExternalPreview(
        options: ContentPageOptions
        path: String!
        useEnumWithUnderscoreStyle: Boolean = false
    ): ContentPage
        @deprecated(
            reason: "@sunset_date(2023-12-31) this query is combined with contentCMSPage query, use contentCMSPage with argument cmsMode: EXTERNAL_PREVIEW \n. . "
        )

    """
    Get all active campaigns for the given 'viewDate' (defaults to today). Used for preview mode (time travel)
    """
    contentCampaigns(
        """
        viewDate defaults to today. Can be used to retrieve all available campaigns active on given date.
        yyyy-mm-dd
        """
        viewDate: String
    ): [Campaign!]!

    """
    Get a customer's attributes
    e.g. Digitaal kassabon, Recept opgeslagen, Voorkeurswinkel etc.
    """
    contentCustomerAttributes: ContentCustomerAttributes!

    """
    Get a CMS delivery grid
    """
    contentDeliveryGrid(options: ContentDeliveryGridOptions): ContentDeliveryGrid

    """
    Get a CMS footer links
    """
    contentFooterLinks(options: ContentFooterLinksOptions): ContentFooterLinks

    """
    Get a CMS MegaMenu links
    """
    contentMegaMenuLinks(documentId: String!, options: ContentMegaMenuLinksOptions): ContentMegaMenuLinks

    """
    Get the CMS opt in document
    """
    contentOptIn(options: ContentOptInOptions): ContentOptIn

    """
    Get the CMS resource bundle document
    It contains label keys and translations from CMS
    """
    contentResourceBundle(documentId: String!, options: ContentResourceBundleOptions): ContentResourceBundle

    """
    Get global themes configuration
    """
    contentThemesConfiguration: ContentThemesConfiguration

    """
    Get configurable usps
    """
    contentUsps: ContentUspGroup

    """
    Get basic PUBLIC information on a specific cookbook from a cookbook user
    """
    cookBook(
        """
        id of user
        """
        userId: Int!
    ): CookBook

    """
    Retrieve the total amount of allerhance recipes, but do not return them all (max 9)!
    """
    cookBookAllerhande(
        """
        id of user
        """
        userId: Int!
    ): CookBookRecipeAllerhandeResult!

    """
    When recipe is collected it can be favorite and have personal note
    """
    cookBookCollectedRecipe(
        """
        The recipe
        """
        recipeId: Int!
    ): CookBookCollectedRecipe

    """
    Retrieve last x cook books added
    """
    cookBookLastAdded(
        """
        max items to retrieve, defaults to 10
        """
        maxItems: Int
    ): [CookBook!]!

    """
    User can have its cookbook PUBLIC/PRIVATE, we always show their own book based on its memberId. This endpoint will be used for member page with his cookbook. Also cookbook itself can not be activated by ahold.
    """
    cookBookMember: CookBook

    """
    Blocked users you dont want to get messages from anymore
    """
    cookBookMemberBlockedMembers: [CookBookMessagingBlockedMember!]

    """
    Read a specific message
    """
    cookBookMemberMessage(
        """
        The id of the message
        """
        id: Int!
    ): CookBookMemberMessage

    """
    Paginated messages for cookbook member
    """
    cookBookMemberMessages(
        """
        Offset in results
        """
        offset: Int

        """
        Max results (per page)
        """
        size: Int
    ): CookBookMemberMessagesResult

    """
    Check if sending a  message to other cookbook user is possible.
    Note: both sender and receiver must have messaging enabled, and may not have put each other on the block-list.
    """
    cookBookMemberMessagingAllowed(
        """
        cookbook user id of receiver
        """
        userId: Int!
    ): Boolean!

    """
    Profile of cookbook member
    Return null when not member or not cookbook member
    """
    cookBookMemberProfile: CookBookMemberProfile

    """
    Get the private recipe
    """
    cookBookMemberRecipe(
        """
        id of recipe
        """
        id: Int!
    ): CookBookMemberRecipe

    """
    Total amount of unread messages
    """
    cookBookMemberUnreadCount: Int

    """
    Get the public recipe
    """
    cookBookRecipe(
        """
        id of recipe
        """
        id: Int!
    ): CookBookRecipe

    """
    Retrieve last added "maxItems" recipes
    """
    cookBookRecipeLastAdded(
        """
        max items to retrieve, defaults to 10 when not passed
        """
        maxItems: Int
    ): [CookBookRecipeListItem!]!

    """
    Retrieve top of "maxItems" recipes
    """
    cookBookRecipeTopVisited(
        """
        max items to retrieve, defaults to 10 when not passed
        """
        maxItems: Int
    ): [CookBookRecipeListItem!]!

    """
    Get all own recipes of the PUBLIC cookbook user, paginated
    """
    cookBookRecipes(
        """
        course
        """
        course: String

        """
        cuisine
        """
        cuisine: String

        """
        Dish type
        """
        dish: String

        """
        results offset
        """
        offset: Int

        """
        Source of protein
        """
        protein: String

        """
        max results
        """
        size: Int

        """
        id of user
        """
        userId: Int!
    ): CookBookRecipes

    """
    Get all stored allerhande recipes of the member
    """
    cookBookRecipesAllerhandeMember: [CookBookRecipeAllerhande!]

    """
    Get all collected recipes of a PUBLIC cookbook user, paginated (cached for 5 minutes)
    """
    cookBookRecipesCollected(
        """
        course
        """
        course: String

        """
        cuisine
        """
        cuisine: String

        """
        Dish type
        """
        dish: String

        """
        results offset
        """
        offset: Int

        """
        Source of protein
        """
        protein: String

        """
        max results
        """
        size: Int

        """
        id of user
        """
        userId: Int!
    ): CookBookRecipesCollected

    """
    Get all collected recipes of the Member itself
    """
    cookBookRecipesCollectedMember(
        """
        course
        """
        course: String

        """
        cuisine
        """
        cuisine: String

        """
        Dish type
        """
        dish: String

        """
        results offset
        """
        offset: Int

        """
        Source of protein
        """
        protein: String

        """
        max results
        """
        size: Int
    ): CookBookRecipesCollectedMember

    """
    Get all own recipes of the PUBLIC/PRIVATE cookbook member, paginated
    """
    cookBookRecipesMember(
        """
        course
        """
        course: String

        """
        cuisine
        """
        cuisine: String

        """
        Dish type
        """
        dish: String

        """
        results offset
        """
        offset: Int

        """
        Source of protein
        """
        protein: String

        """
        max results
        """
        size: Int
    ): CookBookRecipesMember

    """
    Search for a specific cook book
    """
    cookBookSearch(
        """
        City cookbook user lives
        """
        city: String

        """
        All or recent books
        """
        isRecent: Boolean

        """
        Full name of cookbook owner
        """
        name: String

        """
        Offset in results
        """
        offset: Int

        """
        Number of minimum recipes user has
        """
        recipes: Int

        """
        Max results (per page)
        """
        size: Int
    ): CookBookSearchResult

    """
    Search for a specific recipe
    """
    cookBookSearchRecipe(
        """
        Course 'Hoofdgerecht, Voorgerecht, Nagerecht, Bijgerecht, Lunch, Brunch, Ontbijt, Buffet, Hapje, Drankje'
        """
        course: String

        """
        Cuisine 'Hollands, Indiaas, Italiaans, Frans, Fusion, Mediterraan, Mexicaans, Oosters, Spaans, Thais, Wereldkeuken, Anders'
        """
        cuisine: String

        """
        Type of dish 'Brood/sandwiches, Gebak, Hartige Taarten, Pasta, Rijst, Roerbakken, Salades, Soepen, Wild, Anders'
        """
        dish: String

        """
        foo
        """
        isSlim: Boolean

        """
        Offset in results
        """
        offset: Int

        """
        Max preparation time in minutes
        """
        preparationTime: Int

        """
        Protein source 'Vlees, Vis, Gevogelte, Vegetarisch, Anders'
        """
        protein: String

        """
        Number of servings: '1, 2, 4, 6, 8, 12, 20'
        """
        servings: Int

        """
        Max results
        """
        size: Int

        """
        words in main title of recipe
        """
        title: String
    ): CookBookSearchRecipeResult

    """
    Retrieve top of x cook books
    """
    cookBookTopVisited(
        """
        max items to retrieve, defaults to 10
        """
        maxItems: Int
    ): [CookBook!]!

    """
    Retrieve customer information
    """
    customer: Customer

    """
    Get Customer Care article overview page
    """
    customerCareAricleOverview(
        cmsMode: CmsMode
        options: ContentPageOptions
        path: String!
    ): CustomerCareArticleOverview

    """
    Get Customer Care article detail page
    """
    customerCareArticleDetail(cmsMode: CmsMode, options: ContentPageOptions, path: String!): CustomerCareArticleDetail

    """
    Get customer care contact channels information
    """
    customerCareChannels(platform: ChannelPlatform): [CustomerCareChannel!]!

    """
    Get Customer Care content page
    """
    customerCareHomePage(cmsMode: CmsMode, options: ContentPageOptions): ContentPage

    """
    returns information for the Customer Care order module for  max 2 orders
    one order nearest to the future and one order closest in the past
    or two orders nearest to the future
    or two orders closest in the past
    """
    customerCareQuickLinkOrderDetails: [CustomerCareQuickLinkLaneOrderDetail!]!

    """
    returns information for the Customer Care store module for  max 2 store purchases in the recent past
    """
    customerCareQuickLinkStorePurchasesDetails: [CustomerCareQuickLinkLaneStorePurchaseDetail!]!

    """
    Get Customer Care settlements page
    """
    customerCareSettlementsPage: CustomerCareSettlementsPage!

    """
    returns store information about the last stores that have a transaction for the customer within 6 weeks
    """
    customerCareStoreVisitStores: [CustomerCareStore!]!

    """
    Autocomplete for the search bar
    """
    customerServiceAutocomplete(term: String!): CustomerServiceSuggestionResponse
        @deprecated(reason: "@sunset_date(2024-04-25) Use customerServiceSearchAutocomplete instead \n. . ")

    """
    Search through cms pages and articles in the customer care domain
    """
    customerServiceSearch(
        """
        Removes all html from the description
        """
        cleanText: Boolean

        """
        Search only for specific document type
        """
        customerServiceDocumentType: CustomerServiceDocumentType

        """
        Index of the page
        """
        page: Int

        """
        Amount of results for search
        """
        size: Int

        """
        The given search term
        """
        term: String!
    ): CustomerServiceSearchResponse

    """
    Autocomplete for the search bar
    """
    customerServiceSearchAutocomplete(term: String!): CustomerServiceSuggestionResponse

    """
    Calculate price to upgrade or downgrade the members Delivery Bundle
    temporary: CLC-12036
    """
    deliveryBundleCalculateChangePrice(
        """
        Code of Delivery Bundle to calculate change to
        """
        code: String!
    ): DeliveryBundlePriceToChange

    """
    Get all the possible banks supporting iDeal payments
    """
    deliveryBundlePaymentIDealIssuers: [DeliveryBundlePaymentIDealIssuer!]!

    """
    Get status of iDeal payment
    """
    deliveryBundlePaymentIDealStatus(id: String!): DeliveryBundlePaymentStatus!

    """
    Delivery Bundle subscription for member
    Will be null if not subscribed
    """
    deliveryBundleSubscription: DeliveryBundleSubscription

    """
    All Delivery Bundles available to subscribe to
    When logged in and subscribed will only return those delivery bundles customer can change to
    """
    deliveryBundles(
        """
        Promotion code if applicable
        """
        promoCode: String
    ): [DeliveryBundle!]

    """
    Get previous delivery
    """
    deliveryPrevious: Delivery

    """
    Deposit item in the order
    """
    depositComplaintDepositItems(orderId: Int!): [DepositComplaintDepositItem!]!

    """
    Retrieves orders that contain deposits
    """
    depositComplaintOrders: [DepositComplaintOrder!]!

    """
    Fetches an entry point component that can be rendered in a frontend consumer. A name
    has to be passed to identify an entry point component by. Will return null if no
    component with that name was found. A version can also optionally be passed along,
    in which case the backend will filter out all entry points that are tied to a specific
    version or range of versions. This version must be in the form of a SemVer, which is
    either x, x.y or x.y.z, with x, y, z being integers.
    """
    entryPointComponent(name: String!, version: String): EntryPointComponent

    """
    Get Favorite list(s)
    """
    favoriteList(
        """
        The amount of products to be returned, leave empty to get all products.
        """
        amountOfProducts: Int

        """
        Get one or multiple lists based on the amount of ids provided. Leave empty to get all lists.
        """
        id: [Int!]

        """
        Pagination for the favorite lists - page starting from 0
        """
        pagination: PageSizePagination

        """
        The favorite list id (in the new architecture) of the list to be retrieved
        """
        referenceId: String
    ): [FavoriteList!]

    """
    Retrieves feedback by id
    """
    feedback(id: String!): Feedback

    """
    Retrieves image download url's for feedback
    """
    feedbackImageWithUrl(imageIds: [String!]!): [FeedbackImageWithUrl!]!

    """
    Retrieves delivered orders for feedback
    """
    feedbackOrders: [FeedbackOrder!]

    """
    Retrieves folders like the weekly bonusfolder or special folders like wine, bbq, christmas folders
    """
    folders: [Folder!]!

    """
    Retrieves a grocery list with given id
    """
    groceryList(id: String!): GroceryListGetResult

    """
    Get all Online order invoices
    """
    invoices(filterOptions: InvoiceInput): Invoices

    """
    Returns the balance for the given campaign IDs for the currently authenticated member.
    These balances can refer to any type of campaign, including Digital Savings, Koopzegels,
    or to go. Does not return any data for invalid campaign IDs. Might return an empty
    array if all campaign IDs are invalid.
    """
    loyaltyPointsBalances(
        """
        The saving campaigns to fetch the balances for.
        """
        programIds: [Int!]!
    ): [LoyaltyPointsBalance!]!

    """
    Returns transactions for a given program ID for the currently authenticated member.
    Pagination is implemented through an offset/limit approach, so the first 10
    transactions are fetched through offset 0, limit 10. The next 10 are at offset 10,
    limit 10, followed by offset 20, limit 10, and so on. Requires caller to be a member.
    """
    loyaltyPointsTransactions(
        """
        The key to be passed to subsequent calls to ensure correct pagination. Does not need
        to be passed on the first call. Reuse the key that is attached to every response for
        the subsequent calls.
        """
        key: String

        """
        The offset-limit pagination that specifies the number of transactions to return. This
        uses the offset into the list of transactions and the limit of transactions to return
        in this query.
        """
        pagination: OffsetLimitPagination! = { limit: 10, offset: 0 }

        """
        The loyalty program to fetch the transactions for.
        """
        programId: Int!
    ): LoyaltyPointsTransactionPage!

    """
    Fetches a single loyalty program, which includes basic program information as well
    as displayable content for a program. This displayable content contains texts, images
    and other content needed to show the program to users. Requires a program ID to be
    passed along. Might return null when no program was found for the program ID or the
    backend deems the program as inaccessible to the public. Might not return content for
    the program when none has been set up in the CMS.
    """
    loyaltyProgram(programId: Int!): LoyaltyProgram

    """
    Fetches zero, one, or multiple loyalty programs based on the program types. These programs
    contain basic program information as well as displayable content for the program. This
    displayable content contains texts, images and other content needed to show the program
    to users. Not all programs might contain content, it depends if this was configured in
    the CMS. Returns an empty array if no programs were found given the input parameters.
    Might filter out programs that are deemed inaccessible to the public.
    """
    loyaltyPrograms(programTypes: [LoyaltyProgramType!]): [LoyaltyProgram!]!

    """
    Retrieve basic member information
    """
    member: Member

    """
    Checks if the given member-card is not already connected to another member
    """
    memberAddCardCheck(addCardCheckInput: AddCardCheckInput!): AddMemberCard!

    """
    Get newsletter subscription by code
    """
    memberGetNewsletterStatus(code: String!): GetNewsletterStatus!

    """
    Check if email is known at AH/ETOS/GALL
    """
    memberHasAccount(captcha: CaptchaVerifyInput, email: String!): MemberHasAccount!

    """
    If a member has onboarded and has login credentials. Anonymous (not
    onboarded) members are used to create shoppinglists for new customers.
    """
    memberIsOnboarded: Boolean!

    """
    If you only want to know the login state its available by its own query
    This only works for web, not app. Will be removed in the future
    """
    memberLoginState: MemberLoginState!

    """
    Check if phone number is valid
    """
    memberPhoneNumberIsValid(phoneNumber: String!): MemberPhoneNumberIsValid!

    """
    Retrieve member preferences
    """
    memberPreferences: MemberPreferences!
        @deprecated(reason: "@sunset_date(2023-05-15) - checked 2023-05-08 - use ahMemberPreferences!!! \n. . ")

    """
    Retrieve all member recipe information
    """
    memberRecipe(
        """
        Member recipe id
        """
        id: Int!
    ): MemberRecipe
        @deprecated(
            reason: "@sunset_date(2024-02-01) - checked 2023-12-29 - used in appie-ios appie-android appie-be-ios - query has been renamed to recipeMemberRecipe to match module prefix standard \n. use recipeMemberRecipe. "
        )

    """
    Get blocker reasons when unsubscribing as a member
    """
    memberUnsubscribeGetBlockerReasons(blockerReasonInput: UnsubscribeBlockerReasonInput): [UnsubscribeBlockerReason!]!

    """
    Retrieve message center message by member id
    """
    messageCenterGetMessages: [MessageCenterMessage!]!

    """
    Retrieve message center unread message info by member id
    """
    messageCenterGetUnreadMessagesInfo: MessageCenterUnreadMessagesInfo!

    """
    Retrieves the status of a conversation
    """
    messengerConversationStatus: MessengerConversationStatus

    """
    Retrieve a conversation. Requires a messenger cookie.
    """
    messengerGetConversation: MessengerConversation

    """
    Retrieves temporary image urls for image ids. Urls are valid for 5 seconds
    """
    messengerGetImageUrls(ids: [String!]!): MessengerImages!

    """
    Returns the language of the chat defaults to nl_NL
    """
    messengerLanguage: String!

    """
    Get the Common Air Miles balance for the current user
    """
    milesBalance: MilesBalance!

    """
    Fetches all active charities that a member is able to donate Miles to. Returns
    an array containing all of these charities. Might return an empty array when there
    are currently no active charities that can be donated to.
    """
    milesCharities: [MilesCharity!]!

    """
    Redirects to Loyalty Management Netherlands when adding or removing Air Miles loyalty card. You can provide an
    optional hostname for airmiles.nl to redirect to upon authentication at airmiles.nl. If not provided, it will simply
    resolve the hostname using the IdP client ID and the current environment.
    """
    milesDoRedirectToLmn(hostname: String): RedirectToLmn!

    """
    Returns all Air Miles transactions for the user
    """
    milesTransactions: [MilesTransaction!]

    """
    notifications
    """
    notifications(
        """
        type of notification to query, e.g. CMS, CMS_GLOBAL_COMBINED
        """
        type: NotificationType = CMS
    ): [Notification!]!

    """
    returns delivery notification
    """
    notificationsGetDeliveryNotification: DeliveryNotification

    """
    Fetch the nutri-score for the loggedOn user.
    Optional to give a start and end date in YYYY-MM-DD.
    If no date provided it gives last 30 days
    """
    nutriScoreOverview(endDate: String, startDate: String): NutriScoreOverview

    """
    Returns previously bought products by nutri-score for the user.
    Optional to give a start and end date in YYYY-MM-DD.
    If no date provided it gives last 30 days
    """
    nutriScoreProductsByNutriScore(endDate: String, nutriScore: NutriScore!, startDate: String): NutriScoreDistribution!

    """
    Get order
    """
    order(
        """
        The ID of the order, if not specified, will try to return the current 'active' order.
        """
        id: Int
    ): Order

    """
    Get the orderbudget of the customer
    """
    orderBudget: OrderBudgetResult

    """
    Get list of delivery slots grouped by day
    """
    orderDeliverySlots(
        """
        Address of the delivery
        """
        address: MemberAddressInput!
    ): [SlotDay!]!

    """
    Single fulfillment
    """
    orderFulfillment(orderId: Int!): Fulfillment

    """
    Order fulfillments
    """
    orderFulfillments(
        """
        Include cancelled orders in the response. Default value: false
        """
        includeCancelledOrders: Boolean

        """
        Offset for paging, default 0
        """
        offset: Int

        """
        Amount of fulfillments to show
        """
        size: Int

        """
        Status of the order, OPEN, CLOSED or ALL - default ALL
        """
        status: FulfillmentStatus
    ): FulfillmentsResult

    """
    Get order fulfillments by date range
    """
    orderFulfillmentsByDateRange(
        """
        Date range start and end date
        """
        dateRange: FullfillmentDateRange!
    ): [Fulfillment!]

    """
    Find orders that are currently in lead time.
    Lead time orders are past cutoff time but not delivered yet.
    """
    orderLeadTime: [Fulfillment!]

    """
    Orders that can be merged
    """
    orderMergeOptions: [Fulfillment!]

    """
    Get minimum order value
    """
    orderMinimumValue(
        """
        ID of the order to get minimum order from
        """
        orderId: Int!
    ): Float

    """
    Get list of pickup slots grouped by day
    """
    orderPickupSlots(
        """
        ID of the pickup location selected by the user
        """
        pickupLocationId: Int!
    ): [SlotDay!]!

    """
    get the order receipt
    """
    orderReceipt(orderId: Int): OrderReceipt

    """
    Returns the maximum value of the order
    """
    orderRulesMaximumValue: Float!

    """
    Get the order samples
    """
    orderSamples(
        """
        The ID of the order.
        """
        orderId: Int!
    ): [OrderSample!]!

    """
    Retrieve the payment authorization status of a payment.
    Used in case of polling authorization status.
    """
    paymentsAuthorizationStatus(mutationId: String!, paymentId: String!): CheckoutOrderSubmissionPayment

    """
    Returns all DCT tokens from the payments system
    """
    paymentsGetDCTCards(
        """
        Apply Filter by status of the DCT cards
        """
        statuses: PaymentTokenStatus
    ): [PaymentsDCTCard!]!

    """
    Gets the amount of full booklets that a user (can) apply in the checkout
    """
    paymentsGetFullBookletsCount: Int

    """
    Retrieves GiftCards from the payments system
    """
    paymentsGetGiftCards: [PaymentsGiftCard!]!

    """
    Gets all authorized transactions that were used in an order
    """
    paymentsGetOrderTransactions(orderId: Int!): PaymentsOrderTransactions

    """
    Retrieve the payment options of a member
    """
    paymentsOptions: [PaymentOption!]!

    """
    Get a pickup location by Id
    """
    pickupLocation(id: Int!): PickupLocation

    """
    Get pickup locations of selected types
    """
    pickupLocations(filters: PickupLocationsFiltersInput): [PickupLocation!]!

    """
    Get a specific product
    """
    product(
        """
        Date for promotions and availability in YYYY-MM-DD format
        """
        date: String

        """
        Product id
        """
        id: Int!
    ): Product!

    """
    Get alternative product ids for a given product, default limit 10
    """
    productAlternatives(
        """
        Date for promotions and availability in YYYY-MM-DD format
        """
        date: String

        """
        Product id
        """
        id: Int!

        """
        Ammount of alternative products to return
        """
        size: PageSize!
    ): ProductRecommendations

    """
    Get product brands
    """
    productBrands: [ProductBrand!]

    """
    Retrieves order products for the product complaint form.
    """
    productComplaintOrderProducts(orderId: Int!): [ProductComplaintOrderProduct!]!

    """
    Retrieves orders for the product complaint form.
    """
    productComplaintOrders: [ProductComplaintOrder!]!

    """
    Retrieves store products for the product complaint form.
    """
    productComplaintStoreProducts(storePurchaseId: String!): [ProductComplaintStoreProduct!]!

    """
    Retrieves store purchases for the product complaint form.
    """
    productComplaintStorePurchases: [ProductComplaintStorePurchase!]!

    """
    Get crosssell product ids for a given product from the V2 endpoint, default limit 10
    """
    productCrossSellsV2(input: ProductCrossSellsV2Input!): ProductRecommendations

    """
    Get user purchase history
    """
    productPurchaseHistory(
        """
        Page number to fetch. If page size is set to zero, this parameter is ignored (all results are fetched)
        """
        page: Int

        """
        Maximum number of entries per page. If this parameter is zero, all entries are fetched as a single page
        """
        size: Int

        """
        Sort by, values: [frequency, date, department, relevance].
        No direction indicator will assume default, dependent on the particular sort by value (might be asc or desc).
        Default sort direction is: [frequency: desc, date: desc, department: asc, relevance: desc]
        """
        sortBy: SortBySort

        """
        The date on which the customer has set the delivery date.
        """
        viewDate: String
    ): ProductPurchaseHistory!

    """
    Retrieves orders that contain products that can be returned
    """
    productReturnOrders: [ProductReturnOrder!]!

    """
    Product in the order
    """
    productReturnProducts(orderId: Int!): [ProductReturnProduct!]!

    """
    Search for products
    """
    productSearch(input: ProductSearchInput!): ProductSearchResult!

    """
    Get details of a taxonomy by its id.
    """
    productTaxonomyById(
        """
        Depth of the children in the response: less than 0 - infinite, 0 - the node itself, 1 - with direct children
        """
        children: Int

        """
        Slugified name of a taxonomy. For example: `bakkerij-en-banket`
        """
        id: Int!

        """
        If true, return only active taxonomies (`taxonomy.active === true`)
        Optional, `true` by default.
        """
        onlyActive: Boolean = true

        """
        Depth of the parents in the response: less than 0 - infinite, 0 - the node itself, 1 - with direct parents
        """
        parents: Int
    ): [ProductTaxonomy]

    """
    Get details of a taxonomy by its slugified name.
    """
    productTaxonomyByName(
        """
        Depth of the children in the response: less than 0 - infinite, 0 - the node itself, 1 - with direct children
        """
        children: Int

        """
        If true, return only active taxonomies (`taxonomy.active === true`)
        Optional, `true` by default.
        """
        onlyActive: Boolean = true

        """
        Depth of the parents in the response: less than 0 - infinite, 0 - the node itself, 1 - with direct parents
        """
        parents: Int

        """
        Slugified name of a taxonomy. For example: `bakkerij-en-banket`
        """
        slugifiedName: String!
    ): [ProductTaxonomy]

    """
    Get top-level taxonomies
    """
    productTopLevelTaxonomies(
        """
        If true, return only active taxonomies (`taxonomy.active === true`)
        Optional, `true` by default.
        """
        onlyActive: Boolean = true
    ): [ProductTaxonomy!]

    """
    A List of products by id & date
    """
    products(productsInput: [ProductsInput!]!): [Product!]!

    """
    Returns the Koopzegels balance for the currently authenticated member. This balance
    includes the amount of money invested, as well as the current value of that investment
    if Koopzegels were to be redeemed. The balance also contains more generic information
    on the booklets, which are tightly connected to Koopzegels balances. Might return an
    error when the currently authenticated member is not opted in for Koopzegels.
    """
    purchaseStampBalance: PurchaseStampBalance!

    """
    Returns information on whether a secret is still valid or not. Secrets can become
    inactive after certain state changes, such as password changes, or they might have
    been deleted remotely by some automated process. Takes in the ID of the secret, as well
    as the OTP of epoch time 0, derived from the secret, to validate if the secret is still
    active.
    """
    purchaseStampCheckSecretState(id: UUID!, otp: Int!): PurchaseStampSecretState!

    """
    Fetches the member's purchase stamp saving goal.
    If the member does not have a purchase stamp saving goal, this query will return null.
    """
    purchaseStampSavingGoal: PurchaseStampSavingGoal

    """
    Returns the server time of the purchase-stamp-secret-service. This server time is used
    in the redeem flow, which works fully offline. Syncing the client with the server time
    should be done regularly to prevent the offline TOTP algorithm from generating invalid
    or expired codes.
    """
    purchaseStampServerTime: DateTime!

    """
    Returns transactions for the Koopzegel program for the currently authenticated member.
    Pagination is implemented through an offset/limit approach, so the first 10
    transactions are fetched through offset 0, limit 10. The next 10 are at offset 10,
    limit 10, followed by offset 20, limit 10, and so on. Requires caller to be a member.
    """
    purchaseStampTransactions(
        """
        The key to be passed to subsequent calls to ensure correct pagination. Does not need
        to be passed on the first call. Reuse the key that is attached to every response for
        the subsequent calls.
        """
        key: String

        """
        The offset-limit pagination that specifies the number of transactions to return. This
        uses the offset into the list of transactions and the limit of transactions to return
        in this query.
        """
        pagination: OffsetLimitPagination! = { limit: 10, offset: 0 }
    ): PurchaseStampTransactionPage!

    """
    Retrieve all recipe information
    """
    recipe(
        """
        Recipe id
        """
        id: Int!

        """
        Number of servings
        """
        servings: Int
    ): Recipe

    """
    Retrieve allerhande magazine by id
    """
    recipeAllerhandeMagazine(id: Int!): AllerhandeMagazine

    """
    Retrieve list of allerhande magazines from yudu
    """
    recipeAllerhandeMagazines(limit: Int): [AllerhandeMagazine!]!

    """
    Retrieves recipe names based on query text
    """
    recipeAutoSuggestions(query: String!): [String!]!

    """
    Retrieve all user recipe collection categories with recipe ids
    """
    recipeCollectionCategories: [RecipeCollectionCategory!]!

    """
    Retrieve user recipe collection category by id
    """
    recipeCollectionCategory(id: Int!): RecipeCollectionCategory!

    """
    Retrieve highlighted recipe themes from Hippo
    """
    recipeHighlightedThemes: RecipeHighlightedThemes

    """
    Retrieve rating which member gave for a recipe
    """
    recipeMemberRating(
        """
        Recipe id
        """
        id: Int!
    ): Int

    """
    Retrieve all member recipe information
    """
    recipeMemberRecipe(
        """
        Member recipe id
        """
        id: Int!
    ): MemberRecipe

    """
    Retrieve member recipe related preferences
    """
    recipePreferences: MemberRecipePreferences!

    """
    Retrieve preparation section
    """
    recipePreparationSection(
        """
        Recipe id
        """
        id: Int!

        """
        Number of servings
        """
        servings: Int
    ): RecipePreparationSection

    """
    Retrieve products suggestions based on a recipe id
    """
    recipeProductSuggestionsV2(options: RecipeProductSuggestionV2Input!): [RecipeToProductSuggestionsResult!]

    """
    Combined query to render recipe recommendation data
    """
    recipeRecommendationLane: RecipeRecommendationLane!

    """
    Retrieve recommended recipes
    """
    recipeRecommendations: [RecipeRecommendation!]!

    """
    Search for Allerhande recipes - uses the recipe-service
    """
    recipeSearch(query: RecipeSearchParams!): RecipeSearchResult!
        @deprecated(
            reason: "@sunset_date(2024-03-01) - Deprecated because of migration to recipe-search-service. Use recipeSearchV2 instead \n. . "
        )

    """
    search for recipes and member recipes. Uses the recipe-search-service.
    """
    recipeSearchV2(
        """
        Favourite recipe ids. Used to identify "favorieten" filter
        """
        favoriteRecipeIds: [Int!]

        """
        Filters
        """
        filters: [RecipeSearchQueryFilter!]

        """
        Flag to include or exclude aggregations
        """
        includeAggregations: Boolean = true

        """
        The recipes that contain these ingredients will appear first in the search results when "sortBy=MOST_RELEVANT"
        """
        ingredients: [String!]

        """
        Recipes that should always come first on the first page
        """
        priorityRecipeIds: [Int!]

        """
        Use it if you want to search through only specific recipe ids
        """
        recipeIds: [Int!]

        """
        Query text, used for searching by title and ingredients
        """
        searchText: String

        """
        Pagination: size of a page
        """
        size: PageSize = 35

        """
        How to sort
        """
        sortBy: RecipeSearchSortOption

        """
        Pagination: how many recipes to skip
        """
        start: Int = 0
    ): RecipeSearchResult!

    """
    Retrieve recipes shopped by a member
    """
    recipeShoppedRecipes: [RecipeShoppedRecipe]!

    """
    Retrieve stories
    """
    recipeStories(
        """
        A/B testing campaign id. If specifies
        """
        campaignId: Int

        """
        View date / Order date in the format: YYYY-MM-DD
        This defines whether API should return next week bonus stories
        """
        date: String

        """
        A/B testing variant id
        """
        variantId: Int
    ): [RecipeStoryCollection!]!

    """
    Retrieve recipe suggestions based on productId
    """
    recipeSuggestionsForProductId(limit: Int, productId: Int!): [RecipeSummary]!

    """
    Get list of recipe summaries
    """
    recipeSummaries(
        """
        Ids of recipe summaries to get information for
        """
        ids: [Int!]!
    ): [RecipeSummary!]!

    """
    Get a summary for a specific recipe
    """
    recipeSummary(
        """
        Id of recipe you want to get information for
        """
        id: Int!
    ): RecipeSummary!

    """
    Retrieve top recipes lists from Hippo
    """
    recipeTopRecipes: [RecipeTopRecipes]!

    """
    Retrieve recipe variants, for instance a vegan variant of the recipe
    """
    recipeVariants(
        """
        Recipe id
        """
        recipeId: Int!
    ): [RecipeSummary!]!

    """
    Get recipe video
    """
    recipeVideo(
        """
        Recipe video Id
        """
        id: Int!
    ): RecipeVideo

    """
    Retrieves recipe video names based on query text
    """
    recipeVideoAutoSuggestions(query: String!): [String!]!

    """
    Search for videos
    """
    recipeVideoSearch(query: RecipeVideoSearchParams!): RecipeVideoSearchResult!

    """
    Retrieve recipe videos that relates to the video
    """
    recipeVideosRelatedToVideo(
        """
        How many to retrieve
        """
        size: Int = 4

        """
        Recipe video id
        """
        videoId: Int!
    ): [RecipeVideo!]!

    """
    Retrieve recipes that relates to the recipe
    """
    recipesRelatedToRecipe(
        """
        Recipe id
        """
        recipeId: Int!

        """
        How many to retrieve
        """
        size: Int = 4
    ): [RecipeSummary!]!

    """
    Retrieve recipes that relates to the video
    """
    recipesRelatedToVideo(
        """
        How many to retrieve
        """
        size: Int = 4

        """
        Recipe video id
        """
        videoId: Int!
    ): [RecipeSummary!]!

    """
    Get forgotten product recommendations.
    """
    recommendationsForgottenProducts: [Product]!

    """
    Get forgotten product recommendations version 2.
    """
    recommendationsForgottenProductsV2(
        """
        Current items in the basket
        """
        basketItems: [BasketItemRecommendationsInput!]!

        """
        Indicates the experiment group the request falls in. Use for A/B tests.
        """
        experimentId: String

        """
        Pagination for the recommended products
        """
        pagination: PageSizePagination

        """
        Set True to return recommendations only with a positive contribution margin.
        """
        positiveCmOnly: Boolean
    ): [Product!]!

    """
    Get missing bonus recommendations.
    """
    recommendationsMissingBonus: [MissingBonusOrderLine]!

    """
    Scrape recipe on the following url
    """
    scrapeRecipe(url: String!): ScrapedRecipe

    """
    Get product, recipe and customer care suggestions based on a search query.
    """
    search(
        """
        The number of results for the products.
        """
        limit: Int = 6

        """
        The search query.
        """
        query: String!
    ): [SearchSuggestion!]!

    """
    Perform search for products of a specific brand.
    """
    searchBrand(input: SearchBrandInput!): SearchPayload!

    """
    Perform search for products in a specific category.
    """
    searchCategory(input: SearchCategoryInput!): SearchPayload!

    """
    Get all search facet configurations
    """
    searchFacetConfig: [SearchFacetConfig!]!

    """
    Perform search for previously bought products.
    """
    searchPreviouslyBought(input: SearchPreviouslyBoughtInput): SearchPayload!

    """
    Perform search for products in the AH product catalog.
    """
    searchProducts(input: SearchProductsInput!): SearchPayload!

    """
    Get taxonomies based on the slugified name of a parent taxonomy. Only returns the direct children of the parent.
    """
    searchTaxonomies(
        """
        Include taxonomies that are active
        """
        active: Boolean = true

        """
        Depth of the children in the response: less than 0 - infinite, 0 - the node itself, 1 - with direct children, ...
        """
        children: Int = 1

        """
        Include taxonomies that only has products
        """
        hasProducts: Boolean = true

        """
        Include taxonomy images
        """
        includeImages: Boolean = true

        """
        Slugified name of a taxonomy. For example: `bakkerij-en-banket`
        """
        slugifiedName: String!
    ): [SearchTaxonomy]

    """
    Get all settlements and the conclusion
    """
    serviceMemoSettlementsSummary(shoppingCartId: ShoppingCartId): ServiceMemoSettlements!
        @deprecated(reason: "@sunset_date(2024-5-01) - use settlementSettlementsSummary instead \n. . ")

    """
    Get all settlements and the conclusion
    """
    settlementsTotal: SettlementsTotal!
    sourceVersions: String!

    """
    Fetches all stamp gift links attached to a program / saving campaign, which are used to gift
    stamps to another member. There can be multiple gift links per member-program combination,
    as gift links can only be consumed by one member.
    """
    stampSharingGiftLinks(
        """
        The program / saving campaign that is connected to this gift link.
        """
        programId: Int!
    ): [StampShareable!]!

    """
    Fetches the stamp sharing request link, which can be sent to other members to request stamps.
    If a sharing request link does not yet exist for this member-program combination, one will
    be created first and then returned.
    """
    stampSharingRequestLink(
        """
        The program / saving campaign that is connected to this request link.
        """
        programId: Int!
    ): StampShareable!

    """
    Validate a stamp sharing request link. If a request link is not valid, it returns a reason
    as to why it is not valid.
    """
    stampSharingRequestValidate(
        """
        The shareable ID. This is the ID that is embedded in the request link.
        """
        shareableId: String!
    ): StampShareableValidationResult!

    """
    Retrieve store information
    """
    store(
        """
        id we have of the store
        """
        id: Int!
    ): Store
        @deprecated(
            reason: "@sunset_date(2023-07-01) - checked 2023-05-08 - used in ah-stores, appie-android, appie-ios - ah-stores is being refactored therefore the graphql stories belonging to it aswell \n. storesInformation in stores module. "
        )

    """
    Retrieve stock information of a product in a store
    """
    storeStock(
        """
        id of the product
        """
        productId: Int!

        """
        id of the store
        """
        storeId: Int!
    ): StoreStockProduct

    """
    Retrieve alternative products which are in stock
    """
    storeStockAlternativeProducts(
        """
        id of the product
        """
        productId: Int!

        """
        id of the store
        """
        storeId: Int!
    ): [StoreStockProduct]

    """
    Retrieve nearby alternative stores which have the product in stock
    """
    storeStockAlternativeStores(
        """
        id of the product
        """
        productId: Int!

        """
        id of the store
        """
        storeId: Int!
    ): [StoreStockStore]

    """
    Retrieve stock information of multiple products within a store
    """
    storeStocks(
        """
        ids of the products
        """
        productIds: [Int!]!

        """
        id of the store
        """
        storeId: Int!
    ): [StoreStockProduct]

    """
    Get details for stores
    """
    stores(
        """
        Filter options
        """
        filter: StoreFilterInput

        """
        Page size
        """
        size: PageSize!

        """
        Offset
        """
        start: Int
    ): StoresResult!
        @deprecated(
            reason: "@sunset_date(2023-07-01) - checked 2023-05-08 - used in ah-stores, ah-customer-care, appie-android, appie-ios - ah-stores is being refactored therefore the graphql stories belonging to it aswell \n. storesSearch in stores module. "
        )

    """
    Number of stores per city
    """
    storesCityCount(
        """
        (optional) Search text
        """
        cityStartsWith: String
    ): [StoresCityCount!]

    """
    Gets the member's favourite store
    """
    storesFavouriteStore: Stores

    """
    Autocomplete suggestions for location searches
    """
    storesGeoLocationSuggestions(
        """
        Search string
        """
        search: String!

        """
        Pass a self-generated string to group calls together for billing purposes
        """
        sessionToken: String
    ): [StoresGeoLocationSuggestion!]

    """
    Retrieve store information
    """
    storesInformation(
        """
        id we have of the store
        """
        id: Int!
    ): Stores

    """
    Search stores based on filter
    """
    storesSearch(
        """
        Filter options
        """
        filter: StoresFilterInput

        """
        Limit of amount of results per page
        """
        limit: Int

        """
        Offset
        """
        start: Int
    ): StoresResultType!

    """
    Returns the Delivery Bundle subscription availability for a given postalcode
    Can optionally specify the availability for given delivery days and a postalcode
    """
    subscriptionAvailability(
        """
        Availability of a specific definition code of the subscription you want to retrieve. Within a subscription type (such as BEZORG) you have BEZORG3, BEZORG6 or BEZORG12.
        """
        code: String

        """
        Specific date for checking the availability. Format YYYY-MM-DD
        """
        date: String

        """
        Postal code digits to check the availability
        """
        postalCodeDigits: Int!

        """
        Subtype of subscription. Possible values are: OFF_PEAK or UNLIMITED. OFF_PEAK means Tuesday to Thursday. UNLIMITED means Monday to Saturday
        When you want to retrieve the availability of a specific subtype use this optional param.
        """
        subscriptionSubType: String

        """
        Subscription type i.e.: OMNI, BEZORG
        """
        type: String!
    ): SubscriptionAvailability!

    """
    Get all available subscriptions for given type including subscription bundles, such as BEZORG1, BEZORG12, OMNI + BEZORG12.
    Uses the V1 endpoint of the subscription bundle processor
    """
    subscriptionBundlesAvailable(
        """
        Discount code to apply to the bundles
        """
        promoCode: String

        """
        Subscription type
        """
        type: String!
    ): [SubscriptionBundle!]

    """
    Get all available subscriptions for given type including subscription bundles, such as BEZORG1, BEZORG12, OMNI + BEZORG12
    Including the connected bundle. Uses the V2 endpoint of the subscription bundle processor
    """
    subscriptionBundlesAvailableV2(
        """
        Discount code to apply to the bundles
        """
        promoCode: String

        """
        Subscription type
        """
        type: String!
    ): [SubscriptionBundle!]

    """
    Calculcate the price if subscription is changed to a different one
    """
    subscriptionCalculateChange(
        """
        Code of the subscription to which the member wants to change (defintionCode, i.e. BEZORG12)
        """
        code: String!

        """
        Subscription type i.e.: OMNI, BEZORG
        """
        type: String!
    ): SubscriptionChange

    """
    Get calculated hypothetical savingsamount after having a certain subscription. For now only available for AH-Premium
    """
    subscriptionCalculateSavings(
        """
        Additional input options for calculating savingsamount
        """
        options: SubscriptionSavingsOptions!

        """
        Amount of euro's spent per week
        """
        weeklySpentAmount: Int!
    ): SubscriptionSavings!

    """
    Subscription of a certain type for a member
    """
    subscriptionCurrent(
        """
        Promocode to apply discount
        """
        promoCode: String

        """
        SubscriptionType such as OMNI (Premium) and BEZORG (B2C delivery bundle)
        """
        type: String!
    ): SubscriptionCurrent

    """
    Checks if member is eligible for the B2B subscriptionType
    """
    subscriptionEligibleForB2B: Boolean!

    """
    Retrieve estimated premium savings based on current purchase history
    """
    subscriptionEstimatedPremiumSavings: SubscriptionEstimatedPremiumSavings!

    """
    Retrieves the current subscription fixed delivery slot of the member
    """
    subscriptionFixedDeliverySlotCurrent: SubscriptionFixedDeliverySlotCurrent

    """
    Available fixed delivery moments grouped by days based on a member's postalcode
    """
    subscriptionFixedDeliverySlots(
        """
        Postal code to deliver to
        """
        postalCode: String!

        """
        Subscription type
        """
        type: String!
    ): [SubscriptionFixedDeliverySlot!]

    """
    Get all the possible banks supporting iDeal payments
    """
    subscriptionPaymentIDealIssuers: [SubscriptionPaymentIDealIssuer!]!

    """
    Get status of iDeal payment
    """
    subscriptionPaymentIDealStatusTemp(
        """
        The subscription type but then as application param, such as b2b, premium and deliverybundle
        """
        application: String!

        """
        The ID of the ideal payment
        """
        paymentId: String!
    ): SubscriptionPaymentStatus!
        @deprecated(
            reason: "@sunset_date(2022-08-01) - checked 2023-06-15 - used in appie-ios@8.14.3 - Temp uses BE v1. The normal query uses v2 and requires an additional param \n. subscriptionPaymentIDealStatusV2. "
        )

    """
    Get status of iDeal payment
    """
    subscriptionPaymentIDealStatusV2(
        """
        The subscription type but then as application param, such as b2b, premium and deliverybundle
        """
        application: String!

        """
        The ID of the ideal payment
        """
        paymentId: String!

        """
        Queryparams needed to check the status
        """
        queryParams: [KeyValueInput!]!
    ): SubscriptionPaymentStatus!

    """
    Retrieve actual premium savings
    """
    subscriptionPremiumSavings: SubscriptionPremiumSavings!

    """
    The potential savings a member can get by getting a subscription. Hence, the discount they are missing out on.
    Made for iOS due to typing issues with 'any'.
    """
    subscriptionSavingPotential: SubscriptionSavingPotential!

    """
    Retrieves a summary of the member's subscription type.
    """
    subscriptionSummary(
        """
        Type of Subscription, i.e.: OMNI, BEZORG
        """
        type: String!
    ): SubscriptionSummary!

    """
    Subscription for member
    Will be null if not subscribed
    """
    subscriptionV2(
        """
        Code of subscription
        """
        code: String!
    ): SubscriptionPlan
        @deprecated(
            reason: "@sunset_date(2023-02-01) - checked 2023-06-15 - used in appie-ios@8.32.0 appie-be-ios@8.26.1 appie-android@8.38.0 - New query available that uses subscription-service v3. This query still uses v1 \n. subscriptionCurrent. "
        )

    """
    Get all available SINGULAR subscriptions for given type, such as BEZORG1, BEZORG12.
    This will leave out combination subscriptions such as OMNI + BEZORG.
    """
    subscriptionsAvailable(
        """
        Discount code for the subscription
        """
        promoCode: String

        """
        Subscription type
        """
        type: String!
    ): [SubscriptionAvailable!]
        @deprecated(
            reason: "@sunset_date(2023-02-01) - checked 2023-06-15 - used in appie-ios@8.31.1 appie-be-ios@8.26.1 appie-android@8.27.0 - subscriptionBundlesAvailable contains both subscription bundles and singular subscriptions. Does the same thing but better \n. subscriptionBundlesAvailable. "
        )

    """
    Get all the suppliers
    """
    suppliers: [Supplier]!

    """
    Returns after specified delay
    """
    testEcho(
        """
        Delay in milliseconds
        """
        delay: Int = 100

        """
        Message to echo
        """
        echo: String = "Pong"

        """
        Whether to throw an error
        """
        error: Boolean = false

        """
        Extend timeout with this value
        """
        extend: Int

        """
        Reset timeout with this value
        """
        reset: Int
    ): String!

    """
    Calls echo-service
    """
    testEchoService(
        """
        Delay in milliseconds forwarded to echo-service
        """
        delay: Int = 100

        """
        Timeout for the REST call to echo-service
        """
        timeout: Int
    ): String!

    """
    Return the HTTP headers that were received by the GraphQL Server.
    """
    testHttpHeaders: [TestHttpHeader!]!

    """
    Calculate total price and discount for the given line items (product ID and quantity).
    """
    totalPrice(
        """
        View date / Order date in the format: YYYY-MM-DD
        """
        date: String
        products: [PriceLineItem!]!
    ): PriceTotal

    """
    Get current version of the server
    """
    version: String!

    """
    Get video from Blue Billywig by id
    (bbwProject can be either "ah" or "ffn")
    """
    videoBbw(bbwProject: String!, videoId: String!): VideoBbw
}

"""
The quote image alignment (left/right)
"""
enum QuoteImageAlignmentType {
    LEFT
    RIGHT
}

"""
We have two types of entities in recipe domain: Recipe and RecipeSummary
Recipe has more data compare to RecipeSummary and they have different data sources:
RecipeSummar comes from Elastic
Recipe comes from PostgreSQL DB

Will be extended with more fields
"""
type Recipe {
    """
    Recipe alternative title
    """
    alternateTitle: String!

    """
    Recipe author
    """
    author: RecipeAuthor

    """
    Recipe classifications
    """
    classifications: [String!]!

    """
    Recipe cooking time
    """
    cookTime: Int!

    """
    Recipe courses
    """
    courses: [String!]!

    """
    Recipe cuisines
    """
    cuisines: [String!]

    """
    Recipe description
    """
    description: String!

    """
    Recipe flags
    """
    flags: [RecipeFlag!]!

    """
    Recipe link
    """
    href: String!

    """
    Recipe ID
    """
    id: Int!

    """
    Recipe images by rendition name
    """
    images(renditions: [RenditionKey!]): [RecipeImage!]!

    """
    Recipe ingredients
    """
    ingredients: [RecipeIngredient!]!

    """
    Recipe kitchen appliances
    """
    kitchenAppliances: [RecipeKitchenAppliance!]!

    """
    Recipe magazine mentions
    """
    magazines: [RecipeMagazine!]!

    """
    Recipe seo meta
    """
    meta: RecipeMeta!

    """
    Recipe last modification date
    """
    modifiedAt: String!

    """
    Flag indicating whether recipe should be indexed by search engines or not
    """
    noIndex: Boolean!

    """
    Recipe nutri-score
    """
    nutriScore: RecipeNutriScore

    """
    Recipe nutrition information
    """
    nutritions: RecipeNutritionInfo

    """
    Recipe oven time
    """
    ovenTime: Int

    """
    Recipe preparation details
    """
    preparation: RecipePreparation!

    """
    Recipe publication date
    """
    publishedAt: String!

    """
    Recipe rating
    """
    rating: RecipeRating!

    """
    SEO canonical recipe url
    """
    seoCanonical: String

    """
    Recipe servings
    """
    servings: RecipeDetailsServing!

    """
    Recipe slugified title
    """
    slugifiedTitle: String!

    """
    Recipe source
    """
    source: RecipeSource

    """
    Recipe spiciness level
    """
    spiciness: Int!

    """
    Recipe supplier company info
    """
    supplier: RecipeSupplier

    """
    Recipe tags
    """
    tags: [RecipeTag!]!

    """
    Recipe cooking tips
    """
    tips: [RecipeTip!]!

    """
    Recipe title
    """
    title: String!

    """
    Recipe videos
    """
    videos: RecipeVideos!

    """
    Recipe wait time
    """
    waitTime: Int
}

"""
Alternative Sections, alternative products are divided into sections, for example Biological, Product with less waste, Best priced, etc..
"""
type RecipeAlternativeSection {
    """
    Alternative description
    """
    description: String!

    """
    Alternative product suggestion
    """
    productSuggestions: [RecipeShoppableProductSuggestion]!

    """
    Alternative title
    """
    title: String!
}

"""
Recipe source
"""
type RecipeAuthor {
    """
    Recipe brand
    """
    brand: RecipeBrand

    """
    Recipe origin
    """
    origin: RecipeOrigin
}

"""
Recipe brand
"""
type RecipeBrand {
    """
    Brand logo image
    """
    logo: ImageSet

    """
    Brand name
    """
    name: String

    """
    Recipe supplier
    """
    supplier: RecipeBrandSupplier
}

"""
Recipe brand supplier
"""
type RecipeBrandSupplier {
    """
    Supplier name
    """
    name: String
}

"""
Mutation result
"""
type RecipeCollectionAssignRecipeToCategoriesResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of assigning recipe to the given categories
    """
    result: RecipeCollectionCategoryRecipe!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Recipe collection - all member recipes
Collection is divided into categories
Each category contains recipes (it's only Allerhande for now and will be extended with Cookbook)
"""
type RecipeCollectionCategory {
    """
    Category id
    """
    id: Int!

    """
    Defines whether this is the default category that can't be renamed or deleted
    """
    isDefault: Boolean!

    """
    List of recipe ids in the category
    """
    list: [RecipeCollectionCategoryRecipe!]!

    """
    Category name given by user
    """
    name: String!

    """
    List of recipe entities
    """
    recipes(size: Int): [RecipeSummary!]!
}

"""
Contains informaton about collected recipe
(Will be extended with type property in future)
"""
type RecipeCollectionCategoryRecipe {
    """
    Collected recipe id
    """
    collectedId: Int!
        @deprecated(
            reason: "@sunset_date(2022-08-01) - checked 2023-05-08 - used in appie-ios@8.6.2 appie-be-ios@8.6.2 - This field will not be available soon \n. . "
        )

    """
    Recipe id
    """
    id: Int!

    """
    Recipe type (e.g.: Allerhande)
    """
    type: CollectionCategoryRecipeType!
}

"""
Mutation result
"""
type RecipeCollectionCreateCategoryResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of create recipe collection category
    """
    result: RecipeCollectionCategory!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Mutation result
"""
type RecipeCollectionDeleteCategoryResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of remove recipe from category
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Mutation result
"""
type RecipeCollectionRemoveRecipeFromCategoriesResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of remove recipe from all categories
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Mutation result
"""
type RecipeCollectionUpdateCategoryResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of update recipe collection category
    """
    result: RecipeCollectionCategory!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Mutation result
"""
type RecipeCollectionUpdateRecipeWithCategoriesResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of updated recipe with the given categories
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Recipe Serving Details
"""
type RecipeDetailsServing {
    """
    Is serving changeable
    """
    isChangeable: Boolean!

    """
    Max serving
    """
    max: Int!

    """
    Min serving
    """
    min: Int!

    """
    Recipe number of servings
    """
    number: Int!

    """
    Serving scale
    """
    scale: Int!

    """
    Recipe serving type
    """
    type: String!
}

"""
Recipe filter
"""
type RecipeFilter {
    """
    Group key where the filters belong to
    """
    group: String!

    """
    Filter keys of the group
    """
    values: [String!]!
}

"""
Recipe flags indicating presence of certain tags, internalTags or classifications
"""
enum RecipeFlag {
    """
    Gluten free flag
    """
    GLUTEN_FREE

    """
    Keto flag
    """
    KETO

    """
    Lactose free flag
    """
    LACTOSE_FREE

    """
    Low calories flag
    """
    LOW_CALORIES

    """
    Low carbs flag
    """
    LOW_CARBS

    """
    Protein rich flag
    """
    PROTEIN_RICH
}

"""
Highlighted recipe themes created in Hippo CMS by content team
"""
type RecipeHighlightedThemes {
    """
    Recipe Themes
    """
    themes: [RecipeTheme!]!

    """
    Title
    """
    title: String!
}

"""
Extended model for recipe image
"""
type RecipeImage {
    """
    Height of the image in pixels
    """
    height: Int

    """
    Image rendition. Can be numeric (d200x200) for Allerhande recipes and t-shirt-esque (s, m, l, xl)
    """
    rendition: RenditionKey!

    """
    Url of the image
    """
    url: String

    """
    Width of the image in pixels
    """
    width: Int
}

"""
Recipe Image Renditions
"""
type RecipeImageRenditions {
    """
    Size 220x162
    """
    d220x162: ImageSet

    """
    Size 302x220
    """
    d302x220: ImageSet

    """
    Size 440x324
    """
    d440x324: ImageSet

    """
    Size 445x297
    """
    d445x297: ImageSet

    """
    Size 612x450
    """
    d612x450: ImageSet

    """
    Size 680x320
    """
    d680x320: ImageSet

    """
    Size 890x594
    """
    d890x594: ImageSet

    """
    Size 1024x748
    """
    d1024x748: ImageSet

    """
    Size 1224x900
    """
    d1224x900: ImageSet

    """
    Size 1600x560
    """
    d1600x560: ImageSet

    """
    Size 1920x1080
    """
    d1920x1080: ImageSet

    """
    Size 2048x1496
    """
    d2048x1496: ImageSet
}

"""
Recipe ingredient type
"""
type RecipeIngredient {
    """
    Ingredient Id
    """
    id: Int!

    """
    Ingredient name
    """
    name: SingularPluralName!

    """
    Ingredient quantity
    """
    quantity: Float

    """
    Ingredient quantity unit name
    """
    quantityUnit: SingularPluralName

    """
    Ingredient quantity divided by number of servings. See normalizeRecipeIngredient
    """
    servingsScale: Float!

    """
    Ingredient complete text which includes name, quantity and quantity unit for example:
    15 g verse peterselie
    """
    text: String
}

"""
Recipe Kitchen Appliance
"""
type RecipeKitchenAppliance {
    """
    Kitchen appliance name
    """
    name: String!

    """
    Kitchen appliance quantity
    """
    quantity: Int

    """
    Kitchen appliance scalability flag
    """
    scalable: Boolean

    """
    Complete text containing quantity and name
    """
    text: String!
}

"""
Recipe magazine issue
"""
type RecipeMagazine {
    """
    Recipe magazine issue publication date in format YYYY-MM-DD
    """
    date: String!

    """
    Recipe magazine slugified name
    """
    issueSlug: String!

    """
    Recipe magazine issue number
    """
    number: String!

    """
    Recipe magazine title
    """
    title: String!

    """
    Recipe magazine type
    """
    type: String!
}

"""
Recipe seo meta
"""
type RecipeMeta {
    """
    Recipe seo description
    """
    description: String!

    """
    Recipe seo title
    """
    title: String!
}

"""
Recipe nutri-score
"""
enum RecipeNutriScore {
    A
    B
    C
    D
    E
}

"""
Nutrition data
"""
type RecipeNutrition {
    """
    Name to display
    """
    name: String!

    """
    What is a measure unit
    """
    unit: String!

    """
    How much with the specified measure unit
    """
    value: Float!
}

"""
Nutrition data set
"""
type RecipeNutritionInfo {
    """
    How much carbohydrates
    """
    carbohydrates: RecipeNutrition

    """
    How many calories
    """
    energy: RecipeNutrition

    """
    How much fat
    """
    fat: RecipeNutrition

    """
    How much fibers
    """
    fibers: RecipeNutrition

    """
    How much protein
    """
    protein: RecipeNutrition

    """
    How much saturated fat
    """
    saturatedFat: RecipeNutrition

    """
    How much sodium
    """
    sodium: RecipeNutrition

    """
    How much sugar
    """
    sugar: RecipeNutrition
}

"""
Recipe origin
"""
type RecipeOrigin {
    """
    Recipe host name
    """
    hostName: String

    """
    Origin type
    """
    type: RecipeOriginType

    """
    Recipe url
    """
    url: String
}

"""
Recipe origin type enum
"""
enum RecipeOriginType {
    """
    Allerhande recipe
    """
    ALLERHANDE

    """
    FFN recipe
    """
    FFN

    """
    Member created recipe
    """
    MEMBER_CREATED

    """
    Member scraped recipe
    """
    MEMBER_SCRAPED

    """
    Orphaned recipe
    """
    ORPHANED

    """
    Sponsored recipe
    """
    SPONSORED
}

"""
Recipe preparation details
"""
type RecipePreparation {
    """
    Recipe preparation steps
    """
    steps: [String!]!

    """
    Recipe preparation summary
    """
    summary: [String!]!
}

"""
Recipe preparation section
"""
type RecipePreparationSection {
    """
    Cooking time
    """
    cookingTime: Int

    """
    Preparation steps
    """
    preparationSteps: [RecipePreparationStep!]!

    """
    Recipe images by rendition name
    """
    recipeImages(renditions: [RenditionKey!]): [RecipeImage!]!

    """
    Recipe Title
    """
    recipeTitle: String

    """
    Serving size
    """
    servingSize: Int!
}

"""
Preparation step information
"""
type RecipePreparationStep {
    """
    Recipe images by rendition name
    """
    images(renditions: [RenditionKey!]): [RecipeImage!]!

    """
    Preparation step ingredients
    """
    ingredients: [RecipeIngredient!]!

    """
    Recipe kitchen appliances
    """
    kitchenAppliances: [RecipeKitchenAppliance!]

    """
    Kitchen timer for the step
    """
    kitchenTimer: Int

    """
    Preparation step text
    """
    text: String

    """
    Recipe cooking tips
    """
    tips: [RecipeTip!]!

    """
    Recipe preparation step videos
    """
    videos: [RecipeVideo!]
}

"""
recipeProductSuggestionsV2 input type
"""
input RecipeProductSuggestionV2Input {
    """
    Recipe number of servings
    """
    numberOfServings: Int

    """
    Product Id Override
    """
    productIdOverride: [Int!]

    """
    Recipe Id
    """
    recipeId: Int!
}

"""
Recipe Ingredient
"""
type RecipeProductSuggestionsIngredient {
    """
    Ingredient additional information
    """
    additionalInfo: String

    """
    Complete text for ingredient that includes quantity, quantity unit and name
    """
    completeText: String

    """
    Ingredient name as it mentioned in the recipe ingredients section
    """
    description: SingularPluralName

    """
    Id
    """
    id: Int

    """
    Index used by FE to identify the position of the element withing the array of objects.
    """
    index: Int

    """
    Ingredient name
    """
    name: String

    """
    Ingredient quantity
    """
    quantity: Int
        @deprecated(
            reason: "@sunset_date(2023-10-18) - checked 2023-04-18 - the quantity should support decimals - use quantityFloat instead \n. . "
        )

    """
    Ingredient quantity as a Float
    """
    quantityFloat: Float

    """
    Ingredient quantity unit
    """
    quantityUnit: String
}

"""
Defines recipe rating
"""
type RecipeRating {
    """
    Average rating, null when not rated
    """
    average: Float

    """
    How many users rated
    """
    count: Int!
}

type RecipeRecommendation {
    """
    Recipe id
    """
    id: Int!

    """
    Recipe summary information
    """
    recipe: RecipeSummary!
}

"""
All necessary data to render recipe recommendation lane on koken tab.
Contains recommended recipes and member preferences
"""
type RecipeRecommendationLane {
    """
    Member recipe preferences
    """
    memberPreferencePreviewOptions: [MemberRecipePreferencePreviewOption!]!

    """
    Recommended recipes
    """
    recipeRecommendations: [RecipeRecommendation!]!

    """
    Selected nutrition and allergy preferences
    """
    selectedNutritionAndAllergyPreferences: [MemberRecipePreferenceSelectedOption!]!

    """
    Default servings number
    """
    servingSize: Int
}

"""
Query options for search request
"""
input RecipeSearchParams {
    """
    Favourite recipe ids. Used to identify "favorieten" filter
    """
    favoriteRecipeIds: [Int!]

    """
    Filters
    """
    filters: [RecipeSearchQueryFilter!]

    """
    Flag to include or exclude aggregations
    """
    includeAggregations: Boolean

    """
    The recipes that contain these ingredients will appear first in the search results when "sortBy=MOST_RELEVANT"
    """
    ingredients: [String!]

    """
    Recipes that should always come first on the first page
    """
    priorityRecipeIds: [Int!]

    """
    Use it if you want to search through only specific recipe ids
    """
    recipeIds: [Int!]

    """
    Query text, used for searching by title and ingredients
    """
    searchText: String

    """
    Pagination: size of a page
    """
    size: PageSize = 35

    """
    How to sort
    """
    sortBy: RecipeSearchSortOption

    """
    Pagination: how many recipes to skip
    """
    start: Int = 0
}

"""
Filter options for recipe search query
"""
input RecipeSearchQueryFilter {
    """
    Group key where the filters belong to
    """
    group: String!

    """
    Filter keys of the group
    """
    values: [String!]!
}

"""
Recipe search data
"""
type RecipeSearchResult {
    """
    If searchText has a typo, it will contain a proper one
    """
    correctedSearchTerm: String

    """
    Filters that can be applied
    """
    filters: [RecipeSearchResultFilterGroup!]

    """
    Pagination info
    """
    page: PageInfo!

    """
    Recipes
    """
    result: [RecipeSummary!]!
}

"""
Recipe search data filter
"""
type RecipeSearchResultFilter {
    """
    How many recipes there are for that filter
    """
    count: Int!

    """
    Filter group name
    """
    group: String!

    """
    Filter text
    """
    label: String

    """
    Filter name
    """
    name: String!

    """
    Is it selected
    """
    selected: Boolean!
}

"""
Recipe search data filter group
"""
type RecipeSearchResultFilterGroup {
    """
    Filters of that group
    """
    filters: [RecipeSearchResultFilter!]!

    """
    Filter group text
    """
    label: String!

    """
    Filter group name
    """
    name: String!
}

"""
Sorting options for recipe search query
"""
enum RecipeSearchSortOption {
    """
    Sorted by relevancy
    """
    MOST_RELEVANT

    """
    Sorted by newest
    """
    NEWEST

    """
    Sorted by most popular
    """
    POPULAR

    """
    Sorted by most rated
    """
    RATINGS

    """
    Sorted by preparation time
    """
    TOTAL_TIME

    """
    Sorted by trending
    """
    TRENDING
}

"""
Set member's rating for recipe mutation result type
"""
type RecipeSetMemberRatingResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of the rating which user gave
    """
    result: UpdatedRecipeRating!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Recipe ingredient and quantity unit comes in singular and plural names
"""
input RecipeShoppableIngredientName {
    """
    Plural naming text
    """
    plural: String

    """
    Singular naming text
    """
    singular: String!
}

"""
Recipe product suggestion
"""
type RecipeShoppableProductSuggestion {
    """
    selected product id
    """
    id: Int!

    """
    whole product object
    """
    product: Product

    """
    the instance that did the product proposement
    """
    proposer: RecipeShoppableProductSuggestionProposer!

    """
    selected product quanity
    """
    quantity: Float!
}

"""
Product suggestion proposer
"""
enum RecipeShoppableProductSuggestionProposer {
    """
    Albert Heijn
    """
    A

    """
    North Fork
    """
    N

    """
    Product Search
    """
    PRODUCT_SEARCH

    """
    Semantic Model
    """
    SEMANTIC_MODEL

    """
    Sponsored Product
    """
    SPONSORED_PRODUCT
}

"""
Input type for the mutations that saves user selections of the ingredients to products mappings
"""
input RecipeShoppableSaveSelectionParams {
    """
    Recipe id
    """
    recipeId: Int!

    """
    product selections the users made
    """
    selections: [RecipeShoppableSelection!]!

    """
    Number of persons
    """
    servingNumber: Int!
}

"""
Result type for the mutations that saves user selections of the ingredients to products mappings
"""
type RecipeShoppableSaveSelectionResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of save member-product-selections, should always return true
    """
    result: Boolean!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Single selection of the ingredient to product mappings
"""
input RecipeShoppableSelection {
    """
    action the user took
    """
    action: RecipeShoppableSelectionAction!

    """
    the ingredient for which a product got selected
    """
    ingredient: RecipeShoppableSelectionIngredient!

    """
    the selected product
    """
    product: RecipeShoppableSelectionProduct!
}

"""
Selection type enum. Specifies whether ingredient to product mapping was added, changed or removed
"""
enum RecipeShoppableSelectionAction {
    """
    ADD
    """
    ADD

    """
    CHANGE
    """
    CHANGE

    """
    REMOVE
    """
    REMOVE
}

"""
Ingredient type for mappings selection
"""
input RecipeShoppableSelectionIngredient {
    """
    ingredient id
    """
    id: Int

    """
    ingredient name
    """
    name: RecipeShoppableIngredientName!

    """
    ingredient quantity
    """
    quantity: Float

    """
    quantity unit
    """
    quantityUnit: RecipeShoppableIngredientName
}

"""
Selection product type for mappings
"""
input RecipeShoppableSelectionProduct {
    """
    selected product id
    """
    id: Int!

    """
    the instance that did the product proposal
    """
    proposer: RecipeShoppableSelectionProductProposer!

    """
    selected product quantity
    """
    quantity: Float
}

"""
Mapping proposer. Specifies the provider of ingredient to product mapping
"""
enum RecipeShoppableSelectionProductProposer {
    """
    Albert Heijn
    """
    A

    """
    North Fork
    """
    N

    """
    Product Search
    """
    PRODUCT_SEARCH

    """
    Semantic Model
    """
    SEMANTIC_MODEL

    """
    Sponsored Product
    """
    SPONSORED_PRODUCT
}

"""
Recipe shopped recipe
"""
type RecipeShoppedRecipe {
    """
    Last shopped at
    """
    lastShoppedAt: DateTime!

    """
    recipe Summary
    """
    recipe: RecipeSummary!
}

"""
Recipe source
"""
type RecipeSource {
    """
    Recipe host name
    """
    hostName: String

    """
    Recipe type
    """
    type: RecipeSourceType

    """
    Recipe url
    """
    url: String
}

"""
Recipe source input
"""
input RecipeSourceInput {
    """
    Source host name (for scrapped recipes)
    """
    hostName: String

    """
    Source url (for scrapped recipes)
    """
    url: String
}

"""
Recipe source type enum
"""
enum RecipeSourceType {
    """
    Allerhande recipe
    """
    ALLERHANDE_RECIPE

    """
    Member created recipe
    """
    MEMBER_RECIPE
}

"""
Defines when recipe story will be visible/active
"""
type RecipeStoryActivePeriod {
    """
    First day when the story is active
    """
    from: String!

    """
    Last day when the story is active
    """
    to: String!
}

"""
Recipe story a/b testing campaign
"""
type RecipeStoryCampaign {
    """
    A/B testing campaign id
    """
    campaignId: Int!

    """
    Indicates if story should be displayed by default regardless of A/B testing
    """
    controlVariant: Boolean

    """
    A/B testing variant id
    """
    variantId: Int!
}

"""
Recipe Story
"""
type RecipeStoryCollection {
    """
    Defines story's start and end dates
    """
    active: RecipeStoryActivePeriod!

    """
    contains A/B testing campaign data
    """
    campaign: RecipeStoryCampaign

    """
    Optional story cover image
    """
    coverImage: ImageSet

    """
    story Id
    """
    id: Int!

    """
    stories
    """
    stories: [RecipeStoryType!]!

    """
    story theme (e.g.: CHRISTMAS)
    """
    theme: RecipeStoryCollectionTheme!

    """
    story title
    """
    title: String!

    """
    story type: defines what kind of story this is
    """
    type: RecipeStoryCollectionType!
}

"""
Recipe story theme enum
"""
enum RecipeStoryCollectionTheme {
    """
    Christmas theme
    """
    CHRISTMAS

    """
    Default theme (i.e.: no theme)
    """
    DEFAULT

    """
    Prijsfavorieten theme
    """
    PRIJSFAVORIETEN
}

"""
Enum thats contains all type of recipeStories
"""
enum RecipeStoryCollectionType {
    """
    Bonus
    """
    BONUS

    """
    Product Bundle
    """
    PRODUCTS

    """
    Recipe
    """
    RECIPE
}

"""
Recipe Story productBundle
"""
type RecipeStoryProductBundle {
    """
    id
    """
    id: Int!

    """
    products inside the product bundle
    """
    products: [RecipeStoryProductBundleItem!]!

    """
    sponsored
    """
    sponsored: Boolean!

    """
    title
    """
    title: String!
}

"""
Recipe Story productBundle Items
"""
type RecipeStoryProductBundleItem {
    """
    productId
    """
    id: Int!

    """
    optional
    """
    optional: Boolean!

    """
    whole product object
    """
    product: Product
}

"""
Recipe Story Recipe
"""
type RecipeStoryRecipe {
    """
    id
    """
    id: Int!

    """
    recipe Summary
    """
    recipe: RecipeSummary

    """
    recipe Id
    """
    recipeId: Int!

    """
    recipe sponsored
    """
    sponsored: Boolean!

    """
    recipe story video
    """
    video: RecipeVideo

    """
    recipe story video id
    """
    videoId: Int
}

"""
Union for two types of recipe stories: product bundle story and recipe story
"""
union RecipeStoryType = RecipeStoryProductBundle | RecipeStoryRecipe

"""
We have two types of entities in recipe domain: Recipe and RecipeSummary
RecipeSummary has less data compare to Recipe and they have different data sources:
RecipeSummary comes from Elastic
Recipe comes from PostgreSQL DB
"""
type RecipeSummary {
    """
    This title can be used in Allerhande magaznie issue.
    Placing this in page metadata helps to find this recipe by this title as well.
    """
    alternateTitle: String

    """
    Recipe author
    """
    author: RecipeAuthor

    """
    Defines meal type (e.g.: main dish, appetizer, etc.)
    """
    courses: [String]!

    """
    Defines diet (e.g.: vegan, vegeterian, without meat, without gluten, etc.)
    """
    diet: [String]!

    """
    Recipe flags
    """
    flags: [RecipeFlag!]!

    """
    Recipe ID
    """
    id: Int!

    """
    Recipe image renditions
    """
    imageRenditions: RecipeImageRenditions
        @deprecated(
            reason: "@sunset_date(2022-08-01) - checked 2023-05-08 - used in appie-ios@8.15.1 appie-be-ios@8.15.1 appie-android@8.20.3 - Please use images instead. It's a unified images representation format for all recipe related entities: recipe, recipe summary, member recipe \n. images. "
        )

    """
    Recipe images by rendition name
    """
    images(renditions: [RenditionKey!]): [RecipeImage!]!

    """
    Date string when the recipe was modified
    """
    modifiedAt: String!

    """
    Recipe nutri-score
    """
    nutriScore: RecipeNutriScore

    """
    Recipe nutrition information
    """
    nutrition: RecipeNutritionInfo

    """
    Date string when the rescipe was published
    """
    publishedAt: String!

    """
    Recipe rating
    """
    rating: RecipeRating!

    """
    Recipe serving information
    """
    serving: RecipeSummaryServing!

    """
    This title is used as URL suffix making better URLs -> increasing SEO value
    """
    slug: String!

    """
    Recipe source
    """
    source: RecipeSource

    """
    Recipe images
    """
    time: RecipeTime!

    """
    Recipe recipe
    """
    title: String!
}

"""
Recipe serving information
"""
type RecipeSummaryServing {
    """
    Number of servings the recipe is designed for
    """
    number: Int!

    """
    Serving type, per person, or portion (one person can eat many)
    """
    type: String!
}

"""
Company that provided the recipe
"""
type RecipeSupplier {
    """
    Company logo
    """
    logo(renditions: [RenditionKey!]): [RecipeImage!]!

    """
    Company name
    """
    name: String!
}

"""
Recipe tag
"""
type RecipeTag {
    """
    Recipe tag key
    """
    key: String!

    """
    Recipe tag value
    """
    value: String!
}

"""
Recipe theme represents a document with type recipeGroup in hippo (also called themes by the content team)
"""
type RecipeTheme {
    """
    Header recipe
    """
    headerRecipe: RecipeSummary

    """
    Hader recipe id
    """
    headerRecipeId: Int

    """
    Highlighted recipe
    """
    highlightedRecipe: RecipeSummary

    """
    Highlighted recipe id
    """
    highlightedRecipeId: Int

    """
    Recipe theme search params
    """
    themeSearchParams: RecipeThemeSearchParams!

    """
    Title
    """
    title: String!
}

"""
Query to search the recipes related to this theme
"""
type RecipeThemeSearchParams {
    """
    Filters
    """
    filters: [RecipeFilter!]

    """
    Recipes that should always come first on the first page
    """
    priorityRecipeIds: [Int!]

    """
    Query text, used for searching by title and ingredients
    """
    searchText: String

    """
    How to sort
    """
    sortBy: RecipeSearchSortOption!
}

"""
Defines time to spend for each stage of cooking
"""
type RecipeTime {
    """
    Preparation time in minutes
    """
    cook: Int!

    """
    Baking time in minutes
    """
    oven: Int

    """
    Waiting time in minutes (usually in the freezer)
    """
    wait: Int
}

"""
Recipe tip
"""
type RecipeTip {
    """
    Recipe tip type
    """
    type: String!

    """
    Recipe tip value
    """
    value: String!
}

"""
Map Product to Suggestion result
"""
type RecipeToProductSuggestionsResult {
    """
    AlternativeSections, alternative products are divided into sections, for example Biological, Product with less waste, Best priced, etc..
    """
    alternativeSections: [RecipeAlternativeSection!]!

    """
    Index used by FE to identify the position of the element withing the array of objects.
    """
    index: Int

    """
    Ingredient
    """
    ingredient: RecipeProductSuggestionsIngredient!

    """
    is product optional/reusablr
    """
    optional: Boolean!

    """
    Product selected as suggestion
    """
    productSuggestion: RecipeShoppableProductSuggestion
}

"""
Top recipes list created in Hippo CMS by content team
"""
type RecipeTopRecipes {
    """
    Top category
    """
    category: String!

    """
    Top Id
    """
    id: Int!

    """
    Top images. Images of the first recipe in the top would be provided as such as per requirements
    """
    images(renditions: [RenditionKey!]): [RecipeImage]!

    """
    Top overview title
    """
    overviewTitle: String!

    """
    Recipe summaries
    """
    recipeSummary: [RecipeSummary]!

    """
    Text color
    """
    textColor: String!

    """
    Top title
    """
    title: String!

    """
    Use gradient flag
    """
    useGradient: Boolean!
}

"""
Recipe Video (from Blue Billy Wig)
"""
type RecipeVideo {
    """
    Recipe video category
    """
    category: String!

    """
    Recipe video description
    """
    description: String!

    """
    Recipe video description in HTML format
    """
    descriptionHtml: String!

    """
    Recipe video duration
    """
    duration: String!

    """
    Recipe video link
    """
    href: String

    """
    Recipe video id
    """
    id: Int!

    """
    Recipe video images
    """
    images: RecipeVideoImages!

    """
    Recipe video publication date
    """
    publication: String!

    """
    This title is used as URL suffix making better URLs -> increasing SEO value
    """
    slug: String!

    """
    Recipe video streams
    """
    streams: RecipeVideoStreams!

    """
    Recipe video title
    """
    title: String!

    """
    Recipe video views count
    """
    views: Int!
}

type RecipeVideoImages {
    """
    SD quality recipe video image
    """
    sd: String!

    """
    Thumbnail (smaller) recipe video image
    """
    thumbnail: String!
}

input RecipeVideoSearchParams {
    """
    Filters
    """
    filters: [RecipeSearchQueryFilter!]

    """
    Query text, used for searching by title
    """
    searchText: String

    """
    Pagination: size of a page
    """
    size: PageSize = 35

    """
    How to sort
    """
    sortBy: RecipeVideoSearchSortOption

    """
    Pagination: how many videos to skip
    """
    start: Int = 0
}

type RecipeVideoSearchResult {
    """
    If searchText has a typo, it will contain a proper one
    """
    correctedSearchTerm: String

    """
    Filters that can be applied
    """
    filters: [RecipeSearchResultFilterGroup!]

    """
    Pagination info
    """
    page: PageInfo!

    """
    Videos
    """
    result: [RecipeVideo!]!
}

"""
Sorting options for recipe search query
"""
enum RecipeVideoSearchSortOption {
    """
    Sorted by alphabet
    """
    ALPHABETIC

    """
    Sorted by duration
    """
    DURATION

    """
    Sorted by newest
    """
    LATEST

    """
    Sorted by relevancy
    """
    MOST_RELEVANT

    """
    Sorted by views count
    """
    MOST_VIEWED
}

type RecipeVideoStreams {
    """
    HD quality recipe video stream
    """
    hd: String

    """
    SD quality recipe video stream
    """
    sd: String
}

"""
Recipe preparation details
"""
type RecipeVideos {
    """
    Recipe preparation video
    """
    preparation: RecipeVideo

    """
    Recipe preparation tips videos
    """
    tips: [RecipeVideo!]!
}

"""
The URLs related to the Loyalty Management Netherlands b.v. (LMN) authentication flow.
"""
type RedirectToLmn {
    """
    The URL for the frontend client to exit on. This URL will be routed to by LMN after (un)successful
    login took place on the airmiles.nl website.
    """
    exitUrl: String!

    """
    The URL for the customer to login at LMN to link their Air Miles account to their AH account.
    """
    loginUrl: String!

    """
    The URL for the frontend client to direct customers to when they want to create an account at
    airmiles.nl
    """
    registerUrl: String!
}

"""
Render type
"""
enum RenderType {
    MARKETING_CAROUSEL
    SUPERSHOPS
    UNKNOWN
}

"""
Recipe image rendition keys enum. See graphQlKey = backendKey
"""
enum RenditionKey {
    """
    Graphql d220x162 key corresponds to backend '210x118_JPG' key
    """
    D210X118

    """
    Graphql d220x162 key corresponds to backend '220x162_JPG' key
    """
    D220X162

    """
    Graphql d256x256 key corresponds to backend '256x256_PNG' key
    """
    D256X256_PNG

    """
    Graphql d302x220 key corresponds to backend '302x220_JPG' key
    """
    D302X220

    """
    Graphql d420x236 key corresponds to backend '420x236_JPG' key
    """
    D420X236

    """
    Graphql d440x324 key corresponds to backend '440x324_JPG' key
    """
    D440X324

    """
    Graphql d445x297 key corresponds to backend '445x297_JPG' key
    """
    D445X297

    """
    Graphql d612x450 key corresponds to backend '612x450_JPG' key
    """
    D612X450

    """
    Graphql d680x320 key corresponds to backend '680x320_JPG' key
    """
    D680X320

    """
    Graphql d890x594 key corresponds to backend '890x594_JPG' key
    """
    D890X594

    """
    Graphql d1024x576 key corresponds to backend '1024x576_JPG' key
    """
    D1024X576

    """
    Graphql d1024x748 key corresponds to backend '1024x748_JPG' key
    """
    D1024X748

    """
    Graphql d1224x900 key corresponds to backend '1224x900_JPG' key
    """
    D1224X900

    """
    Graphql d1600x560 key corresponds to backend '1600x560_JPG' key
    """
    D1600X560

    """
    Graphql d1920x1080 key corresponds to backend '1920x1080_JPG' key
    """
    D1920X1080

    """
    Graphql d2048x1152 key corresponds to backend '2048x1152_JPG' key
    """
    D2048X1152

    """
    Graphql d2048x1496 key corresponds to backend '2048x1496_JPG' key
    """
    D2048X1496

    """
    Graphql l key corresponds to backend 'L' key
    """
    L

    """
    Graphql m key corresponds to backend 'M' key
    """
    M

    """
    Graphql s key corresponds to backend 'S' key
    """
    S

    """
    Graphql xl key corresponds to backend 'XL' key
    """
    XL

    """
    Graphql xs key corresponds to backend 'XS' key
    """
    XS

    """
    Graphql xxs key corresponds to backend 'XXS' key
    """
    XXS
}

type RuleValidated {
    """
    Code of the rule which was tested
    """
    code: String!

    """
    Result of the tested rule
    """
    isValid: Boolean!
}

"""
Save member recipe result
"""
type SaveMemberRecipeMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Saved recipe
    """
    result: MemberRecipe

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Calculated Saving for either Instore or WithSubscriptions
"""
type Savings {
    """
    Maximum amount of savings
    """
    max: Money!

    """
    Minimum amount of savings
    """
    min: Money!
}

"""
Recipe scraped from external source
"""
type ScrapedRecipe {
    """
    Recipe author
    """
    author: RecipeAuthor

    """
    Recipe courses
    """
    courses: [String]

    """
    Recipe description
    """
    description: String

    """
    Image url
    """
    imageUrl: String

    """
    Recipe preparation details
    """
    preparation: RecipePreparation

    """
    Recipe source
    """
    source: RecipeSource

    """
    Recipe title
    """
    title: String
}

"""
Search products for given brand input
"""
input SearchBrandInput {
    """
    The slugified name of the brand
    """
    brandSlug: String!

    """
    Base search input
    """
    searchInput: SearchInput

    """
    Selected sorting type
    """
    sortType: SearchProductsSortType
}

"""
Search products in category input
"""
input SearchCategoryInput {
    """
    Base search input
    """
    searchInput: SearchInput

    """
    Selected sorting type
    """
    sortType: SearchProductsSortType

    """
    Selected taxonomy ID
    """
    taxonomyId: Int!
}

"""
Available Facet Configuration
"""
type SearchFacetConfig {
    """
    Can be used as the facet ID
    """
    label: String!

    """
    Facet description
    """
    name: String!

    """
    Facet type
    """
    type: SearchFacetType!
}

"""
Facet input type allows filtering search results
"""
input SearchFacetInput {
    """
    Selected facet ID
    """
    label: String!

    """
    The selected facet range values to conform to
    """
    rangeValues: SearchRangeSelectedFacetInput

    """
    The selected facet values to conform to
    """
    values: SearchValuesSelectedFacetInput
}

"""
A facet option type
"""
type SearchFacetOption {
    """
    The number of possible matches with the option selected
    """
    matches: Int!

    """
    Facet option description
    """
    name: String

    """
    Whether the option is selected or not
    """
    selected: Boolean

    """
    Possible subotions for current option
    """
    suboptions: [SearchFacetOption!]

    """
    Can be used a the facet option ID
    """
    value: PrimitiveTypeScalar!
}

"""
Facet payload type
"""
type SearchFacetPayload {
    """
    Can be used as the facet ID
    """
    label: String!

    """
    Facet description
    """
    name: String

    """
    Facet options
    """
    options: [SearchFacetOption!]

    """
    Min/Max values for a range selected facet type
    """
    rangeSelectedFacetValues: SearchRangeSelectedFacetValues

    """
    Facet type
    """
    type: SearchFacetType!
}

"""
Possible facet types
"""
enum SearchFacetType {
    """
    Facet type that has conformance to value/values in a hierarchical order
    """
    HIERARCHY

    """
    Facet type that has conformance to multiple values
    """
    MULTIPLE

    """
    Facet type that has conformance to a range
    """
    RANGE

    """
    Facet type that has conformance to a single value
    """
    SINGLE
}

"""
Search facets payload contains all the available facets
"""
type SearchFacetsPayload {
    """
    Available facets/filters
    """
    facets: [SearchFacetPayload!]!

    """
    Available quick filters
    """
    quickFilters: [SearchQuickFilterPayload!]!
}

"""
Search base input type
"""
input SearchInput {
    """
    Selected facet/filter inputs the search will conform to
    """
    facets: [SearchFacetInput!]

    """
    Selected search intent
    """
    intent: SearchIntentInput

    """
    Pagination descriptor
    """
    page: PageInput
}

"""
Search intent input
"""
input SearchIntentInput {
    """
    Favorite store used for VISIT_STORE intent
    """
    favouriteStore: Int

    """
    Selected intent type
    """
    intent: SearchIntentType!

    """
    Order ID used for ONLINE_ORDER intent
    """
    orderId: Int
}

"""
Possible search products intent types
"""
enum SearchIntentType {
    """
    Intent type for product browsing
    """
    BROWSING

    """
    Intent type for ordering online
    """
    ONLINE_ORDER

    """
    Intent type for store order
    """
    VISIT_STORE
}

"""
Search payload type
"""
type SearchPayload {
    """
    Available facets/filters
    """
    facets: SearchFacetsPayload

    """
    Search products results
    """
    products: [Product!]!

    """
    Stores sponsoring related data (eg: 'auctionId')
    """
    sponsoring: SearchSponsoringPayload

    """
    Total number of products found (including all pages)
    """
    totalFound: Int!
}

"""
Search previously bought input
"""
input SearchPreviouslyBoughtInput {
    """
    Base search input
    """
    searchInput: SearchInput

    """
    Selected sorting type
    """
    sortType: SearchPreviouslyBoughtSortType
}

"""
Possible previously bought sorting types
"""
enum SearchPreviouslyBoughtSortType {
    """
    Sorting type based on product NUTRI-SCORE
    """
    NUTRI_SCORE_A_E

    """
    Sorting type based on PURCHASE_DATE
    """
    PURCHASE_DATE

    """
    Sorting type based on how FREQUENT a product is purchased
    """
    PURCHASE_FREQUENCY

    """
    Sorting type based on product TAXONOMY
    """
    PURCHASE_TAXONOMY
}

"""
Search products input
"""
input SearchProductsInput {
    """
    Search query as entered by the user
    """
    query: String!

    """
    Base search input
    """
    searchInput: SearchInput

    """
    Selected sorting type
    """
    sortType: SearchProductsSortType
}

"""
Possible sorting types for search
"""
enum SearchProductsSortType {
    """
    Sorting type based on product NUTRI-SCORE
    """
    NUTRI_SCORE_A_E

    """
    Sorting type based on product price, from HIGH to LOW
    """
    PRICE_HIGH_LOW

    """
    Sorting type based on product price, from LOW to HIGH
    """
    PRICE_LOW_HIGH

    """
    Sorting type based on product RELEVANCE
    """
    RELEVANCE
}

"""
Quick filter payload type
"""
type SearchQuickFilterPayload {
    """
    A string that can be used as the quick filter ID (which is the facet label)
    """
    facetLabel: String!

    """
    A primitive type scalar that can be used as the quick filter option ID (which is the facet option value)
    """
    facetOptionValue: PrimitiveTypeScalar!
}

"""
The input min and/or max values for a RANGE selected facet
"""
input SearchRangeSelectedFacetInput {
    """
    The max value of the selected range facet type
    """
    max: PrimitiveTypeScalar

    """
    The min value of the selected range facet type
    """
    min: PrimitiveTypeScalar
}

"""
The min and/or max values for a range selected facet type
"""
type SearchRangeSelectedFacetValues {
    """
    Selected RANGE facet max value
    """
    max: PrimitiveTypeScalar

    """
    Selected RANGE facet min value
    """
    min: PrimitiveTypeScalar
}

"""
SearchSponsoringPayload stores sponsoring related data (eg: 'auctionId')
"""
type SearchSponsoringPayload {
    """
    The auction ID
    """
    auctionId: String
}

"""
A suggested section of search results with suggested search results.
"""
type SearchSuggestion {
    """
    The link to the result page.
    """
    href: String!

    """
    Which icon is needed for the search suggestion, this is a hardcoded value.
    """
    icon: String

    """
    Label of the search suggestion.
    """
    label: String!

    """
    Multiple search suggestions, eg. the query "melk" can have a suggestion of "kokosmelk".
    """
    suggestions: [SearchSuggestion!]

    """
    The type of search suggestion.
    """
    type: SearchSuggestionType!

    """
    The value of the search suggestion.
    """
    value: String!
}

"""
Suggestion types for search.
"""
enum SearchSuggestionType {
    """
    Default suggestion type.
    """
    DEFAULT

    """
    Suggestion which functions as a link to view more results.
    """
    MORE_LINK

    """
    Suggestion for when there are no results found.
    """
    NO_RESULT

    """
    The section of the suggestions, eg. products, recipes or customer care.
    """
    SECTION
}

"""
A representation of a product taxonomy.
Primarily used for displaying sub-taxonomy buttons in taxonomy browsing
and in search results.
"""
type SearchTaxonomy {
    """
    child ids of the current taxonomy
    """
    children: [Int!]

    """
    id of the taxonomy
    """
    id: Int!

    """
    Images of a taxonomy
    """
    images(
        """
        You can specify the Renditions you want to query
        """
        renditions: [TaxonomyImageRenditions!]
    ): [ImageSet!]!

    """
    name of the taxonomy
    """
    name: String!

    """
    parent ids of the current taxonomy
    """
    parents: [Int!]

    """
    IDs of products in the given taxonomy
    """
    productIds: [Int!]

    """
    slugified version of the taxonomy name
    """
    slug: String!

    """
    How many products are there in total in the given taxonomy
    """
    totalProductCount: Int!
}

"""
The input values for a selected facet (when the facet type is not RANGE)
"""
input SearchValuesSelectedFacetInput {
    """
    Value/values for the selected facet
    """
    values: [PrimitiveTypeScalar!]!
}

"""
The price of a slot
"""
type ServiceCharge {
    """
    Regular price of the service charge without discounts
    """
    defaultPrice: Money!

    """
    Level of discounts for the slot
    """
    discountLevel: DiscountLevel!

    """
    Actual price of the service charge with discounts applied
    """
    price: Money!
}

"""
Optional order that belongs to the service memo
"""
type ServiceMemoOrder {
    """
    Date of delivery
    """
    deliveryDate: String

    """
    End time of delivery
    """
    deliveryEndTime: String

    """
    Start time of delivery
    """
    deliveryStartTime: String

    """
    Order id
    """
    id: Int!

    """
    If the order was a subscriptionOrder
    """
    subscriptionOrder: Boolean!
}

"""
Service  memo refund method
"""
enum ServiceMemoRefundMethod {
    """
    BANK
    """
    BANK

    """
    DELIVERER
    """
    DELIVERER

    """
    INVOICE
    """
    INVOICE

    """
    NO_REFUND
    """
    NO_REFUND
}

"""
Service memo settlement
"""
type ServiceMemoSettlement {
    """
    Total amount of this specific service memo
    """
    amount: ServiceMemoSettlementAmount!

    """
    If the service memo can be cancelled by the user
    """
    cancellable: Boolean!

    """
    Comment that was entered by used on creation of service memo
    """
    comment: String

    """
    Date of creation
    """
    createdAt: String!

    """
    The iban address
    """
    iban: String

    """
    Service memo id
    """
    id: Int!

    """
    List of image ids submitted by the user
    """
    imageIds: [Int!]!

    """
    Images uploaded by the user which belongs to a service memo
    """
    images: [ServiceMemoSettlementImage!]

    """
    memberId
    """
    memberId: Int

    """
    Optional order linked to the service memo
    """
    order: ServiceMemoOrder

    """
    Order id of the order that processed this service memo
    """
    orderIdProcessed: Int

    """
    Optional product linked to the service memo
    """
    product: Product

    """
    Quantity of products claimed
    """
    quantity: Int

    """
    The refund method for this service memo, it describes if it will be settled by invoice, deliverer or bank
    """
    refundMethod: ServiceMemoRefundMethod

    """
    Case number in salesforce
    """
    salesforceCaseNumber: String

    """
    ShoppingCartId
    """
    shoppingCartId: Int

    """
    The source of the service memo, created by a user or by customer support
    """
    source: ServiceMemoSettlementSource

    """
    Determines if the service memo has been settled or not
    """
    status: ServiceMemoSettlementStatus!

    """
    Service memo type
    """
    type: ServiceMemoSettlementType!
}

"""
The quantity of claimed product
"""
type ServiceMemoSettlementAmount {
    """
    Amount for service memo can be positive or negative
    """
    amount: Float!

    """
    The used currency (EUR)
    """
    currency: String
}

"""
Service memo settlement image
"""
type ServiceMemoSettlementImage {
    """
    ID of the image
    """
    imageId: Int

    """
    Generated presigned URL (valid for 15 seconds)
    """
    url: String
}

"""
The settlement source
"""
enum ServiceMemoSettlementSource {
    """
    Created by the customer
    """
    CUSTOMER

    """
    Created by customer support
    """
    CUSTOMER_SUPPORT
}

"""
Status of settlement
"""
enum ServiceMemoSettlementStatus {
    """
    CANCELLED
    """
    CANCELLED

    """
    IN PROGRESS
    """
    IN_PROGRESS

    """
    NEW
    """
    NEW

    """
    PROCESSED
    """
    PROCESSED
}

"""
Settlement Summary contains a service memo and a message
"""
type ServiceMemoSettlementSummary {
    """
    Message belonging to the service memo it contains information about service memo
    """
    message: String!

    """
    Service memo data for settlement
    """
    serviceMemo: ServiceMemoSettlement

    """
    Message belonging to the service memo it contains information about service memo
    """
    settlementMessage: String!
}

"""
The conclusion of all settlements
"""
type ServiceMemoSettlementSummaryConclusion {
    """
    Contains a list of strings that gives info about all settlements
    """
    settlements: [String!]!

    """
    Accumulated amount of all service memos
    """
    totalAmount: ServiceMemoSettlementAmount!
}

"""
Processed settlement sumarry with settlement date
"""
type ServiceMemoSettlementSummaryProcessed {
    """
    Settlement date
    """
    date: String!

    """
    Summary of the settlement
    """
    summary: ServiceMemoSettlements!
}

"""
The label and value for a service memo type
"""
type ServiceMemoSettlementType {
    """
    Human readable label for service memo type
    """
    label: String

    """
    Enum value for service memo type
    """
    value: String
}

"""
List of settlements containing service memo's and a message + a conclusion for all settlements
"""
type ServiceMemoSettlements {
    """
    Conclusion of all the settlements
    """
    conclusion: ServiceMemoSettlementSummaryConclusion!

    """
    List of all service memos including a message
    """
    settlements: [ServiceMemoSettlementSummary!]!
}

"""
Settlement
"""
type Settlement {
    """
    Total amount of this specific settlement
    """
    amount: Money!

    """
    If the settlement can be cancelled by the user
    """
    cancellable: Boolean!

    """
    Comment that was entered by used on creation of settlement
    """
    comment: String

    """
    Label for Deposit type
    """
    depositLabel: String

    """
    Settlement id
    """
    id: Int!

    """
    List of image ids submitted by the user
    """
    imageIds: [Int!]!

    """
    Images uploaded by the user which belongs to a settlement
    """
    images: [SettlementImage!]

    """
    Optional order linked to the settlement
    """
    order: Order

    """
    Optional product linked to the settlement
    """
    product: Product

    """
    Quantity of products claimed
    """
    quantity: Int

    """
    The refund method for this settlement, it describes if it will be settled by invoice, deliverer or bank
    """
    refundMethod: SettlementRefundMethod

    """
    Fraction for compensation e.g. 0.25, 0.50, 0.75 or 1
    """
    settlementFraction: Float

    """
    Settlement type
    """
    type: String!
}

"""
CostOverview Settlement item
"""
type SettlementAfterDelivery {
    """
    Amount of times applied
    """
    amount: Int!

    """
    price of settlement after delivery
    """
    price: Money!

    """
    title
    """
    title: String!

    """
    Type of the settlement
    """
    type: SettlementAfterDeliveryType
        @deprecated(reason: "@sunset_date(2023-09-21) - not in prod yet, ios,android, ah-cost-overview \n. . ")
}

"""
CostOverviewSettlement Item type
"""
enum SettlementAfterDeliveryType {
    """
    Deposits
    """
    DEPOSIT

    """
    Item (DEFAULT)
    """
    ITEM

    """
    Restitution (Money back)
    """
    RESTITUTION

    """
    Service memo
    """
    SERVICE_MEMO
}

"""
Settlement image
"""
type SettlementImage {
    """
    ID of the image
    """
    imageId: Int

    """
    Generated presigned URL (valid for 15 seconds)
    """
    url: String
}

"""
Divided settlement items by type
"""
type SettlementItems {
    """
    Deposits (Statiegeld)
    """
    deposits: [SettlementAfterDelivery!]!

    """
    Else
    """
    otherSettlements: [SettlementAfterDelivery!]!

    """
    Restitutions for the customer
    """
    restitutions: [SettlementAfterDelivery!]!

    """
    Service Memo's (Frozen products)
    """
    serviceMemos: [SettlementAfterDelivery!]!
}

"""
Settlement refund method
"""
enum SettlementRefundMethod {
    """
    BANK
    """
    BANK

    """
    DELIVERER
    """
    DELIVERER

    """
    EVALUE
    """
    EVALUE

    """
    INVOICE
    """
    INVOICE

    """
    NO_REFUND
    """
    NO_REFUND
}

"""
Settlement feedback type
"""
enum SettlementType {
    ACTION_CODE
    CALCULATION_ERROR
    CANCELLED_BY_CUSTOMER
    CANCELLED_BY_CUSTOMER_SUPPORT
    CORRECTION_PARTNERSHOP
    DAMAGED
    DAMAGE_CLEANING_COSTS
    DEFROSTED
    DELIVERY_TOO_EARLY
    DELIVERY_TOO_LATE
    DEPOSITS_EXCEED_ORDER_VALUE
    DISCOUNT_NOT_APPLIED
    DOUBLE_PAYMENT
    EXPIRED
    FROZEN
    GENERAL_COMPENSATION
    GENERAL_CORRECTION
    LEAKY
    MISSING
    MISSING_LOAD_CARRIER
    MOULDY
    NOT_AT_HOME
    NOT_PICKED_UP
    ONLINE_PRICE_DIFFERS
    OTHER
    PACKAGING_DEPOSIT
    PACKING_SLIP_PRICE_DIFFERS
    PARTIALLY_NOT_DELIVERED
    PAST_EXPIRY_MARGIN
    PERSONAL_DISCOUNT_NOT_APPLIED
    PICKUP_ORDER_COSTS
    RETURN
    SPOILED
    SUBSCRIPTION_RESTITUTION
    WRONG_DELIVERY
}

"""
List of settlements containing settlement's and a message + a conclusion for all settlements
"""
type SettlementsTotal {
    """
    List of all settlements
    """
    settlements: [Settlement!]!

    """
    Accumulated amount of all settlements
    """
    totalAmount: Money!
}

"""
Result of a mutation done to a favorite list's shared entity member's permissions
"""
type SharedEntityMutationResult implements MutationResult {
    """
    Error message (if applicable)
    """
    errorMessage: String

    """
    Reference ID(s) of favorite list(s) which member permissions have altered
    """
    result: [String]

    """
    Whether mutation failed or succeeded
    """
    status: MutationResultStatus!
}

"""
Accepted shopping cart id's
"""
enum ShoppingCartId {
    """
    Shopping cart id for BE
    """
    BELGIUM

    """
    Shopping cart id for essentials (AH Compact)
    """
    ESSENTIALS

    """
    Shopping cart id for NL
    """
    NETHERLANDS
}

"""
GraphQL equivalent for Noun
"""
type SingularPluralName {
    """
    Plural name
    """
    plural: String

    """
    Singular name
    """
    singular: String!
}

"""
Slot for delivery or pickup order
"""
type Slot {
    """
    Date of the delivery
    """
    date: DateTime!

    """
    Formatted date of the delivery
    """
    dateFormatted: String!

    """
    Number of the day starting with 0
    """
    day: Int!

    """
    ID of the delivery location
    """
    deliveryLocationId: Int!

    """
    End time of the delivery
    """
    endTime: DateTime!

    """
    Formatted end time of the delivery
    """
    endTimeFormatted: String!

    """
    Whether a slot is full or not
    """
    isFullyBooked: Boolean!

    """
    Nudge types for the slot, for example "SUSTAINABLE" which means this is a sustainable slot.
    """
    nudgeType: [NudgeType]!

    """
    ID of the pickup location, only used for pickup slots
    """
    pickupLocationId: Int

    """
    Service charges for the slot
    """
    serviceCharge: ServiceCharge!

    """
    Shift code is used to plan a slot
    """
    shiftCode: String!

    """
    Start time of the delivery
    """
    startTime: DateTime!

    """
    Formatted start time of the delivery
    """
    startTimeFormatted: String!
}

"""
Day containing slots
"""
type SlotDay {
    """
    The date of the day in which slots are grouped
    """
    date: DateTime!

    """
    The formatted date of the day in which slots are grouped
    """
    dateFormatted: String!

    """
    Whether a day is already fully booked
    """
    isFullyBooked: Boolean!

    """
    The slots for delivery or pickup
    """
    slots: [Slot!]!
}

"""
Order in which the facade should return products.
This is sorted BEFORE splitting into pages
"""
enum SortBySort {
    ASC_DATE
    ASC_DEPARTMENT
    ASC_FREQUENCY
    ASC_RELEVANCE
    DESC_DATE
    DESC_DEPARTMENT
    DESC_FREQUENCY
    DESC_RELEVANCE
}

"""
Error reason for Sharing link validation and stamp transfer failiure.
"""
enum StampShareErrorReason {
    CANNOT_SELF_SHARE
    LINK_CONSUMED
    LINK_EXPIRED
    LINK_NOT_FOUND
    NOT_ENOUGH_STAMPS
    SHARING_NOT_ALLOWED
    UNKNOWN
}

"""
A gifting or requesting document.
"""
type StampShareable {
    """
    The expiration date and time of the gifting/requesting document
    """
    expiresAt: String!

    """
    The links of the gifting/requesting document
    """
    links: StampShareableLinks!

    """
    The programId of the gifting/requesting document
    """
    programId: Int!

    """
    The id of the gifting/requesting document
    """
    shareableId: String!
}

"""
Links of a gifting or requesting document.
"""
type StampShareableLinks {
    """
    Shareable link as a deeplink
    """
    deeplink: String!

    """
    Shareable link
    """
    href: String!
}

"""
Mutation result of creating or delete a gift link.
"""
type StampShareableMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Result of getting gift or request documents
    """
    result: StampShareable

    """
    Status of the mutation [failed | completely | partially]
    """
    status: MutationResultStatus!
}

"""
Validation result of a ShareableLink
"""
type StampShareableValidationResult {
    """
    Reason why the shareableId is invalid [expired|consumed|not found]
    """
    invalidReason: StampShareErrorReason

    """
    The id of the gifting/requesting document
    """
    shareableId: String!

    """
    Is the shareableId valid
    """
    valid: Boolean!
}

"""
Chage of the stamp balance
"""
type StampTransferBalanceChange {
    """
    How changes the balance
    """
    change: Int!

    """
    Members new balance
    """
    new: Int!

    """
    Members old balance
    """
    old: Int!
}

"""
Mutation result ot transfering stamps.
"""
type StampTransferMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Reason of transferring stamps error
    """
    errorReason: StampShareErrorReason

    """
    Result of transferring stamps
    """
    result: StampTransferResult

    """
    Status of the mutation [failed | completely | partially]
    """
    status: MutationResultStatus!
}

"""
Result ot transfering stamps.
"""
type StampTransferResult {
    """
    Chage of the stamp balance
    """
    balanceChange: StampTransferBalanceChange!

    """
    The programId of the gifting/requesting document
    """
    programId: Int!

    """
    The id of the gifting/requesting document
    """
    shareableId: String!
}

"""
Store information for store details
"""
type Store {
    """
    address
    """
    address: StoreAddress!

    """
    distance to store when searching with geolocation
    """
    distance: Float

    """
    position on the map
    """
    geoLocation: GeoLocation!

    """
    Main store id
    """
    id: Int!

    """
    Basic name
    """
    name: String!

    """
    opening days this and next week
    """
    openingDays: [StoreOpeningDay!]!

    """
    phone
    """
    phone: String

    """
    the services the shop offers
    """
    services: [StoreService!]

    """
    we have different types of stores
    """
    storeType: StoreType!
}

"""
Address of the store
"""
type StoreAddress {
    """
    city
    """
    city: String!

    """
    iso3 country code?
    """
    countryCode: String!

    """
    housenumber
    """
    houseNumber: String!

    """
    housenumber extra
    """
    houseNumberExtra: String

    """
    zipcode
    """
    postalCode: String!

    """
    streetname
    """
    street: String!
}

"""
Store count per place
"""
type StoreCityCount {
    """
    Place containing the stores
    """
    city: String!

    """
    Amount of stores in place
    """
    count: Int!
}

"""
Filter options for stores
"""
input StoreFilterInput {
    """
    City store is in should start with
    """
    cityStartsWith: String

    """
    If provided will sort the result set by nearest store
    """
    location: GeoLocationInput

    """
    Time frames stores is open on
    """
    openingHours: [StoreOpeningHoursInput!]

    """
    Services store offers
    """
    services: [ID!]

    """
    Type of store to include
    """
    storeType: StoreType
}

"""
Detailed information about a specific place and its location
"""
type StoreGeoLocationPlace {
    """
    The name of the city, if the place refers to a city

    Examples:
    The place "Amsterdam, Netherlands" is a city, so it will return "Amsterdam"
    The place "Amsterdam-West, Amsterdam, Netherlands" is a borough, so it will return null
    """
    city: String

    """
    Geo-location coordinates
    """
    coordinates: GeoLocation!

    """
    Place id
    """
    id: String!
}

"""
Suggestion for a possible location
"""
type StoreGeoLocationSuggestion {
    """
    Suggestion text
    """
    description: String!

    """
    Matched parts of the string
    """
    matches: [StoreGeoLocationSuggestionMatch!]!

    """
    Place id
    """
    placeId: String!
}

"""
Matched part of the search string
For example:
    - Search term: mster
    - Suggestion: Amsterdam
    -             -XxxxX---
    - Position: Index of X
    - Length: Distance from X to X
"""
type StoreGeoLocationSuggestionMatch {
    """
    Length of sub string matched
    """
    length: Int!

    """
    Position of match in search string
    """
    position: Int!
}

"""
Posible schema for single point on the map
"""
type StoreLocation {
    """
    position
    """
    geoLocation: GeoLocation!

    """
    id
    """
    id: Int!

    """
    name
    """
    name: String!

    """
    we have different types of stores
    """
    storeType: StoreType!
}

"""
openingsday
"""
type StoreOpeningDay {
    """
    date
    """
    date: String!

    """
    name of day, example 'maandag'
    """
    dayName: String!

    """
    next week date
    """
    nextWeekDate: String!

    """
    openingshours next week
    """
    nextWeekOpeningHour: StoreOpeningHour

    """
    openingshours
    """
    openingHour: StoreOpeningHour

    """
    type
    """
    type: StoreOpeningDayType!
}

"""
opening day type
"""
enum StoreOpeningDayType {
    """
    current
    """
    CURRENT

    """
    future
    """
    FUTURE

    """
    past
    """
    PAST
}

"""
openg hour
"""
type StoreOpeningHour {
    """
    date
    """
    date: String!

    """
    openingstime store from
    """
    openFrom: String

    """
    openingstime store till
    """
    openUntil: String
}

type StoreOpeningHourCount {
    """
    Amount of stores open in part of day
    """
    count: Int!

    """
    Type of store opening day
    """
    type: StoreOpeningHourType!
}

"""
Time frames stores can be open
"""
enum StoreOpeningHourType {
    """
    Store is open in evening
    """
    EVENING

    """
    Store is open now
    """
    NOW

    """
    Store is open on sundays
    """
    SUNDAY
}

"""
Time frames stores can be open
"""
enum StoreOpeningHoursInput {
    """
    Store is open in evening
    """
    EVENING

    """
    Store is open now
    """
    NOW

    """
    Store is open on sundays
    """
    SUNDAY
}

"""
Service a store offers
"""
type StoreService {
    """
    code
    """
    code: ID!

    """
    long description
    """
    description: String!

    """
    short description
    """
    shortDescription: String!
}

"""
Services and amount of stores that provide them
"""
type StoreServiceCount {
    """
    Amount of stores providing the service
    """
    count: Int!

    """
    Service provided by store
    """
    service: StoreService!
}

"""
Contains information about the stock of the product
"""
type StoreStockProduct {
    """
    product - Corresponding product
    """
    product: Product!

    """
    quantity - Quantity of items in stock
    """
    quantity: Float!

    """
    quantityType - @QuantityType
    """
    quantityType: QuantityType!
}

"""
Contains information about the stock of the product
"""
type StoreStockStore {
    """
    quantity - Quantity of items in stock
    """
    quantity: Float!

    """
    quantityType - @QuantityType
    """
    quantityType: QuantityType!

    """
    store - Corresponding store
    """
    store: Store
}

"""
The type of store
"""
enum StoreType {
    """
    normal shop
    """
    REGULAR

    """
    ah togo
    """
    TOGO

    """
    unknown
    """
    UNKNOWN

    """
    big xl shop
    """
    XL
}

type StoreTypeCount {
    """
    Amount of stores of this type
    """
    count: Int!

    """
    Type of store
    """
    type: StoreType!
}

"""
Store information for store details
"""
type Stores {
    """
    address
    """
    address: StoresAddress!

    """
    distance to store when searching with geolocation
    """
    distance: Float

    """
    position on the map
    """
    geoLocation: GeoLocation!

    """
    Main store id
    """
    id: Int!

    """
    Basic name
    """
    name: String!

    """
    opening days per week starting from current week
    """
    openingDays: [[StoresOpeningDay!]!]!

    """
    phone
    """
    phone: String

    """
    the services the shop offers
    """
    services: [StoresService!]

    """
    we have different types of stores
    """
    storeType: StoresType!
}

"""
Address of the store
"""
type StoresAddress {
    """
    city
    """
    city: String!

    """
    iso3 country code?
    """
    countryCode: String!

    """
    house number
    """
    houseNumber: String!

    """
    house number extra
    """
    houseNumberExtra: String

    """
    zipcode
    """
    postalCode: String!

    """
    street name
    """
    street: String!
}

"""
Store count per place
"""
type StoresCityCount {
    """
    Place containing the stores
    """
    city: String!

    """
    Amount of stores in place
    """
    count: Int!
}

"""
Filter options for stores
"""
input StoresFilterInput {
    """
    City store is in should start with
    """
    cityStartsWith: String

    """
    If provided will sort the result set by nearest store
    """
    location: GeoLocationInput

    """
    Time frames stores is open on
    """
    openingHours: [StoresOpeningHourType!]

    """
    Returns stores sorted by nearest to given postal code
    """
    postalCode: String

    """
    Services store offers
    """
    services: [ID!]

    """
    Type of store to include
    """
    storeType: StoresType
}

"""
Suggestion for a possible location
"""
type StoresGeoLocationSuggestion {
    """
    Suggestion text
    """
    description: String!

    """
    Geolocation of the suggestion
    """
    geoLocation: GeoLocation

    """
    The matched substring of the result
    """
    match: StoresGeoLocationSuggestionMatch
}

"""
Matched substring of the result
"""
type StoresGeoLocationSuggestionMatch {
    """
    Length of the matched string
    """
    length: Int!

    """
    Start position of the match within the result
    """
    position: Int!
}

"""
opening day
"""
type StoresOpeningDay {
    """
    date
    """
    date: String!

    """
    name of day, example 'maandag'
    """
    dayName: String!

    """
    openings hours
    """
    openingHour: StoresOpeningHour

    """
    type
    """
    type: StoresOpeningDayType!
}

"""
The type of opening day
"""
enum StoresOpeningDayType {
    """
    current
    """
    CURRENT

    """
    future
    """
    FUTURE

    """
    past
    """
    PAST
}

"""
opening hour
"""
type StoresOpeningHour {
    """
    openings time store from
    """
    openFrom: String

    """
    openings time store till
    """
    openUntil: String
}

"""
For each kind of opening hour, the amount of times it occurs in the search
"""
type StoresOpeningHourCount {
    """
    Amount of stores open in part of day
    """
    count: Int!

    """
    Type of store opening day
    """
    type: StoresOpeningHourType!
}

"""
Time frames stores can be open
"""
enum StoresOpeningHourType {
    """
    Store is open in evening
    """
    EVENING

    """
    Store is open now
    """
    NOW

    """
    Store is open on sundays
    """
    SUNDAY
}

"""
Result of store filtering
"""
type StoresResult {
    """
    Aggregations on store filter
    """
    aggregation: StoresResultAggregation!

    """
    Pagination information
    """
    page: PageInfo!

    """
    Stores matching filter
    """
    result: [Store!]
}

type StoresResultAggregation {
    """
    All opening days offered by result set and their aggregated amounts
    """
    openingHours: [StoreOpeningHourCount!]!

    """
    All services offered by result set and their aggregated amounts
    """
    services: [StoreServiceCount!]!

    """
    All store types offered by result set and their aggregated amounts
    """
    storeTypes: [StoreTypeCount!]!
}

"""
Aggregated results after searching for stores
"""
type StoresResultAggregationType {
    """
    All opening days offered by result set and their aggregated amounts
    """
    openingHours: [StoresOpeningHourCount!]!

    """
    All services offered by result set and their aggregated amounts
    """
    services: [StoresServiceCount!]!

    """
    All store types offered by result set and their aggregated amounts
    """
    storeTypes: [StoresTypeCount!]!
}

"""
Result of searching for stores
"""
type StoresResultType {
    """
    Aggregations on store filter
    """
    aggregation: StoresResultAggregationType!

    """
    Pagination information
    """
    pageInfo: PageInfo!

    """
    Stores matching filter
    """
    result: [Stores!]
}

"""
Services stores can provide
"""
type StoresService {
    """
    code
    """
    code: ID!

    """
    long description
    """
    description: String!

    """
    short description
    """
    shortDescription: String!
}

"""
Services and amount of stores that provide them
"""
type StoresServiceCount {
    """
    Amount of stores providing the service
    """
    count: Int!

    """
    Service provided by store
    """
    service: StoresService!
}

"""
The type of store
"""
enum StoresType {
    """
    normal shop
    """
    REGULAR

    """
    ah togo
    """
    TOGO

    """
    unknown
    """
    UNKNOWN

    """
    big xl shop
    """
    XL
}

"""
For each kind of store, the amount of times it occurs in the search
"""
type StoresTypeCount {
    """
    Amount of stores of this type
    """
    count: Int!

    """
    Type of store
    """
    type: StoresType!
}

"""
The availability of a certain subscription. For example: a delivery bundle cannot be sold to a member with a non-deliverable zipcode
"""
type SubscriptionAvailability {
    """
    Whether or not the subscription is available
    """
    available: Boolean!

    """
    Specific delivery slots for fixedDeliverySlots. For example gridType '5a' means that we only deliver between 07:00-14:00 on the specific postalCode.
    If gridType is not returned, it means that the all slots are available.
    """
    gridType: String
}

"""
Available subscription for purchase, including terms and pricing
"""
type SubscriptionAvailable {
    """
    Defintioncode, i.e. BEZORG12)
    """
    code: String!

    """
    Delivery days of the subscription
    """
    deliveryScheme: String!

    """
    Human readable description
    """
    description: String!

    """
    Optional discounts applied to available subscription
    """
    discounts: [SubscriptionDiscount!]

    """
    Contract length of the subscription in months
    """
    duration: Int!

    """
    Subscription identifier
    """
    id: ID!

    """
    Whether promocode is applicable for the subscriptionAvailable so members can get discount on this subscription
    """
    isPromoCodeApplicable: Boolean!

    """
    Whether the subscription is a trial subscription. No need for FE to have a list of trial subscriptions.
    """
    isTrialSubscription: Boolean!

    """
    What the next subscription type will be
    """
    postTrialSubscription: SubscriptionPostTrial

    """
    Pricing per month and per full duration
    """
    price: SubscriptionPrice!

    """
    Pricing per month and per full duration without discount
    """
    priceBeforeDiscount: SubscriptionPrice!

    """
    The subscription code type, i.e. OMNI or BEZORG
    """
    type: String!
}

"""
A bundle containing a possible combination of subscriptions
"""
type SubscriptionBundle {
    """
    The bundle ID
    """
    bundleId: ID!

    """
    Bundleprice per month and per full duration with discounts,
    this is the sum of the subscriptionsAvailable forPrices
    """
    bundlePrice: SubscriptionPrice!

    """
    Bundleprice per month and per full duration without discount,
    this is the sum of the subscriptionsAvailable fromPrices
    """
    bundlePriceBeforeDiscount: SubscriptionPrice!

    """
    Another bundle that may be an enhanced version of the current bundle. For example:
    Current bundle: BEZORG1 subscription
    Connected bundle: BEZORG1 + PREMIUM
    Using this data users may toggle premium on/off
    """
    connectedBundle: SubscriptionBundle

    """
    The available subscriptions in this subscription bundle
    """
    subscriptionsAvailable: [SubscriptionAvailable!]!
}

"""
Result after applying a promotion code to a subscriptionBundle
"""
type SubscriptionBundlePromoCodeApplyResult implements MutationResult {
    """
    Relevant error message if applicable. Show this on client-side to inform customers about what went wrong.
    """
    errorMessage: String

    """
    The subscriptionBundles with the code applied which includes the new bundle prices
    """
    result: [SubscriptionBundle!]

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result of subscribing to a subscription bundle
"""
type SubscriptionBundleSubscribeMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Response of an ideal payment
    """
    result: SubscriptionPaymentIDeal

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result after cancelling your subscription
"""
type SubscriptionCancelMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    SubscriptionPayment payload
    """
    result: SubscriptionCurrent

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result after cancelling you subscription. Directly cancelled returns null subscription and cancelled after end of period returns a subscription with
a certain end date
"""
type SubscriptionCancelMutationResultTemp implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    SubscriptionPayment payload
    """
    result: SubscriptionPlan

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Subscription cancellation specification
"""
type SubscriptionCancellation {
    """
    Shows the date the subscription will be cancelled on after a user choose to cancel it, null if not cancelled
    """
    date: Date

    """
    First possible cancellation date option, null if the option isn't possible
    """
    earliestDate: Date

    """
    Whether the subscription can be cancelled now without having to wait until the end of the period
    """
    isImmediatelyCancellable: Boolean

    """
    Last possible cancellation date option, null if the option isn't possible
    """
    latestDate: Date
}

"""
Comparison between current and new subscription
"""
type SubscriptionChange {
    """
    Current subscription
    """
    currentSubscription: SubscriptionAvailable!

    """
    Sell price with discounts and residual amount substracted. Customer needs to pay this amount when changing subscription.
    """
    finalPrice: Money!

    """
    New subscription
    """
    newSubscription: SubscriptionAvailable!

    """
    Residual amount when changing to new subscriptionplan. Will be substracted from the original price.
    """
    residualPrice: Money!
}

"""
The current subscription of a certain type of a member, such as delivery bundle and premium.
"""
type SubscriptionCurrent {
    """
    Subscription cancellation options and a the cancellation date
    """
    cancellation: SubscriptionCancellation!

    """
    Subscription definition code such as BEZORG_12
    """
    code: String!

    """
    The id of the definition which is the 'template' for the subscription containing the subscription details such as duration and prices
    """
    definitionId: Int!

    """
    Delivery scheme of the subscription
    """
    deliveryScheme: String!

    """
    Subscription duration in months
    """
    duration: Int

    """
    Last day of the subscription, null if not active
    """
    endDate: String

    """
    Data regarding extension of the current subscription
    """
    extension: SubscriptionExtension

    """
    Subscription id
    """
    id: ID!

    """
    Whether the subscription is activated and can be used
    """
    isActive: Boolean!

    """
    Whether the subscription can be canceled
    """
    isCancellable: Boolean!

    """
    Whether the subscription can be changed
    """
    isChangeable: Boolean!

    """
    Whether member is eligible for the SavingWarranty, is null when not applicable for subscription type
    """
    isEligibleForSavingWarranty: Boolean

    """
    Whether promocode is applicable for the next subscription so members can get discounts on their extension
    """
    isPromoCodeApplicable: Boolean!

    """
    Whether member can reactivate the subscription
    """
    isReactivateEnabled: Boolean

    """
    Whether the subscriptionCurrent is a trialSubscription
    """
    isTrialSubscription: Boolean!

    """
    The price of the subscription without any optional discounts
    """
    originalPrice: Money!

    """
    What the next subscription type will be
    """
    postTrialSubscription: SubscriptionPostTrial

    """
    The price paid for the current subscription, originalPrice including discounts
    """
    sellPrice: Money!

    """
    Start day of the subscription
    """
    startDate: String!

    """
    Statuscode of subscription
    """
    statusCode: Int!

    """
    Subscription type such as OMNI, BEZORG or B2B
    """
    type: String!
}

"""
Result after applying a promotion code to a current subscription
"""
type SubscriptionCurrentPromoCodeApplyResult implements MutationResult {
    """
    Relevant error message if applicable. Show this on client-side to inform customers about what went wrong.
    """
    errorMessage: String

    """
    The subscriptionCurrent with the code applied which includes the new extension
    """
    result: SubscriptionCurrent

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result after changing your subscription
"""
type SubscriptionDefinitionChangeMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Subscription of the member AFTER change
    """
    result: SubscriptionCurrent

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Result after changing your subscription
"""
type SubscriptionDefinitionChangeMutationResultTemp implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    Subscription of the member AFTER change
    """
    result: SubscriptionPlan

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Subscription discount information
"""
type SubscriptionDiscount {
    """
    Code name of the Member Incentive
    """
    code: String!

    """
    Description of the discount
    """
    description: String!

    """
    The discount amount
    """
    discount: Money!

    """
    The used promoCode
    """
    promoCode: String
}

"""
Estimated premium savings of remaining subscription days based on the members current purchase history
"""
type SubscriptionEstimatedPremiumSavings {
    """
    Average daily saved based on current purchase history since the start of your subscription. If the startdate is longer than 27 months ago,
    then the startdate used to calculate will be 27 months ago.
    """
    averageDailySavedAmount: Float!

    """
    Average daily stamps saved based on current purchase history since the start of your subscription. If the startdate is longer than
    27 months ago, then the startdate used to calculate will be 27 months ago.
    """
    averageDailySavedStampsAmount: Float!

    """
    Estimated saved amount of the remaining days of your subscription. An attempt to convince members to NOT cancel subscriptions.
    365 - (active days % 365) * average saved amount
    """
    estimatedRemainingDaysSavedAmount: Float!

    """
    Estimated saved stamps amount of the remaining days of your subscription. An attempt to convince members to NOT cancel subscriptions.
    365 - (active days % 365) * average saved stamps amount
    """
    estimatedRemainingDaysSavedStampsAmount: Int!

    """
    Estimated yearly saved amount = Average daily saved amount * 365.
    """
    estimatedYearlySavedAmount: Float!

    """
    Estimated yearly saved stamps amount = Average daily saved stamps amount * 365.
    """
    estimatedYearlySavedStampsAmount: Int!

    """
    Amount of continuous active days of your active premium subscription. Extensions included up until 27 months ago.
    """
    subscriptionActiveDays: Int!
}

"""
Data regarding the extension of the subscription. Previously known as SubscriptionRenewal
"""
type SubscriptionExtension {
    """
    Date when the subscription will be extended
    """
    date: String!

    """
    Discounts that are applied on the subscription extension
    """
    discounts: [SubscriptionDiscount!]

    """
    Price of the extended subscription without any discounts
    """
    originalPrice: Money!

    """
    Price of the extended subscription which includes discounts
    """
    sellPrice: Money!
}

"""
The available fixed delivery slot for a specific subscription. Only available for BEZORG and B2B type.
"""
type SubscriptionFixedDeliverySlot {
    """
    Date of delivery slot
    """
    date: String!

    """
    Begin time of range where delivery may be expected
    """
    from: String!

    """
    Whether the moment is favourite or not
    """
    isFavourite: Boolean!

    """
    Whether the delivery slot is preferred or not
    """
    isPreferred: Boolean!

    """
    Nudge labels
    """
    nudgeTypes: [NudgeType!]!

    """
    Scoring of how good a slot is for AH. You want to stimulate members to choose the highest scoring slots
    """
    score: Float

    """
    End time of range where delivery may be expected
    """
    until: String!
}

"""
The current chosen fixed delivery slot of the member
"""
type SubscriptionFixedDeliverySlotCurrent {
    """
    Whether the fixed delivery slot is sustainable or not
    """
    isSustainableSlot: Boolean!

    """
    End time of range where delivery may be expected
    """
    slotEndTime: String!

    """
    Begin time of range where delivery may be expected
    """
    slotStartTime: String!

    """
    Startdate of fixed delivery slot
    """
    startDate: String!
}

"""
Description of next subscription
"""
type SubscriptionNextSubscription {
    """
    Subscription type code
    """
    code: String!

    """
    Human readable description
    """
    description: String!

    """
    Subscription identifier
    """
    id: ID!

    """
    Amount customer will pay for the next subscription
    """
    price: Money!

    """
    When the subscription will start
    """
    startDate: String!
}

"""
The return type of a payment
"""
union SubscriptionPayment = SubscriptionPaymentIDeal

"""
Result of starting of payment
"""
type SubscriptionPaymentIDeal {
    """
    Id of payment
    """
    id: String!

    """
    Status of payment
    """
    status: SubscriptionPaymentStatus!

    """
    Url to continue payment
    """
    url: String!
}

"""
Available iDeal issuers
"""
type SubscriptionPaymentIDealIssuer {
    """
    Logo brand image of iDeal issuer
    """
    brandUrl: String!

    """
    Reference ID of iDeal issuer
    """
    id: Int!

    """
    Name of iDeal issuer
    """
    name: String!
}

"""
Required options for 3rd party payment providers
Provide only one payment option
"""
input SubscriptionPaymentProvider {
    """
    Payment options for iDeal payments
    """
    iDeal: SubscriptionPaymentProviderIDeal
}

"""
Payment options for iDeal payments
"""
input SubscriptionPaymentProviderIDeal {
    """
    Identifier used by iDeal
    Use SubscriptionPaymentIDealIssuers to get possible values
    """
    issuerId: Int!
}

"""
Possible payment status after payment
"""
enum SubscriptionPaymentStatus {
    """
    Payment has been cancelled
    """
    CANCELLED

    """
    Payment has been completed
    """
    COMPLETED

    """
    Payment has expired
    """
    EXPIRED

    """
    Payment has failed
    """
    FAILURE

    """
    Payment is newly created
    """
    NEW

    """
    Payment is open
    """
    OPEN
}

"""
A subscription. Identical to MemberSubscription. Use this instead. Note: Subscription is a reserved type in GraphQL for a real-time websocket connection, so we call this SubscriptionPlan instead.
"""
type SubscriptionPlan {
    """
    Subscription cancellation options and a the cancellation date
    """
    cancellation: SubscriptionCancellation!

    """
    Subscription definition code such as BEZORG_12
    """
    code: String!

    """
    Delivery scheme of the subscription
    """
    deliveryScheme: String!

    """
    Subscription duration in months
    """
    duration: Int!

    """
    Last day of the subscription, null if not active
    """
    endDate: String

    """
    Subscription identifier
    """
    id: ID!

    """
    Whether the subscription is activated and can be used
    """
    isActive: Boolean!

    """
    Whether the subscription can be canceled
    """
    isCancellable: Boolean!

    """
    Whether the subscription can be changed
    """
    isChangeable: Boolean!

    """
    What the next subscription type will be
    """
    nextSubscription: SubscriptionNextSubscription

    """
    The monthly price of the subscription
    """
    price: Money!

    """
    Next renewal, null if already canceled
    """
    renewal: SubscriptionRenewal

    """
    Start day of the subscription
    """
    startDate: String!

    """
    Statuscode of subscription
    """
    statusCode: Int!

    """
    Subscription type such as OMNI, BEZORG or B2B,
    """
    type: String!
}

"""
Description of the subscription a member automatically gets after a trial subscription
"""
type SubscriptionPostTrial {
    """
    Subscription code such as BEZORG1, PREMIUM, B2B12
    """
    code: String!

    """
    Human readable description of the subscription
    """
    description: String!

    """
    Optional discounts applied to available subscription
    """
    discounts: [SubscriptionDiscount!]

    """
    Duration of the subscription after trial subscription
    """
    duration: Int

    """
    Subscription identifier
    """
    id: ID!

    """
    The price of the automatically extended subscription after the trial
    """
    sellPrice: Money!

    """
    When the subscription will start
    """
    startDate: String!
}

"""
The amount saved due to the premium subscription
"""
type SubscriptionPremiumSavings {
    """
    The amount of extra Airmiles received by buying at Albert Heijn with Premium.
    Premium doubles the amount of Airmiles a customer receives.
    """
    additionalAirmilesObtained: Int!

    """
    The amount of extra Airmiles received but displayed in money.
    """
    additionalAirmilesObtainedInMoney: Money!

    """
    The total amount of interest received over the extra purchaseStamps
    """
    additionalPurchaseStampsInterest: Money!

    """
    The amount of extra purchaseStamps (koopzegels) received.
    Customers can collect purchaseStamps twice as fast with premium by buying more stamps.
    """
    additionalPurchaseStampsObtained: Int!

    """
    The amount of extra savingsstamps (spaarzegels such as the cutlery campaign) received
    """
    additionalSavingsStampsObtained: Int!

    """
    The amount spent to purchase the additional purchaseStamps.
    """
    addtionalPurchaseStampsPurchaseAmount: Money!

    """
    Total amount saved on buying biological products.
    """
    bioDiscountAmount: Money!

    """
    Total amount saved on buying Bonus Box promotions SINCE premium activation. Both premium Bonus Box and normal Bonus Box promotions.
    """
    bonusBoxDiscountAmount: Money!

    """
    Amount saved by buying Premium specific Bonus Box promotions.
    """
    bonusBoxDiscountPremiumExclusiveAmount: Money!

    """
    The total amount saved by purchasing / renewing delivery bundles due to having Premium
    """
    deliveryBundleDiscountAmount: Money!

    """
    Latest update of the savings. The data may be already present in the DB but the savings calculations job
    still needs to run for the latest state.
    """
    lastUpdated: String!

    """
    Start date of one's consecutive premium subscription. Format is YYYY-MM-DD.
    """
    subscriptionStartDate: String!

    """
    Total amount saved on buying Terra products.
    """
    terraDiscountAmount: Money!

    """
    The total amount of extra stamps and Airmiles received.
    Total = additionalAirmilesObtained + additionalPurchaseStampsObtained + additionalSavingsStampsObtained.
    """
    totalAdditionalStamps: Int!

    """
    The total amount saved by purchasing with premium.
    Total = additionalAirmilesObtainedInMoney + bioDiscountAmount + bonusboxPremiumDiscDivided + additionalPurchaseStampsInterest.
    """
    totalSavedAmount: Money!
}

"""
Subscription pricing specification
"""
type SubscriptionPrice {
    """
    Price for entire duration
    """
    fullDuration: Money!

    """
    Monthly price
    """
    monthly: Money!
}

"""
Result after applying reactivation to a current trial subscription
"""
type SubscriptionReactivateResult implements MutationResult {
    """
    Relevant error message if applicable. Show this on client-side to inform customers about what went wrong.
    """
    errorMessage: String

    """
    The reactivated subscriptionCurrent
    """
    result: SubscriptionCurrent

    """
    Whether reactivation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Subscription next renewal pricing specification
"""
type SubscriptionRenewal {
    """
    Date renewal will occur
    """
    date: String!

    """
    Price before discounts are applied
    """
    originalPrice: Money!

    """
    Price after discounts are applied
    """
    sellPrice: Money!
}

"""
The potential savings a member can get by getting a subscription. Hence, the discount they are missing out on.
"""
type SubscriptionSavingPotential {
    """
    Premium customer WITHOUT delivery bundle who ordered online in the past 60 days.
    """
    hasOrderedRecently: Boolean!

    """
    Potential savings if the member has premium.
    """
    premiumSavingPotential: Float!
}

"""
Subscription savingsamount
"""
type SubscriptionSavings {
    """
    Calculated savings for Instore purchases
    """
    inStore: Savings!

    """
    Calculated savings for WithSubscriptions purchases such as Videoland, delivery-bundle and Ziggo
    """
    withSubscriptions: Savings!
}

"""
Input options for calculating the hypothetical savings after having a subscription
"""
input SubscriptionSavingsOptions {
    """
    Member is saving air miles
    """
    airmilesActive: Boolean!

    """
    Frequency of enabling 1-5 products from Bonusbox
    """
    bonusBoxActivationFrequency: String!

    """
    Member is saving purchase stamps
    """
    purchaseStampsActive: Boolean!

    """
    Amount of bio products bought per week
    """
    weeklyBioProductsPurchase: String!
}

"""
Result after setting your fixed delivery slot
"""
type SubscriptionSetFixedDeliverySlotMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    SubscriptionPayment payload
    """
    result: SubscriptionFixedDeliverySlotCurrent

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
Date and time slot for a subscription slot
"""
input SubscriptionSlotInput {
    """
    Date of personal slot
    """
    date: Date!

    """
    Begin time of personal slot
    """
    from: String!

    """
    End time of personal slot
    """
    until: String!
}

"""
Result after subscribing to Premium, delivery-bundle or b2b bundle.
"""
type SubscriptionSubscribeMutationResult implements MutationResult {
    """
    Relevant error message if applicable
    """
    errorMessage: String

    """
    SubscriptionPayment payload
    """
    result: SubscriptionPayment!

    """
    Whether mutation succeeded, failed completely or partially
    """
    status: MutationResultStatus!
}

"""
A summary of the current subscription.
"""
type SubscriptionSummary {
    """
    The definition code of a member's current subscription (e.g., BEZORG1, BEZORG12)
    """
    currentSubscriptionCode: String

    """
    Whether member has had the subscription before
    """
    hasHadSubscription: Boolean!
}

"""
Currently supported subscriptionTypes
"""
enum SubscriptionType {
    """
    B2B delivery bundle
    """
    B2B

    """
    B2C delivery bundle
    """
    BEZORG

    """
    PREMIUM
    """
    OMNI
}

"""
Store supplier information
"""
type Supplier {
    """
    address of the supplier
    """
    address: SupplierAddress!

    """
    category of the supplier
    """
    category: String!

    """
    geolocation of the supplier
    """
    geoLocation: GeoLocation!

    """
    id for supplier
    """
    id: Int!

    """
    Is inside Better for Nature Program
    """
    inBetterForNatureProgram: Boolean!

    """
    title of the supplier
    """
    name: String!

    """
    supplier type
    """
    supplierType: String!
}

"""
Address of the supplier
"""
type SupplierAddress {
    """
    address
    """
    address: String

    """
    city
    """
    city: String!

    """
    country code in Aplha3
    """
    countryCode: String!

    """
    zipcode
    """
    postalCode: String
}

"""
A type containing a targeted offer. This is an offer that is only valid for a single member,
for example a Bonus Box or Digital Scratching offer.
"""
type TargetedOffer {
    """
    Secondary, external, IDs of a targeted offer. These are IDs that link this targeted offer
    to various other systems in the domain.
    """
    externalIds: TargetedOfferExternalIds!

    """
    The primary ID of a targeted offer.
    """
    id: UUID!

    """
    The status of the targeted offer.
    """
    status: TargetedOfferStatus!

    """
    The period in which the targeted offer is valid.
    """
    validityPeriod: TargetedOfferPeriod!
}

"""
An enumeration that contains the exact error reason that might be returned when attempting to
allocate a targeted offer to a member.
"""
enum TargetedOfferAllocationErrorReason {
    """
    Unable to allocate a targeted offer as the member does not have enough points to trade
    in for an targeted offer.
    """
    NOT_ENOUGH_POINTS

    """
    Unable to allocate a targeted offer as the member is not opted in for Digital Savings,
    and thus does not have access to this feature.
    """
    NOT_OPTED_IN

    """
    Unable to allocate a targeted offer as there are none more available (for this member).
    """
    NO_OFFER_AVAILABLE

    """
    Unknown exception occurred, most likely due to a backend system malfunctioning.
    """
    UNKNOWN
}

"""
A type containing the result of an allocation mutation. Allocations might fail if the member
is not eligible for (another) targeted offer for a program. For example, they might not
have enough points available to trade for an allocated offer.
"""
type TargetedOfferAllocationMutationResult implements MutationResult {
    """
    A message stating why an allocation was not successful. Will be null when the mutation
    was successful.
    """
    errorMessage: String

    """
    A reason enum stating why an allocation was not successful, more fine-tuned than the
    error message. Will be null when the mutation was successful.
    """
    errorReason: TargetedOfferAllocationErrorReason

    """
    The status of the mutation. Indicates if the allocation was successful or not.
    """
    status: MutationResultStatus!

    """
    The allocated Targeted Offer, when the allocation was successful. Will be null when
    the allocation was not successful.
    """
    targetedOffer: TargetedOffer
}

"""
A type containing various secondary, external, IDs of a targeted offer.
"""
type TargetedOfferExternalIds {
    """
    The old ID of the offer. This one has a similar role as the offerId, but is used for legacy
    systems not yet migrated over to the new offer microservices.
    """
    hqId: String!

    """
    The ID of the offer. This is not the same as the targeted offer ID. The offer ID is the
    ID of an offer in our offer systems that is not member-specific. The combination of member
    and offer IDs makes the targeted offer ID.
    """
    offerId: UUID!

    """
    The ID of the loyalty program that a targeted offer belongs to. Can be null if the targeted
    offer does not belong to any loyalty program (or belongs to a loyalty program without an ID).
    """
    programId: Int
}

"""
A type containing a timespan used by targeted offers. The start and end are both dates, and
as such do not contain time information.
"""
type TargetedOfferPeriod {
    """
    End date of the period.
    """
    end: Date!

    """
    Start date of the period.
    """
    start: Date!
}

"""
An enumeration containing the status of a targeted offer. This status indicates if and what
action a member has already taken for a particular targeted offer.
"""
enum TargetedOfferStatus {
    """
    The targeted offer is (still) redeemable. This means that the member is eligable to pick
    up one or multiple of the products in the targeted offer.
    """
    REDEEMABLE

    """
    The targeted offer has been redeemed, and can not be redeemed a second time.
    """
    REDEEMED
}

"""
Image renditions returned by the product image processor
in the form of D<width>x<height>
"""
enum TaxonomyImageRenditions {
    """
    width: 200, height: 200
    """
    D200X200

    """
    width: 400, height: 400
    """
    D400X400

    """
    width: 800, height: 800
    """
    D800X800
}

"""
Http Header (has name & value)
"""
type TestHttpHeader {
    """
    Name of the header.
    """
    name: String!

    """
    Value of the header.
    """
    value: String!
}

"""
A MutationResult with an Int
"""
type TestMutationResult implements MutationResult {
    """
    An error message
    """
    errorMessage: String

    """
    The result
    """
    result: Int!

    """
    The status
    """
    status: MutationResultStatus!
}

"""
Input type for a testWithArguments mutation
"""
input TestWithArgumentsInput {
    optionalNumber: Int
    optionalString: String
    requiredNumber: Int!
    requiredString: String!
}

"""
A UUIDv4
"""
scalar UUID

"""
A block unsubscribe reason
"""
enum UnsubscribeBlockerReason {
    """
    There is still a active B2B delivery bundle
    """
    ACTIVE_B2B_DELIVERY_BUNDLE

    """
    There is still a active delivery bundle
    """
    ACTIVE_DELIVERY_BUNDLE

    """
    There is still a active or cancelled premium subscription
    """
    ACTIVE_OR_CANCELLED_PREMIUM_SUBSCRIPTION

    """
    There is still a active premium subscription
    """
    ACTIVE_PREMIUM_SUBSCRIPTION

    """
    There is still an open settlement for the customer
    """
    OPEN_SETTLEMENT

    """
    There is still a positive balance of purchase stamps
    """
    POSITIVE_PURCHASE_STAMP_BALANCE
}

"""
Given input to fetch blocker reasons
"""
input UnsubscribeBlockerReasonInput {
    """
    Given card type. The relevant card types for this query are: bonus, airmiles and gall.
    """
    card: String

    """
    Given membership name. The relevant membership name for this query is: LOYALTY.
    """
    membership: String
}

"""
Specific error code when card has been updated
"""
enum UpdateCardResultCode {
    """
    Card can not be deleted as it has a pending reservation
    """
    CARD_HAS_PENDING_RESERVATION

    """
    Unknown error has occurred.
    """
    UNKNOWN
}

"""
Defines recipe rating after update
"""
type UpdatedRecipeRating {
    """
    New average rating
    """
    average: Float!

    """
    New number of counts
    """
    count: Int!
}

"""
Preparation instructions formatted for web ui
"""
type UsageWithExtra {
    """
     Each element in this array is a separate text line of the instruction,
    each to be rendered on a new line
    """
    contentLines: [String!]

    """
    If present, used to decorate the content of `contentLines` during rendering.
    For example, it may contain a way of cooking: 'Koken', 'Bakken', etc.
    """
    extra: String
}

"""
User Challenge that is performed by the user doing something
"""
type UserChallengeAction implements CheckoutChallengeAction {
    """
    The id of the authorization that is being performed on the payment
    """
    authorizationId: String!

    """
    Base 64 encoded data of the psp
    """
    data: String!

    """
    SDK Information used for the challenge
    """
    sdk: PaymentSDK

    """
    Transaction Id
    """
    transactionId: String!
}

"""
The returned value after GetMemberCodeResponse is normalized
"""
type ValidationResponse {
    """
    The returned status if the checked code is valid
    """
    status: CodeStatus
}

"""
Blue Billywig video
"""
type VideoBbw {
    """
    A list of stream files/versions/renditions
    """
    assets: [VideoBbwAsset!]

    """
    Video author
    """
    author: String

    """
    The time and date the video was created
    """
    createdDate: String!

    """
    Video description
    """
    description: String

    """
    Video height
    """
    height: String

    """
    Video ID
    """
    id: String!

    """
    The original filename of the attached audiovisual file
    """
    originalFilename: String!

    """
    path to the video file
    """
    src: String

    """
    A list of images related to the video
    """
    thumbnails: [VideoBbwThumbnail]

    """
    Video title
    """
    title: String

    """
    The last updated date and time for a video
    """
    updatedDate: String!

    """
    Video width
    """
    width: String
}

"""
Stream file/version/rendition
"""
type VideoBbwAsset {
    """
    Bandwidth (kbps)
    """
    bandwidth: String

    """
    Asset height
    """
    height: String

    """
    Length (in seconds)
    """
    length: String

    """
    Location path
    """
    src: String!

    """
    “active” or “inactive”
    """
    status: String

    """
    Asset width
    """
    width: String
}

"""
Image related to the video
"""
type VideoBbwThumbnail {
    """
    Image height
    """
    height: String

    """
    True for the selected thumbnail and false for others
    """
    main: String

    """
    A file uri reference
    """
    src: String!

    """
    Image width
    """
    width: String
}
